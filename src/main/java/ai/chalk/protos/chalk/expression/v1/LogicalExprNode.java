// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/expression/v1/expression.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.expression.v1;

/**
 * Protobuf type {@code chalk.expression.v1.LogicalExprNode}
 */
public final class LogicalExprNode extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:chalk.expression.v1.LogicalExprNode)
    LogicalExprNodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LogicalExprNode.newBuilder() to construct.
  private LogicalExprNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LogicalExprNode() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LogicalExprNode();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_LogicalExprNode_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_LogicalExprNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.chalk.protos.chalk.expression.v1.LogicalExprNode.class, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder.class);
  }

  private int exprTypeCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object exprType_;
  public enum ExprTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    COLUMN(1),
    ALIAS(2),
    LITERAL(3),
    BINARY_EXPR(4),
    AGGREGATE_EXPR(5),
    IS_NULL_EXPR(6),
    IS_NOT_NULL_EXPR(7),
    NOT_EXPR(8),
    BETWEEN(9),
    CASE(10),
    CAST(11),
    SORT(12),
    NEGATIVE(13),
    IN_LIST(14),
    WILDCARD(15),
    SCALAR_FUNCTION(16),
    TRY_CAST(17),
    WINDOW_EXPR(18),
    AGGREGATE_UDF_EXPR(19),
    SCALAR_UDF_EXPR(20),
    GET_INDEXED_FIELD(21),
    GROUPING_SET(22),
    CUBE(23),
    ROLLUP(24),
    IS_TRUE(25),
    IS_FALSE(26),
    IS_UNKNOWN(27),
    IS_NOT_TRUE(28),
    IS_NOT_FALSE(29),
    IS_NOT_UNKNOWN(30),
    LIKE(31),
    ILIKE(32),
    SIMILAR_TO(33),
    PLACEHOLDER(34),
    EXPRTYPE_NOT_SET(0);
    private final int value;
    private ExprTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExprTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ExprTypeCase forNumber(int value) {
      switch (value) {
        case 1: return COLUMN;
        case 2: return ALIAS;
        case 3: return LITERAL;
        case 4: return BINARY_EXPR;
        case 5: return AGGREGATE_EXPR;
        case 6: return IS_NULL_EXPR;
        case 7: return IS_NOT_NULL_EXPR;
        case 8: return NOT_EXPR;
        case 9: return BETWEEN;
        case 10: return CASE;
        case 11: return CAST;
        case 12: return SORT;
        case 13: return NEGATIVE;
        case 14: return IN_LIST;
        case 15: return WILDCARD;
        case 16: return SCALAR_FUNCTION;
        case 17: return TRY_CAST;
        case 18: return WINDOW_EXPR;
        case 19: return AGGREGATE_UDF_EXPR;
        case 20: return SCALAR_UDF_EXPR;
        case 21: return GET_INDEXED_FIELD;
        case 22: return GROUPING_SET;
        case 23: return CUBE;
        case 24: return ROLLUP;
        case 25: return IS_TRUE;
        case 26: return IS_FALSE;
        case 27: return IS_UNKNOWN;
        case 28: return IS_NOT_TRUE;
        case 29: return IS_NOT_FALSE;
        case 30: return IS_NOT_UNKNOWN;
        case 31: return LIKE;
        case 32: return ILIKE;
        case 33: return SIMILAR_TO;
        case 34: return PLACEHOLDER;
        case 0: return EXPRTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ExprTypeCase
  getExprTypeCase() {
    return ExprTypeCase.forNumber(
        exprTypeCase_);
  }

  public static final int COLUMN_FIELD_NUMBER = 1;
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
   * @return Whether the column field is set.
   */
  @java.lang.Override
  public boolean hasColumn() {
    return exprTypeCase_ == 1;
  }
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
   * @return The column.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.Column getColumn() {
    if (exprTypeCase_ == 1) {
       return (ai.chalk.protos.chalk.expression.v1.Column) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.Column.getDefaultInstance();
  }
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.ColumnOrBuilder getColumnOrBuilder() {
    if (exprTypeCase_ == 1) {
       return (ai.chalk.protos.chalk.expression.v1.Column) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.Column.getDefaultInstance();
  }

  public static final int ALIAS_FIELD_NUMBER = 2;
  /**
   * <pre>
   * alias
   * </pre>
   *
   * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
   * @return Whether the alias field is set.
   */
  @java.lang.Override
  public boolean hasAlias() {
    return exprTypeCase_ == 2;
  }
  /**
   * <pre>
   * alias
   * </pre>
   *
   * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
   * @return The alias.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.AliasNode getAlias() {
    if (exprTypeCase_ == 2) {
       return (ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.AliasNode.getDefaultInstance();
  }
  /**
   * <pre>
   * alias
   * </pre>
   *
   * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.AliasNodeOrBuilder getAliasOrBuilder() {
    if (exprTypeCase_ == 2) {
       return (ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.AliasNode.getDefaultInstance();
  }

  public static final int LITERAL_FIELD_NUMBER = 3;
  /**
   * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
   * @return Whether the literal field is set.
   */
  @java.lang.Override
  public boolean hasLiteral() {
    return exprTypeCase_ == 3;
  }
  /**
   * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
   * @return The literal.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.arrow.v1.ScalarValue getLiteral() {
    if (exprTypeCase_ == 3) {
       return (ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_;
    }
    return ai.chalk.protos.chalk.arrow.v1.ScalarValue.getDefaultInstance();
  }
  /**
   * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.arrow.v1.ScalarValueOrBuilder getLiteralOrBuilder() {
    if (exprTypeCase_ == 3) {
       return (ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_;
    }
    return ai.chalk.protos.chalk.arrow.v1.ScalarValue.getDefaultInstance();
  }

  public static final int BINARY_EXPR_FIELD_NUMBER = 4;
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
   * @return Whether the binaryExpr field is set.
   */
  @java.lang.Override
  public boolean hasBinaryExpr() {
    return exprTypeCase_ == 4;
  }
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
   * @return The binaryExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.BinaryExprNode getBinaryExpr() {
    if (exprTypeCase_ == 4) {
       return (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.BinaryExprNodeOrBuilder getBinaryExprOrBuilder() {
    if (exprTypeCase_ == 4) {
       return (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance();
  }

  public static final int AGGREGATE_EXPR_FIELD_NUMBER = 5;
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
   * @return Whether the aggregateExpr field is set.
   */
  @java.lang.Override
  public boolean hasAggregateExpr() {
    return exprTypeCase_ == 5;
  }
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
   * @return The aggregateExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.AggregateExprNode getAggregateExpr() {
    if (exprTypeCase_ == 5) {
       return (ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.AggregateExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.AggregateExprNodeOrBuilder getAggregateExprOrBuilder() {
    if (exprTypeCase_ == 5) {
       return (ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.AggregateExprNode.getDefaultInstance();
  }

  public static final int IS_NULL_EXPR_FIELD_NUMBER = 6;
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
   * @return Whether the isNullExpr field is set.
   */
  @java.lang.Override
  public boolean hasIsNullExpr() {
    return exprTypeCase_ == 6;
  }
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
   * @return The isNullExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNull getIsNullExpr() {
    if (exprTypeCase_ == 6) {
       return (ai.chalk.protos.chalk.expression.v1.IsNull) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNull.getDefaultInstance();
  }
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNullOrBuilder getIsNullExprOrBuilder() {
    if (exprTypeCase_ == 6) {
       return (ai.chalk.protos.chalk.expression.v1.IsNull) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNull.getDefaultInstance();
  }

  public static final int IS_NOT_NULL_EXPR_FIELD_NUMBER = 7;
  /**
   * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
   * @return Whether the isNotNullExpr field is set.
   */
  @java.lang.Override
  public boolean hasIsNotNullExpr() {
    return exprTypeCase_ == 7;
  }
  /**
   * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
   * @return The isNotNullExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotNull getIsNotNullExpr() {
    if (exprTypeCase_ == 7) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotNull.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotNullOrBuilder getIsNotNullExprOrBuilder() {
    if (exprTypeCase_ == 7) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotNull.getDefaultInstance();
  }

  public static final int NOT_EXPR_FIELD_NUMBER = 8;
  /**
   * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
   * @return Whether the notExpr field is set.
   */
  @java.lang.Override
  public boolean hasNotExpr() {
    return exprTypeCase_ == 8;
  }
  /**
   * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
   * @return The notExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.Not getNotExpr() {
    if (exprTypeCase_ == 8) {
       return (ai.chalk.protos.chalk.expression.v1.Not) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.Not.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.NotOrBuilder getNotExprOrBuilder() {
    if (exprTypeCase_ == 8) {
       return (ai.chalk.protos.chalk.expression.v1.Not) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.Not.getDefaultInstance();
  }

  public static final int BETWEEN_FIELD_NUMBER = 9;
  /**
   * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
   * @return Whether the between field is set.
   */
  @java.lang.Override
  public boolean hasBetween() {
    return exprTypeCase_ == 9;
  }
  /**
   * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
   * @return The between.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.BetweenNode getBetween() {
    if (exprTypeCase_ == 9) {
       return (ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.BetweenNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.BetweenNodeOrBuilder getBetweenOrBuilder() {
    if (exprTypeCase_ == 9) {
       return (ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.BetweenNode.getDefaultInstance();
  }

  public static final int CASE_FIELD_NUMBER = 10;
  /**
   * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
   * @return Whether the case field is set.
   */
  @java.lang.Override
  public boolean hasCase() {
    return exprTypeCase_ == 10;
  }
  /**
   * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
   * @return The case.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.CaseNode getCase() {
    if (exprTypeCase_ == 10) {
       return (ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.CaseNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.CaseNodeOrBuilder getCaseOrBuilder() {
    if (exprTypeCase_ == 10) {
       return (ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.CaseNode.getDefaultInstance();
  }

  public static final int CAST_FIELD_NUMBER = 11;
  /**
   * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
   * @return Whether the cast field is set.
   */
  @java.lang.Override
  public boolean hasCast() {
    return exprTypeCase_ == 11;
  }
  /**
   * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
   * @return The cast.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.CastNode getCast() {
    if (exprTypeCase_ == 11) {
       return (ai.chalk.protos.chalk.expression.v1.CastNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.CastNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.CastNodeOrBuilder getCastOrBuilder() {
    if (exprTypeCase_ == 11) {
       return (ai.chalk.protos.chalk.expression.v1.CastNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.CastNode.getDefaultInstance();
  }

  public static final int SORT_FIELD_NUMBER = 12;
  /**
   * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
   * @return Whether the sort field is set.
   */
  @java.lang.Override
  public boolean hasSort() {
    return exprTypeCase_ == 12;
  }
  /**
   * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
   * @return The sort.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.SortExprNode getSort() {
    if (exprTypeCase_ == 12) {
       return (ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.SortExprNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.SortExprNodeOrBuilder getSortOrBuilder() {
    if (exprTypeCase_ == 12) {
       return (ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.SortExprNode.getDefaultInstance();
  }

  public static final int NEGATIVE_FIELD_NUMBER = 13;
  /**
   * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
   * @return Whether the negative field is set.
   */
  @java.lang.Override
  public boolean hasNegative() {
    return exprTypeCase_ == 13;
  }
  /**
   * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
   * @return The negative.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.NegativeNode getNegative() {
    if (exprTypeCase_ == 13) {
       return (ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.NegativeNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.NegativeNodeOrBuilder getNegativeOrBuilder() {
    if (exprTypeCase_ == 13) {
       return (ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.NegativeNode.getDefaultInstance();
  }

  public static final int IN_LIST_FIELD_NUMBER = 14;
  /**
   * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
   * @return Whether the inList field is set.
   */
  @java.lang.Override
  public boolean hasInList() {
    return exprTypeCase_ == 14;
  }
  /**
   * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
   * @return The inList.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.InListNode getInList() {
    if (exprTypeCase_ == 14) {
       return (ai.chalk.protos.chalk.expression.v1.InListNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.InListNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.InListNodeOrBuilder getInListOrBuilder() {
    if (exprTypeCase_ == 14) {
       return (ai.chalk.protos.chalk.expression.v1.InListNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.InListNode.getDefaultInstance();
  }

  public static final int WILDCARD_FIELD_NUMBER = 15;
  /**
   * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
   * @return Whether the wildcard field is set.
   */
  @java.lang.Override
  public boolean hasWildcard() {
    return exprTypeCase_ == 15;
  }
  /**
   * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
   * @return The wildcard.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.Wildcard getWildcard() {
    if (exprTypeCase_ == 15) {
       return (ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.Wildcard.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.WildcardOrBuilder getWildcardOrBuilder() {
    if (exprTypeCase_ == 15) {
       return (ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.Wildcard.getDefaultInstance();
  }

  public static final int SCALAR_FUNCTION_FIELD_NUMBER = 16;
  /**
   * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
   * @return Whether the scalarFunction field is set.
   */
  @java.lang.Override
  public boolean hasScalarFunction() {
    return exprTypeCase_ == 16;
  }
  /**
   * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
   * @return The scalarFunction.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode getScalarFunction() {
    if (exprTypeCase_ == 16) {
       return (ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.ScalarFunctionNodeOrBuilder getScalarFunctionOrBuilder() {
    if (exprTypeCase_ == 16) {
       return (ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.getDefaultInstance();
  }

  public static final int TRY_CAST_FIELD_NUMBER = 17;
  /**
   * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
   * @return Whether the tryCast field is set.
   */
  @java.lang.Override
  public boolean hasTryCast() {
    return exprTypeCase_ == 17;
  }
  /**
   * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
   * @return The tryCast.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.TryCastNode getTryCast() {
    if (exprTypeCase_ == 17) {
       return (ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.TryCastNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.TryCastNodeOrBuilder getTryCastOrBuilder() {
    if (exprTypeCase_ == 17) {
       return (ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.TryCastNode.getDefaultInstance();
  }

  public static final int WINDOW_EXPR_FIELD_NUMBER = 18;
  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
   * @return Whether the windowExpr field is set.
   */
  @java.lang.Override
  public boolean hasWindowExpr() {
    return exprTypeCase_ == 18;
  }
  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
   * @return The windowExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.WindowExprNode getWindowExpr() {
    if (exprTypeCase_ == 18) {
       return (ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.WindowExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.WindowExprNodeOrBuilder getWindowExprOrBuilder() {
    if (exprTypeCase_ == 18) {
       return (ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.WindowExprNode.getDefaultInstance();
  }

  public static final int AGGREGATE_UDF_EXPR_FIELD_NUMBER = 19;
  /**
   * <pre>
   * AggregateUDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
   * @return Whether the aggregateUdfExpr field is set.
   */
  @java.lang.Override
  public boolean hasAggregateUdfExpr() {
    return exprTypeCase_ == 19;
  }
  /**
   * <pre>
   * AggregateUDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
   * @return The aggregateUdfExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode getAggregateUdfExpr() {
    if (exprTypeCase_ == 19) {
       return (ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * AggregateUDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNodeOrBuilder getAggregateUdfExprOrBuilder() {
    if (exprTypeCase_ == 19) {
       return (ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.getDefaultInstance();
  }

  public static final int SCALAR_UDF_EXPR_FIELD_NUMBER = 20;
  /**
   * <pre>
   * Scalar UDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
   * @return Whether the scalarUdfExpr field is set.
   */
  @java.lang.Override
  public boolean hasScalarUdfExpr() {
    return exprTypeCase_ == 20;
  }
  /**
   * <pre>
   * Scalar UDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
   * @return The scalarUdfExpr.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode getScalarUdfExpr() {
    if (exprTypeCase_ == 20) {
       return (ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.getDefaultInstance();
  }
  /**
   * <pre>
   * Scalar UDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNodeOrBuilder getScalarUdfExprOrBuilder() {
    if (exprTypeCase_ == 20) {
       return (ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.getDefaultInstance();
  }

  public static final int GET_INDEXED_FIELD_FIELD_NUMBER = 21;
  /**
   * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
   * @return Whether the getIndexedField field is set.
   */
  @java.lang.Override
  public boolean hasGetIndexedField() {
    return exprTypeCase_ == 21;
  }
  /**
   * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
   * @return The getIndexedField.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.GetIndexedField getGetIndexedField() {
    if (exprTypeCase_ == 21) {
       return (ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.GetIndexedField.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.GetIndexedFieldOrBuilder getGetIndexedFieldOrBuilder() {
    if (exprTypeCase_ == 21) {
       return (ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.GetIndexedField.getDefaultInstance();
  }

  public static final int GROUPING_SET_FIELD_NUMBER = 22;
  /**
   * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
   * @return Whether the groupingSet field is set.
   */
  @java.lang.Override
  public boolean hasGroupingSet() {
    return exprTypeCase_ == 22;
  }
  /**
   * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
   * @return The groupingSet.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.GroupingSetNode getGroupingSet() {
    if (exprTypeCase_ == 22) {
       return (ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.GroupingSetNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.GroupingSetNodeOrBuilder getGroupingSetOrBuilder() {
    if (exprTypeCase_ == 22) {
       return (ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.GroupingSetNode.getDefaultInstance();
  }

  public static final int CUBE_FIELD_NUMBER = 23;
  /**
   * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
   * @return Whether the cube field is set.
   */
  @java.lang.Override
  public boolean hasCube() {
    return exprTypeCase_ == 23;
  }
  /**
   * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
   * @return The cube.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.CubeNode getCube() {
    if (exprTypeCase_ == 23) {
       return (ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.CubeNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.CubeNodeOrBuilder getCubeOrBuilder() {
    if (exprTypeCase_ == 23) {
       return (ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.CubeNode.getDefaultInstance();
  }

  public static final int ROLLUP_FIELD_NUMBER = 24;
  /**
   * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
   * @return Whether the rollup field is set.
   */
  @java.lang.Override
  public boolean hasRollup() {
    return exprTypeCase_ == 24;
  }
  /**
   * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
   * @return The rollup.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.RollupNode getRollup() {
    if (exprTypeCase_ == 24) {
       return (ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.RollupNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.RollupNodeOrBuilder getRollupOrBuilder() {
    if (exprTypeCase_ == 24) {
       return (ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.RollupNode.getDefaultInstance();
  }

  public static final int IS_TRUE_FIELD_NUMBER = 25;
  /**
   * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
   * @return Whether the isTrue field is set.
   */
  @java.lang.Override
  public boolean hasIsTrue() {
    return exprTypeCase_ == 25;
  }
  /**
   * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
   * @return The isTrue.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsTrue getIsTrue() {
    if (exprTypeCase_ == 25) {
       return (ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsTrue.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsTrueOrBuilder getIsTrueOrBuilder() {
    if (exprTypeCase_ == 25) {
       return (ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsTrue.getDefaultInstance();
  }

  public static final int IS_FALSE_FIELD_NUMBER = 26;
  /**
   * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
   * @return Whether the isFalse field is set.
   */
  @java.lang.Override
  public boolean hasIsFalse() {
    return exprTypeCase_ == 26;
  }
  /**
   * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
   * @return The isFalse.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsFalse getIsFalse() {
    if (exprTypeCase_ == 26) {
       return (ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsFalse.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsFalseOrBuilder getIsFalseOrBuilder() {
    if (exprTypeCase_ == 26) {
       return (ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsFalse.getDefaultInstance();
  }

  public static final int IS_UNKNOWN_FIELD_NUMBER = 27;
  /**
   * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
   * @return Whether the isUnknown field is set.
   */
  @java.lang.Override
  public boolean hasIsUnknown() {
    return exprTypeCase_ == 27;
  }
  /**
   * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
   * @return The isUnknown.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsUnknown getIsUnknown() {
    if (exprTypeCase_ == 27) {
       return (ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsUnknown.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsUnknownOrBuilder getIsUnknownOrBuilder() {
    if (exprTypeCase_ == 27) {
       return (ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsUnknown.getDefaultInstance();
  }

  public static final int IS_NOT_TRUE_FIELD_NUMBER = 28;
  /**
   * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
   * @return Whether the isNotTrue field is set.
   */
  @java.lang.Override
  public boolean hasIsNotTrue() {
    return exprTypeCase_ == 28;
  }
  /**
   * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
   * @return The isNotTrue.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotTrue getIsNotTrue() {
    if (exprTypeCase_ == 28) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotTrue.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotTrueOrBuilder getIsNotTrueOrBuilder() {
    if (exprTypeCase_ == 28) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotTrue.getDefaultInstance();
  }

  public static final int IS_NOT_FALSE_FIELD_NUMBER = 29;
  /**
   * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
   * @return Whether the isNotFalse field is set.
   */
  @java.lang.Override
  public boolean hasIsNotFalse() {
    return exprTypeCase_ == 29;
  }
  /**
   * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
   * @return The isNotFalse.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotFalse getIsNotFalse() {
    if (exprTypeCase_ == 29) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotFalse.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotFalseOrBuilder getIsNotFalseOrBuilder() {
    if (exprTypeCase_ == 29) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotFalse.getDefaultInstance();
  }

  public static final int IS_NOT_UNKNOWN_FIELD_NUMBER = 30;
  /**
   * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
   * @return Whether the isNotUnknown field is set.
   */
  @java.lang.Override
  public boolean hasIsNotUnknown() {
    return exprTypeCase_ == 30;
  }
  /**
   * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
   * @return The isNotUnknown.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotUnknown getIsNotUnknown() {
    if (exprTypeCase_ == 30) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotUnknown.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.IsNotUnknownOrBuilder getIsNotUnknownOrBuilder() {
    if (exprTypeCase_ == 30) {
       return (ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.IsNotUnknown.getDefaultInstance();
  }

  public static final int LIKE_FIELD_NUMBER = 31;
  /**
   * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
   * @return Whether the like field is set.
   */
  @java.lang.Override
  public boolean hasLike() {
    return exprTypeCase_ == 31;
  }
  /**
   * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
   * @return The like.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.LikeNode getLike() {
    if (exprTypeCase_ == 31) {
       return (ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.LikeNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.LikeNodeOrBuilder getLikeOrBuilder() {
    if (exprTypeCase_ == 31) {
       return (ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.LikeNode.getDefaultInstance();
  }

  public static final int ILIKE_FIELD_NUMBER = 32;
  /**
   * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
   * @return Whether the ilike field is set.
   */
  @java.lang.Override
  public boolean hasIlike() {
    return exprTypeCase_ == 32;
  }
  /**
   * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
   * @return The ilike.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.ILikeNode getIlike() {
    if (exprTypeCase_ == 32) {
       return (ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.ILikeNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.ILikeNodeOrBuilder getIlikeOrBuilder() {
    if (exprTypeCase_ == 32) {
       return (ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.ILikeNode.getDefaultInstance();
  }

  public static final int SIMILAR_TO_FIELD_NUMBER = 33;
  /**
   * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
   * @return Whether the similarTo field is set.
   */
  @java.lang.Override
  public boolean hasSimilarTo() {
    return exprTypeCase_ == 33;
  }
  /**
   * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
   * @return The similarTo.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.SimilarToNode getSimilarTo() {
    if (exprTypeCase_ == 33) {
       return (ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.SimilarToNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.SimilarToNodeOrBuilder getSimilarToOrBuilder() {
    if (exprTypeCase_ == 33) {
       return (ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.SimilarToNode.getDefaultInstance();
  }

  public static final int PLACEHOLDER_FIELD_NUMBER = 34;
  /**
   * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
   * @return Whether the placeholder field is set.
   */
  @java.lang.Override
  public boolean hasPlaceholder() {
    return exprTypeCase_ == 34;
  }
  /**
   * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
   * @return The placeholder.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.PlaceholderNode getPlaceholder() {
    if (exprTypeCase_ == 34) {
       return (ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.PlaceholderNode.getDefaultInstance();
  }
  /**
   * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.PlaceholderNodeOrBuilder getPlaceholderOrBuilder() {
    if (exprTypeCase_ == 34) {
       return (ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_;
    }
    return ai.chalk.protos.chalk.expression.v1.PlaceholderNode.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (exprTypeCase_ == 1) {
      output.writeMessage(1, (ai.chalk.protos.chalk.expression.v1.Column) exprType_);
    }
    if (exprTypeCase_ == 2) {
      output.writeMessage(2, (ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_);
    }
    if (exprTypeCase_ == 3) {
      output.writeMessage(3, (ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_);
    }
    if (exprTypeCase_ == 4) {
      output.writeMessage(4, (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_);
    }
    if (exprTypeCase_ == 5) {
      output.writeMessage(5, (ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_);
    }
    if (exprTypeCase_ == 6) {
      output.writeMessage(6, (ai.chalk.protos.chalk.expression.v1.IsNull) exprType_);
    }
    if (exprTypeCase_ == 7) {
      output.writeMessage(7, (ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_);
    }
    if (exprTypeCase_ == 8) {
      output.writeMessage(8, (ai.chalk.protos.chalk.expression.v1.Not) exprType_);
    }
    if (exprTypeCase_ == 9) {
      output.writeMessage(9, (ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_);
    }
    if (exprTypeCase_ == 10) {
      output.writeMessage(10, (ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_);
    }
    if (exprTypeCase_ == 11) {
      output.writeMessage(11, (ai.chalk.protos.chalk.expression.v1.CastNode) exprType_);
    }
    if (exprTypeCase_ == 12) {
      output.writeMessage(12, (ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_);
    }
    if (exprTypeCase_ == 13) {
      output.writeMessage(13, (ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_);
    }
    if (exprTypeCase_ == 14) {
      output.writeMessage(14, (ai.chalk.protos.chalk.expression.v1.InListNode) exprType_);
    }
    if (exprTypeCase_ == 15) {
      output.writeMessage(15, (ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_);
    }
    if (exprTypeCase_ == 16) {
      output.writeMessage(16, (ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_);
    }
    if (exprTypeCase_ == 17) {
      output.writeMessage(17, (ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_);
    }
    if (exprTypeCase_ == 18) {
      output.writeMessage(18, (ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_);
    }
    if (exprTypeCase_ == 19) {
      output.writeMessage(19, (ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_);
    }
    if (exprTypeCase_ == 20) {
      output.writeMessage(20, (ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_);
    }
    if (exprTypeCase_ == 21) {
      output.writeMessage(21, (ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_);
    }
    if (exprTypeCase_ == 22) {
      output.writeMessage(22, (ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_);
    }
    if (exprTypeCase_ == 23) {
      output.writeMessage(23, (ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_);
    }
    if (exprTypeCase_ == 24) {
      output.writeMessage(24, (ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_);
    }
    if (exprTypeCase_ == 25) {
      output.writeMessage(25, (ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_);
    }
    if (exprTypeCase_ == 26) {
      output.writeMessage(26, (ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_);
    }
    if (exprTypeCase_ == 27) {
      output.writeMessage(27, (ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_);
    }
    if (exprTypeCase_ == 28) {
      output.writeMessage(28, (ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_);
    }
    if (exprTypeCase_ == 29) {
      output.writeMessage(29, (ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_);
    }
    if (exprTypeCase_ == 30) {
      output.writeMessage(30, (ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_);
    }
    if (exprTypeCase_ == 31) {
      output.writeMessage(31, (ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_);
    }
    if (exprTypeCase_ == 32) {
      output.writeMessage(32, (ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_);
    }
    if (exprTypeCase_ == 33) {
      output.writeMessage(33, (ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_);
    }
    if (exprTypeCase_ == 34) {
      output.writeMessage(34, (ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (exprTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (ai.chalk.protos.chalk.expression.v1.Column) exprType_);
    }
    if (exprTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_);
    }
    if (exprTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_);
    }
    if (exprTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_);
    }
    if (exprTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_);
    }
    if (exprTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (ai.chalk.protos.chalk.expression.v1.IsNull) exprType_);
    }
    if (exprTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_);
    }
    if (exprTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (ai.chalk.protos.chalk.expression.v1.Not) exprType_);
    }
    if (exprTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_);
    }
    if (exprTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_);
    }
    if (exprTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (ai.chalk.protos.chalk.expression.v1.CastNode) exprType_);
    }
    if (exprTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_);
    }
    if (exprTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_);
    }
    if (exprTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (ai.chalk.protos.chalk.expression.v1.InListNode) exprType_);
    }
    if (exprTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_);
    }
    if (exprTypeCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_);
    }
    if (exprTypeCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_);
    }
    if (exprTypeCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_);
    }
    if (exprTypeCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_);
    }
    if (exprTypeCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_);
    }
    if (exprTypeCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_);
    }
    if (exprTypeCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_);
    }
    if (exprTypeCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_);
    }
    if (exprTypeCase_ == 24) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, (ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_);
    }
    if (exprTypeCase_ == 25) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, (ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_);
    }
    if (exprTypeCase_ == 26) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, (ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_);
    }
    if (exprTypeCase_ == 27) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(27, (ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_);
    }
    if (exprTypeCase_ == 28) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(28, (ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_);
    }
    if (exprTypeCase_ == 29) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(29, (ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_);
    }
    if (exprTypeCase_ == 30) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(30, (ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_);
    }
    if (exprTypeCase_ == 31) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(31, (ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_);
    }
    if (exprTypeCase_ == 32) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(32, (ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_);
    }
    if (exprTypeCase_ == 33) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(33, (ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_);
    }
    if (exprTypeCase_ == 34) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(34, (ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.chalk.protos.chalk.expression.v1.LogicalExprNode)) {
      return super.equals(obj);
    }
    ai.chalk.protos.chalk.expression.v1.LogicalExprNode other = (ai.chalk.protos.chalk.expression.v1.LogicalExprNode) obj;

    if (!getExprTypeCase().equals(other.getExprTypeCase())) return false;
    switch (exprTypeCase_) {
      case 1:
        if (!getColumn()
            .equals(other.getColumn())) return false;
        break;
      case 2:
        if (!getAlias()
            .equals(other.getAlias())) return false;
        break;
      case 3:
        if (!getLiteral()
            .equals(other.getLiteral())) return false;
        break;
      case 4:
        if (!getBinaryExpr()
            .equals(other.getBinaryExpr())) return false;
        break;
      case 5:
        if (!getAggregateExpr()
            .equals(other.getAggregateExpr())) return false;
        break;
      case 6:
        if (!getIsNullExpr()
            .equals(other.getIsNullExpr())) return false;
        break;
      case 7:
        if (!getIsNotNullExpr()
            .equals(other.getIsNotNullExpr())) return false;
        break;
      case 8:
        if (!getNotExpr()
            .equals(other.getNotExpr())) return false;
        break;
      case 9:
        if (!getBetween()
            .equals(other.getBetween())) return false;
        break;
      case 10:
        if (!getCase()
            .equals(other.getCase())) return false;
        break;
      case 11:
        if (!getCast()
            .equals(other.getCast())) return false;
        break;
      case 12:
        if (!getSort()
            .equals(other.getSort())) return false;
        break;
      case 13:
        if (!getNegative()
            .equals(other.getNegative())) return false;
        break;
      case 14:
        if (!getInList()
            .equals(other.getInList())) return false;
        break;
      case 15:
        if (!getWildcard()
            .equals(other.getWildcard())) return false;
        break;
      case 16:
        if (!getScalarFunction()
            .equals(other.getScalarFunction())) return false;
        break;
      case 17:
        if (!getTryCast()
            .equals(other.getTryCast())) return false;
        break;
      case 18:
        if (!getWindowExpr()
            .equals(other.getWindowExpr())) return false;
        break;
      case 19:
        if (!getAggregateUdfExpr()
            .equals(other.getAggregateUdfExpr())) return false;
        break;
      case 20:
        if (!getScalarUdfExpr()
            .equals(other.getScalarUdfExpr())) return false;
        break;
      case 21:
        if (!getGetIndexedField()
            .equals(other.getGetIndexedField())) return false;
        break;
      case 22:
        if (!getGroupingSet()
            .equals(other.getGroupingSet())) return false;
        break;
      case 23:
        if (!getCube()
            .equals(other.getCube())) return false;
        break;
      case 24:
        if (!getRollup()
            .equals(other.getRollup())) return false;
        break;
      case 25:
        if (!getIsTrue()
            .equals(other.getIsTrue())) return false;
        break;
      case 26:
        if (!getIsFalse()
            .equals(other.getIsFalse())) return false;
        break;
      case 27:
        if (!getIsUnknown()
            .equals(other.getIsUnknown())) return false;
        break;
      case 28:
        if (!getIsNotTrue()
            .equals(other.getIsNotTrue())) return false;
        break;
      case 29:
        if (!getIsNotFalse()
            .equals(other.getIsNotFalse())) return false;
        break;
      case 30:
        if (!getIsNotUnknown()
            .equals(other.getIsNotUnknown())) return false;
        break;
      case 31:
        if (!getLike()
            .equals(other.getLike())) return false;
        break;
      case 32:
        if (!getIlike()
            .equals(other.getIlike())) return false;
        break;
      case 33:
        if (!getSimilarTo()
            .equals(other.getSimilarTo())) return false;
        break;
      case 34:
        if (!getPlaceholder()
            .equals(other.getPlaceholder())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (exprTypeCase_) {
      case 1:
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumn().hashCode();
        break;
      case 2:
        hash = (37 * hash) + ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getAlias().hashCode();
        break;
      case 3:
        hash = (37 * hash) + LITERAL_FIELD_NUMBER;
        hash = (53 * hash) + getLiteral().hashCode();
        break;
      case 4:
        hash = (37 * hash) + BINARY_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getBinaryExpr().hashCode();
        break;
      case 5:
        hash = (37 * hash) + AGGREGATE_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getAggregateExpr().hashCode();
        break;
      case 6:
        hash = (37 * hash) + IS_NULL_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getIsNullExpr().hashCode();
        break;
      case 7:
        hash = (37 * hash) + IS_NOT_NULL_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getIsNotNullExpr().hashCode();
        break;
      case 8:
        hash = (37 * hash) + NOT_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getNotExpr().hashCode();
        break;
      case 9:
        hash = (37 * hash) + BETWEEN_FIELD_NUMBER;
        hash = (53 * hash) + getBetween().hashCode();
        break;
      case 10:
        hash = (37 * hash) + CASE_FIELD_NUMBER;
        hash = (53 * hash) + getCase().hashCode();
        break;
      case 11:
        hash = (37 * hash) + CAST_FIELD_NUMBER;
        hash = (53 * hash) + getCast().hashCode();
        break;
      case 12:
        hash = (37 * hash) + SORT_FIELD_NUMBER;
        hash = (53 * hash) + getSort().hashCode();
        break;
      case 13:
        hash = (37 * hash) + NEGATIVE_FIELD_NUMBER;
        hash = (53 * hash) + getNegative().hashCode();
        break;
      case 14:
        hash = (37 * hash) + IN_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getInList().hashCode();
        break;
      case 15:
        hash = (37 * hash) + WILDCARD_FIELD_NUMBER;
        hash = (53 * hash) + getWildcard().hashCode();
        break;
      case 16:
        hash = (37 * hash) + SCALAR_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getScalarFunction().hashCode();
        break;
      case 17:
        hash = (37 * hash) + TRY_CAST_FIELD_NUMBER;
        hash = (53 * hash) + getTryCast().hashCode();
        break;
      case 18:
        hash = (37 * hash) + WINDOW_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getWindowExpr().hashCode();
        break;
      case 19:
        hash = (37 * hash) + AGGREGATE_UDF_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getAggregateUdfExpr().hashCode();
        break;
      case 20:
        hash = (37 * hash) + SCALAR_UDF_EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getScalarUdfExpr().hashCode();
        break;
      case 21:
        hash = (37 * hash) + GET_INDEXED_FIELD_FIELD_NUMBER;
        hash = (53 * hash) + getGetIndexedField().hashCode();
        break;
      case 22:
        hash = (37 * hash) + GROUPING_SET_FIELD_NUMBER;
        hash = (53 * hash) + getGroupingSet().hashCode();
        break;
      case 23:
        hash = (37 * hash) + CUBE_FIELD_NUMBER;
        hash = (53 * hash) + getCube().hashCode();
        break;
      case 24:
        hash = (37 * hash) + ROLLUP_FIELD_NUMBER;
        hash = (53 * hash) + getRollup().hashCode();
        break;
      case 25:
        hash = (37 * hash) + IS_TRUE_FIELD_NUMBER;
        hash = (53 * hash) + getIsTrue().hashCode();
        break;
      case 26:
        hash = (37 * hash) + IS_FALSE_FIELD_NUMBER;
        hash = (53 * hash) + getIsFalse().hashCode();
        break;
      case 27:
        hash = (37 * hash) + IS_UNKNOWN_FIELD_NUMBER;
        hash = (53 * hash) + getIsUnknown().hashCode();
        break;
      case 28:
        hash = (37 * hash) + IS_NOT_TRUE_FIELD_NUMBER;
        hash = (53 * hash) + getIsNotTrue().hashCode();
        break;
      case 29:
        hash = (37 * hash) + IS_NOT_FALSE_FIELD_NUMBER;
        hash = (53 * hash) + getIsNotFalse().hashCode();
        break;
      case 30:
        hash = (37 * hash) + IS_NOT_UNKNOWN_FIELD_NUMBER;
        hash = (53 * hash) + getIsNotUnknown().hashCode();
        break;
      case 31:
        hash = (37 * hash) + LIKE_FIELD_NUMBER;
        hash = (53 * hash) + getLike().hashCode();
        break;
      case 32:
        hash = (37 * hash) + ILIKE_FIELD_NUMBER;
        hash = (53 * hash) + getIlike().hashCode();
        break;
      case 33:
        hash = (37 * hash) + SIMILAR_TO_FIELD_NUMBER;
        hash = (53 * hash) + getSimilarTo().hashCode();
        break;
      case 34:
        hash = (37 * hash) + PLACEHOLDER_FIELD_NUMBER;
        hash = (53 * hash) + getPlaceholder().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.chalk.protos.chalk.expression.v1.LogicalExprNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code chalk.expression.v1.LogicalExprNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:chalk.expression.v1.LogicalExprNode)
      ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_LogicalExprNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_LogicalExprNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.chalk.protos.chalk.expression.v1.LogicalExprNode.class, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder.class);
    }

    // Construct using ai.chalk.protos.chalk.expression.v1.LogicalExprNode.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      bitField1_ = 0;
      if (columnBuilder_ != null) {
        columnBuilder_.clear();
      }
      if (aliasBuilder_ != null) {
        aliasBuilder_.clear();
      }
      if (literalBuilder_ != null) {
        literalBuilder_.clear();
      }
      if (binaryExprBuilder_ != null) {
        binaryExprBuilder_.clear();
      }
      if (aggregateExprBuilder_ != null) {
        aggregateExprBuilder_.clear();
      }
      if (isNullExprBuilder_ != null) {
        isNullExprBuilder_.clear();
      }
      if (isNotNullExprBuilder_ != null) {
        isNotNullExprBuilder_.clear();
      }
      if (notExprBuilder_ != null) {
        notExprBuilder_.clear();
      }
      if (betweenBuilder_ != null) {
        betweenBuilder_.clear();
      }
      if (caseBuilder_ != null) {
        caseBuilder_.clear();
      }
      if (castBuilder_ != null) {
        castBuilder_.clear();
      }
      if (sortBuilder_ != null) {
        sortBuilder_.clear();
      }
      if (negativeBuilder_ != null) {
        negativeBuilder_.clear();
      }
      if (inListBuilder_ != null) {
        inListBuilder_.clear();
      }
      if (wildcardBuilder_ != null) {
        wildcardBuilder_.clear();
      }
      if (scalarFunctionBuilder_ != null) {
        scalarFunctionBuilder_.clear();
      }
      if (tryCastBuilder_ != null) {
        tryCastBuilder_.clear();
      }
      if (windowExprBuilder_ != null) {
        windowExprBuilder_.clear();
      }
      if (aggregateUdfExprBuilder_ != null) {
        aggregateUdfExprBuilder_.clear();
      }
      if (scalarUdfExprBuilder_ != null) {
        scalarUdfExprBuilder_.clear();
      }
      if (getIndexedFieldBuilder_ != null) {
        getIndexedFieldBuilder_.clear();
      }
      if (groupingSetBuilder_ != null) {
        groupingSetBuilder_.clear();
      }
      if (cubeBuilder_ != null) {
        cubeBuilder_.clear();
      }
      if (rollupBuilder_ != null) {
        rollupBuilder_.clear();
      }
      if (isTrueBuilder_ != null) {
        isTrueBuilder_.clear();
      }
      if (isFalseBuilder_ != null) {
        isFalseBuilder_.clear();
      }
      if (isUnknownBuilder_ != null) {
        isUnknownBuilder_.clear();
      }
      if (isNotTrueBuilder_ != null) {
        isNotTrueBuilder_.clear();
      }
      if (isNotFalseBuilder_ != null) {
        isNotFalseBuilder_.clear();
      }
      if (isNotUnknownBuilder_ != null) {
        isNotUnknownBuilder_.clear();
      }
      if (likeBuilder_ != null) {
        likeBuilder_.clear();
      }
      if (ilikeBuilder_ != null) {
        ilikeBuilder_.clear();
      }
      if (similarToBuilder_ != null) {
        similarToBuilder_.clear();
      }
      if (placeholderBuilder_ != null) {
        placeholderBuilder_.clear();
      }
      exprTypeCase_ = 0;
      exprType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_LogicalExprNode_descriptor;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNode getDefaultInstanceForType() {
      return ai.chalk.protos.chalk.expression.v1.LogicalExprNode.getDefaultInstance();
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNode build() {
      ai.chalk.protos.chalk.expression.v1.LogicalExprNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNode buildPartial() {
      ai.chalk.protos.chalk.expression.v1.LogicalExprNode result = new ai.chalk.protos.chalk.expression.v1.LogicalExprNode(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      if (bitField1_ != 0) { buildPartial1(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(ai.chalk.protos.chalk.expression.v1.LogicalExprNode result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartial1(ai.chalk.protos.chalk.expression.v1.LogicalExprNode result) {
      int from_bitField1_ = bitField1_;
    }

    private void buildPartialOneofs(ai.chalk.protos.chalk.expression.v1.LogicalExprNode result) {
      result.exprTypeCase_ = exprTypeCase_;
      result.exprType_ = this.exprType_;
      if (exprTypeCase_ == 1 &&
          columnBuilder_ != null) {
        result.exprType_ = columnBuilder_.build();
      }
      if (exprTypeCase_ == 2 &&
          aliasBuilder_ != null) {
        result.exprType_ = aliasBuilder_.build();
      }
      if (exprTypeCase_ == 3 &&
          literalBuilder_ != null) {
        result.exprType_ = literalBuilder_.build();
      }
      if (exprTypeCase_ == 4 &&
          binaryExprBuilder_ != null) {
        result.exprType_ = binaryExprBuilder_.build();
      }
      if (exprTypeCase_ == 5 &&
          aggregateExprBuilder_ != null) {
        result.exprType_ = aggregateExprBuilder_.build();
      }
      if (exprTypeCase_ == 6 &&
          isNullExprBuilder_ != null) {
        result.exprType_ = isNullExprBuilder_.build();
      }
      if (exprTypeCase_ == 7 &&
          isNotNullExprBuilder_ != null) {
        result.exprType_ = isNotNullExprBuilder_.build();
      }
      if (exprTypeCase_ == 8 &&
          notExprBuilder_ != null) {
        result.exprType_ = notExprBuilder_.build();
      }
      if (exprTypeCase_ == 9 &&
          betweenBuilder_ != null) {
        result.exprType_ = betweenBuilder_.build();
      }
      if (exprTypeCase_ == 10 &&
          caseBuilder_ != null) {
        result.exprType_ = caseBuilder_.build();
      }
      if (exprTypeCase_ == 11 &&
          castBuilder_ != null) {
        result.exprType_ = castBuilder_.build();
      }
      if (exprTypeCase_ == 12 &&
          sortBuilder_ != null) {
        result.exprType_ = sortBuilder_.build();
      }
      if (exprTypeCase_ == 13 &&
          negativeBuilder_ != null) {
        result.exprType_ = negativeBuilder_.build();
      }
      if (exprTypeCase_ == 14 &&
          inListBuilder_ != null) {
        result.exprType_ = inListBuilder_.build();
      }
      if (exprTypeCase_ == 15 &&
          wildcardBuilder_ != null) {
        result.exprType_ = wildcardBuilder_.build();
      }
      if (exprTypeCase_ == 16 &&
          scalarFunctionBuilder_ != null) {
        result.exprType_ = scalarFunctionBuilder_.build();
      }
      if (exprTypeCase_ == 17 &&
          tryCastBuilder_ != null) {
        result.exprType_ = tryCastBuilder_.build();
      }
      if (exprTypeCase_ == 18 &&
          windowExprBuilder_ != null) {
        result.exprType_ = windowExprBuilder_.build();
      }
      if (exprTypeCase_ == 19 &&
          aggregateUdfExprBuilder_ != null) {
        result.exprType_ = aggregateUdfExprBuilder_.build();
      }
      if (exprTypeCase_ == 20 &&
          scalarUdfExprBuilder_ != null) {
        result.exprType_ = scalarUdfExprBuilder_.build();
      }
      if (exprTypeCase_ == 21 &&
          getIndexedFieldBuilder_ != null) {
        result.exprType_ = getIndexedFieldBuilder_.build();
      }
      if (exprTypeCase_ == 22 &&
          groupingSetBuilder_ != null) {
        result.exprType_ = groupingSetBuilder_.build();
      }
      if (exprTypeCase_ == 23 &&
          cubeBuilder_ != null) {
        result.exprType_ = cubeBuilder_.build();
      }
      if (exprTypeCase_ == 24 &&
          rollupBuilder_ != null) {
        result.exprType_ = rollupBuilder_.build();
      }
      if (exprTypeCase_ == 25 &&
          isTrueBuilder_ != null) {
        result.exprType_ = isTrueBuilder_.build();
      }
      if (exprTypeCase_ == 26 &&
          isFalseBuilder_ != null) {
        result.exprType_ = isFalseBuilder_.build();
      }
      if (exprTypeCase_ == 27 &&
          isUnknownBuilder_ != null) {
        result.exprType_ = isUnknownBuilder_.build();
      }
      if (exprTypeCase_ == 28 &&
          isNotTrueBuilder_ != null) {
        result.exprType_ = isNotTrueBuilder_.build();
      }
      if (exprTypeCase_ == 29 &&
          isNotFalseBuilder_ != null) {
        result.exprType_ = isNotFalseBuilder_.build();
      }
      if (exprTypeCase_ == 30 &&
          isNotUnknownBuilder_ != null) {
        result.exprType_ = isNotUnknownBuilder_.build();
      }
      if (exprTypeCase_ == 31 &&
          likeBuilder_ != null) {
        result.exprType_ = likeBuilder_.build();
      }
      if (exprTypeCase_ == 32 &&
          ilikeBuilder_ != null) {
        result.exprType_ = ilikeBuilder_.build();
      }
      if (exprTypeCase_ == 33 &&
          similarToBuilder_ != null) {
        result.exprType_ = similarToBuilder_.build();
      }
      if (exprTypeCase_ == 34 &&
          placeholderBuilder_ != null) {
        result.exprType_ = placeholderBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.chalk.protos.chalk.expression.v1.LogicalExprNode) {
        return mergeFrom((ai.chalk.protos.chalk.expression.v1.LogicalExprNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.chalk.protos.chalk.expression.v1.LogicalExprNode other) {
      if (other == ai.chalk.protos.chalk.expression.v1.LogicalExprNode.getDefaultInstance()) return this;
      switch (other.getExprTypeCase()) {
        case COLUMN: {
          mergeColumn(other.getColumn());
          break;
        }
        case ALIAS: {
          mergeAlias(other.getAlias());
          break;
        }
        case LITERAL: {
          mergeLiteral(other.getLiteral());
          break;
        }
        case BINARY_EXPR: {
          mergeBinaryExpr(other.getBinaryExpr());
          break;
        }
        case AGGREGATE_EXPR: {
          mergeAggregateExpr(other.getAggregateExpr());
          break;
        }
        case IS_NULL_EXPR: {
          mergeIsNullExpr(other.getIsNullExpr());
          break;
        }
        case IS_NOT_NULL_EXPR: {
          mergeIsNotNullExpr(other.getIsNotNullExpr());
          break;
        }
        case NOT_EXPR: {
          mergeNotExpr(other.getNotExpr());
          break;
        }
        case BETWEEN: {
          mergeBetween(other.getBetween());
          break;
        }
        case CASE: {
          mergeCase(other.getCase());
          break;
        }
        case CAST: {
          mergeCast(other.getCast());
          break;
        }
        case SORT: {
          mergeSort(other.getSort());
          break;
        }
        case NEGATIVE: {
          mergeNegative(other.getNegative());
          break;
        }
        case IN_LIST: {
          mergeInList(other.getInList());
          break;
        }
        case WILDCARD: {
          mergeWildcard(other.getWildcard());
          break;
        }
        case SCALAR_FUNCTION: {
          mergeScalarFunction(other.getScalarFunction());
          break;
        }
        case TRY_CAST: {
          mergeTryCast(other.getTryCast());
          break;
        }
        case WINDOW_EXPR: {
          mergeWindowExpr(other.getWindowExpr());
          break;
        }
        case AGGREGATE_UDF_EXPR: {
          mergeAggregateUdfExpr(other.getAggregateUdfExpr());
          break;
        }
        case SCALAR_UDF_EXPR: {
          mergeScalarUdfExpr(other.getScalarUdfExpr());
          break;
        }
        case GET_INDEXED_FIELD: {
          mergeGetIndexedField(other.getGetIndexedField());
          break;
        }
        case GROUPING_SET: {
          mergeGroupingSet(other.getGroupingSet());
          break;
        }
        case CUBE: {
          mergeCube(other.getCube());
          break;
        }
        case ROLLUP: {
          mergeRollup(other.getRollup());
          break;
        }
        case IS_TRUE: {
          mergeIsTrue(other.getIsTrue());
          break;
        }
        case IS_FALSE: {
          mergeIsFalse(other.getIsFalse());
          break;
        }
        case IS_UNKNOWN: {
          mergeIsUnknown(other.getIsUnknown());
          break;
        }
        case IS_NOT_TRUE: {
          mergeIsNotTrue(other.getIsNotTrue());
          break;
        }
        case IS_NOT_FALSE: {
          mergeIsNotFalse(other.getIsNotFalse());
          break;
        }
        case IS_NOT_UNKNOWN: {
          mergeIsNotUnknown(other.getIsNotUnknown());
          break;
        }
        case LIKE: {
          mergeLike(other.getLike());
          break;
        }
        case ILIKE: {
          mergeIlike(other.getIlike());
          break;
        }
        case SIMILAR_TO: {
          mergeSimilarTo(other.getSimilarTo());
          break;
        }
        case PLACEHOLDER: {
          mergePlaceholder(other.getPlaceholder());
          break;
        }
        case EXPRTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getColumnFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getAliasFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getLiteralFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getBinaryExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getAggregateExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getIsNullExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 6;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getIsNotNullExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 7;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getNotExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 8;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getBetweenFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 9;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getCaseFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 10;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getCastFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 11;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getSortFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 12;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getNegativeFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 13;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getInListFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 14;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getWildcardFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 15;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getScalarFunctionFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 16;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getTryCastFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 17;
              break;
            } // case 138
            case 146: {
              input.readMessage(
                  getWindowExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 18;
              break;
            } // case 146
            case 154: {
              input.readMessage(
                  getAggregateUdfExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 19;
              break;
            } // case 154
            case 162: {
              input.readMessage(
                  getScalarUdfExprFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 20;
              break;
            } // case 162
            case 170: {
              input.readMessage(
                  getGetIndexedFieldFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 21;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getGroupingSetFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 22;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getCubeFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 23;
              break;
            } // case 186
            case 194: {
              input.readMessage(
                  getRollupFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 24;
              break;
            } // case 194
            case 202: {
              input.readMessage(
                  getIsTrueFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 25;
              break;
            } // case 202
            case 210: {
              input.readMessage(
                  getIsFalseFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 26;
              break;
            } // case 210
            case 218: {
              input.readMessage(
                  getIsUnknownFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 27;
              break;
            } // case 218
            case 226: {
              input.readMessage(
                  getIsNotTrueFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 28;
              break;
            } // case 226
            case 234: {
              input.readMessage(
                  getIsNotFalseFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 29;
              break;
            } // case 234
            case 242: {
              input.readMessage(
                  getIsNotUnknownFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 30;
              break;
            } // case 242
            case 250: {
              input.readMessage(
                  getLikeFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 31;
              break;
            } // case 250
            case 258: {
              input.readMessage(
                  getIlikeFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 32;
              break;
            } // case 258
            case 266: {
              input.readMessage(
                  getSimilarToFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 33;
              break;
            } // case 266
            case 274: {
              input.readMessage(
                  getPlaceholderFieldBuilder().getBuilder(),
                  extensionRegistry);
              exprTypeCase_ = 34;
              break;
            } // case 274
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int exprTypeCase_ = 0;
    private java.lang.Object exprType_;
    public ExprTypeCase
        getExprTypeCase() {
      return ExprTypeCase.forNumber(
          exprTypeCase_);
    }

    public Builder clearExprType() {
      exprTypeCase_ = 0;
      exprType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;
    private int bitField1_;

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.Column, ai.chalk.protos.chalk.expression.v1.Column.Builder, ai.chalk.protos.chalk.expression.v1.ColumnOrBuilder> columnBuilder_;
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     * @return Whether the column field is set.
     */
    @java.lang.Override
    public boolean hasColumn() {
      return exprTypeCase_ == 1;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     * @return The column.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.Column getColumn() {
      if (columnBuilder_ == null) {
        if (exprTypeCase_ == 1) {
          return (ai.chalk.protos.chalk.expression.v1.Column) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.Column.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 1) {
          return columnBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.Column.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     */
    public Builder setColumn(ai.chalk.protos.chalk.expression.v1.Column value) {
      if (columnBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        columnBuilder_.setMessage(value);
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     */
    public Builder setColumn(
        ai.chalk.protos.chalk.expression.v1.Column.Builder builderForValue) {
      if (columnBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        columnBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     */
    public Builder mergeColumn(ai.chalk.protos.chalk.expression.v1.Column value) {
      if (columnBuilder_ == null) {
        if (exprTypeCase_ == 1 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.Column.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.Column.newBuilder((ai.chalk.protos.chalk.expression.v1.Column) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 1) {
          columnBuilder_.mergeFrom(value);
        } else {
          columnBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     */
    public Builder clearColumn() {
      if (columnBuilder_ == null) {
        if (exprTypeCase_ == 1) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 1) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        columnBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.Column.Builder getColumnBuilder() {
      return getColumnFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.ColumnOrBuilder getColumnOrBuilder() {
      if ((exprTypeCase_ == 1) && (columnBuilder_ != null)) {
        return columnBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 1) {
          return (ai.chalk.protos.chalk.expression.v1.Column) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.Column.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * column references
     * </pre>
     *
     * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.Column, ai.chalk.protos.chalk.expression.v1.Column.Builder, ai.chalk.protos.chalk.expression.v1.ColumnOrBuilder> 
        getColumnFieldBuilder() {
      if (columnBuilder_ == null) {
        if (!(exprTypeCase_ == 1)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.Column.getDefaultInstance();
        }
        columnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.Column, ai.chalk.protos.chalk.expression.v1.Column.Builder, ai.chalk.protos.chalk.expression.v1.ColumnOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.Column) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 1;
      onChanged();
      return columnBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.AliasNode, ai.chalk.protos.chalk.expression.v1.AliasNode.Builder, ai.chalk.protos.chalk.expression.v1.AliasNodeOrBuilder> aliasBuilder_;
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     * @return Whether the alias field is set.
     */
    @java.lang.Override
    public boolean hasAlias() {
      return exprTypeCase_ == 2;
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     * @return The alias.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.AliasNode getAlias() {
      if (aliasBuilder_ == null) {
        if (exprTypeCase_ == 2) {
          return (ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.AliasNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 2) {
          return aliasBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.AliasNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     */
    public Builder setAlias(ai.chalk.protos.chalk.expression.v1.AliasNode value) {
      if (aliasBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        aliasBuilder_.setMessage(value);
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     */
    public Builder setAlias(
        ai.chalk.protos.chalk.expression.v1.AliasNode.Builder builderForValue) {
      if (aliasBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        aliasBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     */
    public Builder mergeAlias(ai.chalk.protos.chalk.expression.v1.AliasNode value) {
      if (aliasBuilder_ == null) {
        if (exprTypeCase_ == 2 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.AliasNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.AliasNode.newBuilder((ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 2) {
          aliasBuilder_.mergeFrom(value);
        } else {
          aliasBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     */
    public Builder clearAlias() {
      if (aliasBuilder_ == null) {
        if (exprTypeCase_ == 2) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 2) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        aliasBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.AliasNode.Builder getAliasBuilder() {
      return getAliasFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.AliasNodeOrBuilder getAliasOrBuilder() {
      if ((exprTypeCase_ == 2) && (aliasBuilder_ != null)) {
        return aliasBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 2) {
          return (ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.AliasNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * alias
     * </pre>
     *
     * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.AliasNode, ai.chalk.protos.chalk.expression.v1.AliasNode.Builder, ai.chalk.protos.chalk.expression.v1.AliasNodeOrBuilder> 
        getAliasFieldBuilder() {
      if (aliasBuilder_ == null) {
        if (!(exprTypeCase_ == 2)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.AliasNode.getDefaultInstance();
        }
        aliasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.AliasNode, ai.chalk.protos.chalk.expression.v1.AliasNode.Builder, ai.chalk.protos.chalk.expression.v1.AliasNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.AliasNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 2;
      onChanged();
      return aliasBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.arrow.v1.ScalarValue, ai.chalk.protos.chalk.arrow.v1.ScalarValue.Builder, ai.chalk.protos.chalk.arrow.v1.ScalarValueOrBuilder> literalBuilder_;
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     * @return Whether the literal field is set.
     */
    @java.lang.Override
    public boolean hasLiteral() {
      return exprTypeCase_ == 3;
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     * @return The literal.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.arrow.v1.ScalarValue getLiteral() {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 3) {
          return (ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_;
        }
        return ai.chalk.protos.chalk.arrow.v1.ScalarValue.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 3) {
          return literalBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.arrow.v1.ScalarValue.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     */
    public Builder setLiteral(ai.chalk.protos.chalk.arrow.v1.ScalarValue value) {
      if (literalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        literalBuilder_.setMessage(value);
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     */
    public Builder setLiteral(
        ai.chalk.protos.chalk.arrow.v1.ScalarValue.Builder builderForValue) {
      if (literalBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        literalBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     */
    public Builder mergeLiteral(ai.chalk.protos.chalk.arrow.v1.ScalarValue value) {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 3 &&
            exprType_ != ai.chalk.protos.chalk.arrow.v1.ScalarValue.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.arrow.v1.ScalarValue.newBuilder((ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 3) {
          literalBuilder_.mergeFrom(value);
        } else {
          literalBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     */
    public Builder clearLiteral() {
      if (literalBuilder_ == null) {
        if (exprTypeCase_ == 3) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 3) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        literalBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     */
    public ai.chalk.protos.chalk.arrow.v1.ScalarValue.Builder getLiteralBuilder() {
      return getLiteralFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.arrow.v1.ScalarValueOrBuilder getLiteralOrBuilder() {
      if ((exprTypeCase_ == 3) && (literalBuilder_ != null)) {
        return literalBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 3) {
          return (ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_;
        }
        return ai.chalk.protos.chalk.arrow.v1.ScalarValue.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.arrow.v1.ScalarValue, ai.chalk.protos.chalk.arrow.v1.ScalarValue.Builder, ai.chalk.protos.chalk.arrow.v1.ScalarValueOrBuilder> 
        getLiteralFieldBuilder() {
      if (literalBuilder_ == null) {
        if (!(exprTypeCase_ == 3)) {
          exprType_ = ai.chalk.protos.chalk.arrow.v1.ScalarValue.getDefaultInstance();
        }
        literalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.arrow.v1.ScalarValue, ai.chalk.protos.chalk.arrow.v1.ScalarValue.Builder, ai.chalk.protos.chalk.arrow.v1.ScalarValueOrBuilder>(
                (ai.chalk.protos.chalk.arrow.v1.ScalarValue) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 3;
      onChanged();
      return literalBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.BinaryExprNode, ai.chalk.protos.chalk.expression.v1.BinaryExprNode.Builder, ai.chalk.protos.chalk.expression.v1.BinaryExprNodeOrBuilder> binaryExprBuilder_;
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     * @return Whether the binaryExpr field is set.
     */
    @java.lang.Override
    public boolean hasBinaryExpr() {
      return exprTypeCase_ == 4;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     * @return The binaryExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.BinaryExprNode getBinaryExpr() {
      if (binaryExprBuilder_ == null) {
        if (exprTypeCase_ == 4) {
          return (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 4) {
          return binaryExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     */
    public Builder setBinaryExpr(ai.chalk.protos.chalk.expression.v1.BinaryExprNode value) {
      if (binaryExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        binaryExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     */
    public Builder setBinaryExpr(
        ai.chalk.protos.chalk.expression.v1.BinaryExprNode.Builder builderForValue) {
      if (binaryExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        binaryExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     */
    public Builder mergeBinaryExpr(ai.chalk.protos.chalk.expression.v1.BinaryExprNode value) {
      if (binaryExprBuilder_ == null) {
        if (exprTypeCase_ == 4 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.BinaryExprNode.newBuilder((ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 4) {
          binaryExprBuilder_.mergeFrom(value);
        } else {
          binaryExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     */
    public Builder clearBinaryExpr() {
      if (binaryExprBuilder_ == null) {
        if (exprTypeCase_ == 4) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 4) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        binaryExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.BinaryExprNode.Builder getBinaryExprBuilder() {
      return getBinaryExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.BinaryExprNodeOrBuilder getBinaryExprOrBuilder() {
      if ((exprTypeCase_ == 4) && (binaryExprBuilder_ != null)) {
        return binaryExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 4) {
          return (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * binary expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.BinaryExprNode, ai.chalk.protos.chalk.expression.v1.BinaryExprNode.Builder, ai.chalk.protos.chalk.expression.v1.BinaryExprNodeOrBuilder> 
        getBinaryExprFieldBuilder() {
      if (binaryExprBuilder_ == null) {
        if (!(exprTypeCase_ == 4)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance();
        }
        binaryExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.BinaryExprNode, ai.chalk.protos.chalk.expression.v1.BinaryExprNode.Builder, ai.chalk.protos.chalk.expression.v1.BinaryExprNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 4;
      onChanged();
      return binaryExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.AggregateExprNode, ai.chalk.protos.chalk.expression.v1.AggregateExprNode.Builder, ai.chalk.protos.chalk.expression.v1.AggregateExprNodeOrBuilder> aggregateExprBuilder_;
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     * @return Whether the aggregateExpr field is set.
     */
    @java.lang.Override
    public boolean hasAggregateExpr() {
      return exprTypeCase_ == 5;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     * @return The aggregateExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.AggregateExprNode getAggregateExpr() {
      if (aggregateExprBuilder_ == null) {
        if (exprTypeCase_ == 5) {
          return (ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.AggregateExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 5) {
          return aggregateExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.AggregateExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     */
    public Builder setAggregateExpr(ai.chalk.protos.chalk.expression.v1.AggregateExprNode value) {
      if (aggregateExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        aggregateExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     */
    public Builder setAggregateExpr(
        ai.chalk.protos.chalk.expression.v1.AggregateExprNode.Builder builderForValue) {
      if (aggregateExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        aggregateExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     */
    public Builder mergeAggregateExpr(ai.chalk.protos.chalk.expression.v1.AggregateExprNode value) {
      if (aggregateExprBuilder_ == null) {
        if (exprTypeCase_ == 5 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.AggregateExprNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.AggregateExprNode.newBuilder((ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 5) {
          aggregateExprBuilder_.mergeFrom(value);
        } else {
          aggregateExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     */
    public Builder clearAggregateExpr() {
      if (aggregateExprBuilder_ == null) {
        if (exprTypeCase_ == 5) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 5) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        aggregateExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.AggregateExprNode.Builder getAggregateExprBuilder() {
      return getAggregateExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.AggregateExprNodeOrBuilder getAggregateExprOrBuilder() {
      if ((exprTypeCase_ == 5) && (aggregateExprBuilder_ != null)) {
        return aggregateExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 5) {
          return (ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.AggregateExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * aggregate expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.AggregateExprNode, ai.chalk.protos.chalk.expression.v1.AggregateExprNode.Builder, ai.chalk.protos.chalk.expression.v1.AggregateExprNodeOrBuilder> 
        getAggregateExprFieldBuilder() {
      if (aggregateExprBuilder_ == null) {
        if (!(exprTypeCase_ == 5)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.AggregateExprNode.getDefaultInstance();
        }
        aggregateExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.AggregateExprNode, ai.chalk.protos.chalk.expression.v1.AggregateExprNode.Builder, ai.chalk.protos.chalk.expression.v1.AggregateExprNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.AggregateExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 5;
      onChanged();
      return aggregateExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNull, ai.chalk.protos.chalk.expression.v1.IsNull.Builder, ai.chalk.protos.chalk.expression.v1.IsNullOrBuilder> isNullExprBuilder_;
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     * @return Whether the isNullExpr field is set.
     */
    @java.lang.Override
    public boolean hasIsNullExpr() {
      return exprTypeCase_ == 6;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     * @return The isNullExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNull getIsNullExpr() {
      if (isNullExprBuilder_ == null) {
        if (exprTypeCase_ == 6) {
          return (ai.chalk.protos.chalk.expression.v1.IsNull) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNull.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 6) {
          return isNullExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsNull.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     */
    public Builder setIsNullExpr(ai.chalk.protos.chalk.expression.v1.IsNull value) {
      if (isNullExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isNullExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     */
    public Builder setIsNullExpr(
        ai.chalk.protos.chalk.expression.v1.IsNull.Builder builderForValue) {
      if (isNullExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isNullExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     */
    public Builder mergeIsNullExpr(ai.chalk.protos.chalk.expression.v1.IsNull value) {
      if (isNullExprBuilder_ == null) {
        if (exprTypeCase_ == 6 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsNull.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNull.newBuilder((ai.chalk.protos.chalk.expression.v1.IsNull) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 6) {
          isNullExprBuilder_.mergeFrom(value);
        } else {
          isNullExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     */
    public Builder clearIsNullExpr() {
      if (isNullExprBuilder_ == null) {
        if (exprTypeCase_ == 6) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 6) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isNullExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsNull.Builder getIsNullExprBuilder() {
      return getIsNullExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNullOrBuilder getIsNullExprOrBuilder() {
      if ((exprTypeCase_ == 6) && (isNullExprBuilder_ != null)) {
        return isNullExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 6) {
          return (ai.chalk.protos.chalk.expression.v1.IsNull) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNull.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * null checks
     * </pre>
     *
     * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNull, ai.chalk.protos.chalk.expression.v1.IsNull.Builder, ai.chalk.protos.chalk.expression.v1.IsNullOrBuilder> 
        getIsNullExprFieldBuilder() {
      if (isNullExprBuilder_ == null) {
        if (!(exprTypeCase_ == 6)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNull.getDefaultInstance();
        }
        isNullExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsNull, ai.chalk.protos.chalk.expression.v1.IsNull.Builder, ai.chalk.protos.chalk.expression.v1.IsNullOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsNull) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 6;
      onChanged();
      return isNullExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotNull, ai.chalk.protos.chalk.expression.v1.IsNotNull.Builder, ai.chalk.protos.chalk.expression.v1.IsNotNullOrBuilder> isNotNullExprBuilder_;
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     * @return Whether the isNotNullExpr field is set.
     */
    @java.lang.Override
    public boolean hasIsNotNullExpr() {
      return exprTypeCase_ == 7;
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     * @return The isNotNullExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotNull getIsNotNullExpr() {
      if (isNotNullExprBuilder_ == null) {
        if (exprTypeCase_ == 7) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotNull.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 7) {
          return isNotNullExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotNull.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     */
    public Builder setIsNotNullExpr(ai.chalk.protos.chalk.expression.v1.IsNotNull value) {
      if (isNotNullExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isNotNullExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     */
    public Builder setIsNotNullExpr(
        ai.chalk.protos.chalk.expression.v1.IsNotNull.Builder builderForValue) {
      if (isNotNullExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isNotNullExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     */
    public Builder mergeIsNotNullExpr(ai.chalk.protos.chalk.expression.v1.IsNotNull value) {
      if (isNotNullExprBuilder_ == null) {
        if (exprTypeCase_ == 7 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsNotNull.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotNull.newBuilder((ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 7) {
          isNotNullExprBuilder_.mergeFrom(value);
        } else {
          isNotNullExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     */
    public Builder clearIsNotNullExpr() {
      if (isNotNullExprBuilder_ == null) {
        if (exprTypeCase_ == 7) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 7) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isNotNullExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsNotNull.Builder getIsNotNullExprBuilder() {
      return getIsNotNullExprFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotNullOrBuilder getIsNotNullExprOrBuilder() {
      if ((exprTypeCase_ == 7) && (isNotNullExprBuilder_ != null)) {
        return isNotNullExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 7) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotNull.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotNull, ai.chalk.protos.chalk.expression.v1.IsNotNull.Builder, ai.chalk.protos.chalk.expression.v1.IsNotNullOrBuilder> 
        getIsNotNullExprFieldBuilder() {
      if (isNotNullExprBuilder_ == null) {
        if (!(exprTypeCase_ == 7)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotNull.getDefaultInstance();
        }
        isNotNullExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsNotNull, ai.chalk.protos.chalk.expression.v1.IsNotNull.Builder, ai.chalk.protos.chalk.expression.v1.IsNotNullOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsNotNull) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 7;
      onChanged();
      return isNotNullExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.Not, ai.chalk.protos.chalk.expression.v1.Not.Builder, ai.chalk.protos.chalk.expression.v1.NotOrBuilder> notExprBuilder_;
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     * @return Whether the notExpr field is set.
     */
    @java.lang.Override
    public boolean hasNotExpr() {
      return exprTypeCase_ == 8;
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     * @return The notExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.Not getNotExpr() {
      if (notExprBuilder_ == null) {
        if (exprTypeCase_ == 8) {
          return (ai.chalk.protos.chalk.expression.v1.Not) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.Not.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 8) {
          return notExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.Not.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     */
    public Builder setNotExpr(ai.chalk.protos.chalk.expression.v1.Not value) {
      if (notExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        notExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     */
    public Builder setNotExpr(
        ai.chalk.protos.chalk.expression.v1.Not.Builder builderForValue) {
      if (notExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        notExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     */
    public Builder mergeNotExpr(ai.chalk.protos.chalk.expression.v1.Not value) {
      if (notExprBuilder_ == null) {
        if (exprTypeCase_ == 8 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.Not.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.Not.newBuilder((ai.chalk.protos.chalk.expression.v1.Not) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 8) {
          notExprBuilder_.mergeFrom(value);
        } else {
          notExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     */
    public Builder clearNotExpr() {
      if (notExprBuilder_ == null) {
        if (exprTypeCase_ == 8) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 8) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        notExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.Not.Builder getNotExprBuilder() {
      return getNotExprFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.NotOrBuilder getNotExprOrBuilder() {
      if ((exprTypeCase_ == 8) && (notExprBuilder_ != null)) {
        return notExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 8) {
          return (ai.chalk.protos.chalk.expression.v1.Not) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.Not.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.Not, ai.chalk.protos.chalk.expression.v1.Not.Builder, ai.chalk.protos.chalk.expression.v1.NotOrBuilder> 
        getNotExprFieldBuilder() {
      if (notExprBuilder_ == null) {
        if (!(exprTypeCase_ == 8)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.Not.getDefaultInstance();
        }
        notExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.Not, ai.chalk.protos.chalk.expression.v1.Not.Builder, ai.chalk.protos.chalk.expression.v1.NotOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.Not) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 8;
      onChanged();
      return notExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.BetweenNode, ai.chalk.protos.chalk.expression.v1.BetweenNode.Builder, ai.chalk.protos.chalk.expression.v1.BetweenNodeOrBuilder> betweenBuilder_;
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     * @return Whether the between field is set.
     */
    @java.lang.Override
    public boolean hasBetween() {
      return exprTypeCase_ == 9;
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     * @return The between.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.BetweenNode getBetween() {
      if (betweenBuilder_ == null) {
        if (exprTypeCase_ == 9) {
          return (ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.BetweenNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 9) {
          return betweenBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.BetweenNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     */
    public Builder setBetween(ai.chalk.protos.chalk.expression.v1.BetweenNode value) {
      if (betweenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        betweenBuilder_.setMessage(value);
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     */
    public Builder setBetween(
        ai.chalk.protos.chalk.expression.v1.BetweenNode.Builder builderForValue) {
      if (betweenBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        betweenBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     */
    public Builder mergeBetween(ai.chalk.protos.chalk.expression.v1.BetweenNode value) {
      if (betweenBuilder_ == null) {
        if (exprTypeCase_ == 9 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.BetweenNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.BetweenNode.newBuilder((ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 9) {
          betweenBuilder_.mergeFrom(value);
        } else {
          betweenBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     */
    public Builder clearBetween() {
      if (betweenBuilder_ == null) {
        if (exprTypeCase_ == 9) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 9) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        betweenBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.BetweenNode.Builder getBetweenBuilder() {
      return getBetweenFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.BetweenNodeOrBuilder getBetweenOrBuilder() {
      if ((exprTypeCase_ == 9) && (betweenBuilder_ != null)) {
        return betweenBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 9) {
          return (ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.BetweenNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.BetweenNode, ai.chalk.protos.chalk.expression.v1.BetweenNode.Builder, ai.chalk.protos.chalk.expression.v1.BetweenNodeOrBuilder> 
        getBetweenFieldBuilder() {
      if (betweenBuilder_ == null) {
        if (!(exprTypeCase_ == 9)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.BetweenNode.getDefaultInstance();
        }
        betweenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.BetweenNode, ai.chalk.protos.chalk.expression.v1.BetweenNode.Builder, ai.chalk.protos.chalk.expression.v1.BetweenNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.BetweenNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 9;
      onChanged();
      return betweenBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.CaseNode, ai.chalk.protos.chalk.expression.v1.CaseNode.Builder, ai.chalk.protos.chalk.expression.v1.CaseNodeOrBuilder> caseBuilder_;
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     * @return Whether the case field is set.
     */
    @java.lang.Override
    public boolean hasCase() {
      return exprTypeCase_ == 10;
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     * @return The case.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.CaseNode getCase() {
      if (caseBuilder_ == null) {
        if (exprTypeCase_ == 10) {
          return (ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.CaseNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 10) {
          return caseBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.CaseNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     */
    public Builder setCase(ai.chalk.protos.chalk.expression.v1.CaseNode value) {
      if (caseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        caseBuilder_.setMessage(value);
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     */
    public Builder setCase(
        ai.chalk.protos.chalk.expression.v1.CaseNode.Builder builderForValue) {
      if (caseBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        caseBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     */
    public Builder mergeCase(ai.chalk.protos.chalk.expression.v1.CaseNode value) {
      if (caseBuilder_ == null) {
        if (exprTypeCase_ == 10 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.CaseNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.CaseNode.newBuilder((ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 10) {
          caseBuilder_.mergeFrom(value);
        } else {
          caseBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     */
    public Builder clearCase() {
      if (caseBuilder_ == null) {
        if (exprTypeCase_ == 10) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 10) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        caseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.CaseNode.Builder getCaseBuilder() {
      return getCaseFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.CaseNodeOrBuilder getCaseOrBuilder() {
      if ((exprTypeCase_ == 10) && (caseBuilder_ != null)) {
        return caseBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 10) {
          return (ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.CaseNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.CaseNode, ai.chalk.protos.chalk.expression.v1.CaseNode.Builder, ai.chalk.protos.chalk.expression.v1.CaseNodeOrBuilder> 
        getCaseFieldBuilder() {
      if (caseBuilder_ == null) {
        if (!(exprTypeCase_ == 10)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.CaseNode.getDefaultInstance();
        }
        caseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.CaseNode, ai.chalk.protos.chalk.expression.v1.CaseNode.Builder, ai.chalk.protos.chalk.expression.v1.CaseNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.CaseNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 10;
      onChanged();
      return caseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.CastNode, ai.chalk.protos.chalk.expression.v1.CastNode.Builder, ai.chalk.protos.chalk.expression.v1.CastNodeOrBuilder> castBuilder_;
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     * @return Whether the cast field is set.
     */
    @java.lang.Override
    public boolean hasCast() {
      return exprTypeCase_ == 11;
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     * @return The cast.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.CastNode getCast() {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 11) {
          return (ai.chalk.protos.chalk.expression.v1.CastNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.CastNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 11) {
          return castBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.CastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     */
    public Builder setCast(ai.chalk.protos.chalk.expression.v1.CastNode value) {
      if (castBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        castBuilder_.setMessage(value);
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     */
    public Builder setCast(
        ai.chalk.protos.chalk.expression.v1.CastNode.Builder builderForValue) {
      if (castBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        castBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     */
    public Builder mergeCast(ai.chalk.protos.chalk.expression.v1.CastNode value) {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 11 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.CastNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.CastNode.newBuilder((ai.chalk.protos.chalk.expression.v1.CastNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 11) {
          castBuilder_.mergeFrom(value);
        } else {
          castBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     */
    public Builder clearCast() {
      if (castBuilder_ == null) {
        if (exprTypeCase_ == 11) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 11) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        castBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.CastNode.Builder getCastBuilder() {
      return getCastFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.CastNodeOrBuilder getCastOrBuilder() {
      if ((exprTypeCase_ == 11) && (castBuilder_ != null)) {
        return castBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 11) {
          return (ai.chalk.protos.chalk.expression.v1.CastNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.CastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.CastNode, ai.chalk.protos.chalk.expression.v1.CastNode.Builder, ai.chalk.protos.chalk.expression.v1.CastNodeOrBuilder> 
        getCastFieldBuilder() {
      if (castBuilder_ == null) {
        if (!(exprTypeCase_ == 11)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.CastNode.getDefaultInstance();
        }
        castBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.CastNode, ai.chalk.protos.chalk.expression.v1.CastNode.Builder, ai.chalk.protos.chalk.expression.v1.CastNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.CastNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 11;
      onChanged();
      return castBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.SortExprNode, ai.chalk.protos.chalk.expression.v1.SortExprNode.Builder, ai.chalk.protos.chalk.expression.v1.SortExprNodeOrBuilder> sortBuilder_;
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     * @return Whether the sort field is set.
     */
    @java.lang.Override
    public boolean hasSort() {
      return exprTypeCase_ == 12;
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     * @return The sort.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.SortExprNode getSort() {
      if (sortBuilder_ == null) {
        if (exprTypeCase_ == 12) {
          return (ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.SortExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 12) {
          return sortBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.SortExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     */
    public Builder setSort(ai.chalk.protos.chalk.expression.v1.SortExprNode value) {
      if (sortBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        sortBuilder_.setMessage(value);
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     */
    public Builder setSort(
        ai.chalk.protos.chalk.expression.v1.SortExprNode.Builder builderForValue) {
      if (sortBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        sortBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     */
    public Builder mergeSort(ai.chalk.protos.chalk.expression.v1.SortExprNode value) {
      if (sortBuilder_ == null) {
        if (exprTypeCase_ == 12 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.SortExprNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.SortExprNode.newBuilder((ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 12) {
          sortBuilder_.mergeFrom(value);
        } else {
          sortBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     */
    public Builder clearSort() {
      if (sortBuilder_ == null) {
        if (exprTypeCase_ == 12) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 12) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        sortBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.SortExprNode.Builder getSortBuilder() {
      return getSortFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.SortExprNodeOrBuilder getSortOrBuilder() {
      if ((exprTypeCase_ == 12) && (sortBuilder_ != null)) {
        return sortBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 12) {
          return (ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.SortExprNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.SortExprNode, ai.chalk.protos.chalk.expression.v1.SortExprNode.Builder, ai.chalk.protos.chalk.expression.v1.SortExprNodeOrBuilder> 
        getSortFieldBuilder() {
      if (sortBuilder_ == null) {
        if (!(exprTypeCase_ == 12)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.SortExprNode.getDefaultInstance();
        }
        sortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.SortExprNode, ai.chalk.protos.chalk.expression.v1.SortExprNode.Builder, ai.chalk.protos.chalk.expression.v1.SortExprNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.SortExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 12;
      onChanged();
      return sortBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.NegativeNode, ai.chalk.protos.chalk.expression.v1.NegativeNode.Builder, ai.chalk.protos.chalk.expression.v1.NegativeNodeOrBuilder> negativeBuilder_;
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     * @return Whether the negative field is set.
     */
    @java.lang.Override
    public boolean hasNegative() {
      return exprTypeCase_ == 13;
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     * @return The negative.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.NegativeNode getNegative() {
      if (negativeBuilder_ == null) {
        if (exprTypeCase_ == 13) {
          return (ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.NegativeNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 13) {
          return negativeBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.NegativeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     */
    public Builder setNegative(ai.chalk.protos.chalk.expression.v1.NegativeNode value) {
      if (negativeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        negativeBuilder_.setMessage(value);
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     */
    public Builder setNegative(
        ai.chalk.protos.chalk.expression.v1.NegativeNode.Builder builderForValue) {
      if (negativeBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        negativeBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     */
    public Builder mergeNegative(ai.chalk.protos.chalk.expression.v1.NegativeNode value) {
      if (negativeBuilder_ == null) {
        if (exprTypeCase_ == 13 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.NegativeNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.NegativeNode.newBuilder((ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 13) {
          negativeBuilder_.mergeFrom(value);
        } else {
          negativeBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     */
    public Builder clearNegative() {
      if (negativeBuilder_ == null) {
        if (exprTypeCase_ == 13) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 13) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        negativeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.NegativeNode.Builder getNegativeBuilder() {
      return getNegativeFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.NegativeNodeOrBuilder getNegativeOrBuilder() {
      if ((exprTypeCase_ == 13) && (negativeBuilder_ != null)) {
        return negativeBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 13) {
          return (ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.NegativeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.NegativeNode, ai.chalk.protos.chalk.expression.v1.NegativeNode.Builder, ai.chalk.protos.chalk.expression.v1.NegativeNodeOrBuilder> 
        getNegativeFieldBuilder() {
      if (negativeBuilder_ == null) {
        if (!(exprTypeCase_ == 13)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.NegativeNode.getDefaultInstance();
        }
        negativeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.NegativeNode, ai.chalk.protos.chalk.expression.v1.NegativeNode.Builder, ai.chalk.protos.chalk.expression.v1.NegativeNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.NegativeNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 13;
      onChanged();
      return negativeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.InListNode, ai.chalk.protos.chalk.expression.v1.InListNode.Builder, ai.chalk.protos.chalk.expression.v1.InListNodeOrBuilder> inListBuilder_;
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     * @return Whether the inList field is set.
     */
    @java.lang.Override
    public boolean hasInList() {
      return exprTypeCase_ == 14;
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     * @return The inList.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.InListNode getInList() {
      if (inListBuilder_ == null) {
        if (exprTypeCase_ == 14) {
          return (ai.chalk.protos.chalk.expression.v1.InListNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.InListNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 14) {
          return inListBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.InListNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     */
    public Builder setInList(ai.chalk.protos.chalk.expression.v1.InListNode value) {
      if (inListBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        inListBuilder_.setMessage(value);
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     */
    public Builder setInList(
        ai.chalk.protos.chalk.expression.v1.InListNode.Builder builderForValue) {
      if (inListBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        inListBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     */
    public Builder mergeInList(ai.chalk.protos.chalk.expression.v1.InListNode value) {
      if (inListBuilder_ == null) {
        if (exprTypeCase_ == 14 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.InListNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.InListNode.newBuilder((ai.chalk.protos.chalk.expression.v1.InListNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 14) {
          inListBuilder_.mergeFrom(value);
        } else {
          inListBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     */
    public Builder clearInList() {
      if (inListBuilder_ == null) {
        if (exprTypeCase_ == 14) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 14) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        inListBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.InListNode.Builder getInListBuilder() {
      return getInListFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.InListNodeOrBuilder getInListOrBuilder() {
      if ((exprTypeCase_ == 14) && (inListBuilder_ != null)) {
        return inListBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 14) {
          return (ai.chalk.protos.chalk.expression.v1.InListNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.InListNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.InListNode, ai.chalk.protos.chalk.expression.v1.InListNode.Builder, ai.chalk.protos.chalk.expression.v1.InListNodeOrBuilder> 
        getInListFieldBuilder() {
      if (inListBuilder_ == null) {
        if (!(exprTypeCase_ == 14)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.InListNode.getDefaultInstance();
        }
        inListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.InListNode, ai.chalk.protos.chalk.expression.v1.InListNode.Builder, ai.chalk.protos.chalk.expression.v1.InListNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.InListNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 14;
      onChanged();
      return inListBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.Wildcard, ai.chalk.protos.chalk.expression.v1.Wildcard.Builder, ai.chalk.protos.chalk.expression.v1.WildcardOrBuilder> wildcardBuilder_;
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     * @return Whether the wildcard field is set.
     */
    @java.lang.Override
    public boolean hasWildcard() {
      return exprTypeCase_ == 15;
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     * @return The wildcard.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.Wildcard getWildcard() {
      if (wildcardBuilder_ == null) {
        if (exprTypeCase_ == 15) {
          return (ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.Wildcard.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 15) {
          return wildcardBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.Wildcard.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     */
    public Builder setWildcard(ai.chalk.protos.chalk.expression.v1.Wildcard value) {
      if (wildcardBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        wildcardBuilder_.setMessage(value);
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     */
    public Builder setWildcard(
        ai.chalk.protos.chalk.expression.v1.Wildcard.Builder builderForValue) {
      if (wildcardBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        wildcardBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     */
    public Builder mergeWildcard(ai.chalk.protos.chalk.expression.v1.Wildcard value) {
      if (wildcardBuilder_ == null) {
        if (exprTypeCase_ == 15 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.Wildcard.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.Wildcard.newBuilder((ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 15) {
          wildcardBuilder_.mergeFrom(value);
        } else {
          wildcardBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     */
    public Builder clearWildcard() {
      if (wildcardBuilder_ == null) {
        if (exprTypeCase_ == 15) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 15) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        wildcardBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.Wildcard.Builder getWildcardBuilder() {
      return getWildcardFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.WildcardOrBuilder getWildcardOrBuilder() {
      if ((exprTypeCase_ == 15) && (wildcardBuilder_ != null)) {
        return wildcardBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 15) {
          return (ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.Wildcard.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.Wildcard, ai.chalk.protos.chalk.expression.v1.Wildcard.Builder, ai.chalk.protos.chalk.expression.v1.WildcardOrBuilder> 
        getWildcardFieldBuilder() {
      if (wildcardBuilder_ == null) {
        if (!(exprTypeCase_ == 15)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.Wildcard.getDefaultInstance();
        }
        wildcardBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.Wildcard, ai.chalk.protos.chalk.expression.v1.Wildcard.Builder, ai.chalk.protos.chalk.expression.v1.WildcardOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.Wildcard) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 15;
      onChanged();
      return wildcardBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode, ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.Builder, ai.chalk.protos.chalk.expression.v1.ScalarFunctionNodeOrBuilder> scalarFunctionBuilder_;
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     * @return Whether the scalarFunction field is set.
     */
    @java.lang.Override
    public boolean hasScalarFunction() {
      return exprTypeCase_ == 16;
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     * @return The scalarFunction.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode getScalarFunction() {
      if (scalarFunctionBuilder_ == null) {
        if (exprTypeCase_ == 16) {
          return (ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 16) {
          return scalarFunctionBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     */
    public Builder setScalarFunction(ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode value) {
      if (scalarFunctionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        scalarFunctionBuilder_.setMessage(value);
      }
      exprTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     */
    public Builder setScalarFunction(
        ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.Builder builderForValue) {
      if (scalarFunctionBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        scalarFunctionBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     */
    public Builder mergeScalarFunction(ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode value) {
      if (scalarFunctionBuilder_ == null) {
        if (exprTypeCase_ == 16 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.newBuilder((ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 16) {
          scalarFunctionBuilder_.mergeFrom(value);
        } else {
          scalarFunctionBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 16;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     */
    public Builder clearScalarFunction() {
      if (scalarFunctionBuilder_ == null) {
        if (exprTypeCase_ == 16) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 16) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        scalarFunctionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.Builder getScalarFunctionBuilder() {
      return getScalarFunctionFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.ScalarFunctionNodeOrBuilder getScalarFunctionOrBuilder() {
      if ((exprTypeCase_ == 16) && (scalarFunctionBuilder_ != null)) {
        return scalarFunctionBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 16) {
          return (ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode, ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.Builder, ai.chalk.protos.chalk.expression.v1.ScalarFunctionNodeOrBuilder> 
        getScalarFunctionFieldBuilder() {
      if (scalarFunctionBuilder_ == null) {
        if (!(exprTypeCase_ == 16)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.getDefaultInstance();
        }
        scalarFunctionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode, ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode.Builder, ai.chalk.protos.chalk.expression.v1.ScalarFunctionNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 16;
      onChanged();
      return scalarFunctionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.TryCastNode, ai.chalk.protos.chalk.expression.v1.TryCastNode.Builder, ai.chalk.protos.chalk.expression.v1.TryCastNodeOrBuilder> tryCastBuilder_;
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     * @return Whether the tryCast field is set.
     */
    @java.lang.Override
    public boolean hasTryCast() {
      return exprTypeCase_ == 17;
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     * @return The tryCast.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.TryCastNode getTryCast() {
      if (tryCastBuilder_ == null) {
        if (exprTypeCase_ == 17) {
          return (ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.TryCastNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 17) {
          return tryCastBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.TryCastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     */
    public Builder setTryCast(ai.chalk.protos.chalk.expression.v1.TryCastNode value) {
      if (tryCastBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        tryCastBuilder_.setMessage(value);
      }
      exprTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     */
    public Builder setTryCast(
        ai.chalk.protos.chalk.expression.v1.TryCastNode.Builder builderForValue) {
      if (tryCastBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        tryCastBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     */
    public Builder mergeTryCast(ai.chalk.protos.chalk.expression.v1.TryCastNode value) {
      if (tryCastBuilder_ == null) {
        if (exprTypeCase_ == 17 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.TryCastNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.TryCastNode.newBuilder((ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 17) {
          tryCastBuilder_.mergeFrom(value);
        } else {
          tryCastBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 17;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     */
    public Builder clearTryCast() {
      if (tryCastBuilder_ == null) {
        if (exprTypeCase_ == 17) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 17) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        tryCastBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.TryCastNode.Builder getTryCastBuilder() {
      return getTryCastFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.TryCastNodeOrBuilder getTryCastOrBuilder() {
      if ((exprTypeCase_ == 17) && (tryCastBuilder_ != null)) {
        return tryCastBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 17) {
          return (ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.TryCastNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.TryCastNode, ai.chalk.protos.chalk.expression.v1.TryCastNode.Builder, ai.chalk.protos.chalk.expression.v1.TryCastNodeOrBuilder> 
        getTryCastFieldBuilder() {
      if (tryCastBuilder_ == null) {
        if (!(exprTypeCase_ == 17)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.TryCastNode.getDefaultInstance();
        }
        tryCastBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.TryCastNode, ai.chalk.protos.chalk.expression.v1.TryCastNode.Builder, ai.chalk.protos.chalk.expression.v1.TryCastNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.TryCastNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 17;
      onChanged();
      return tryCastBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.WindowExprNode, ai.chalk.protos.chalk.expression.v1.WindowExprNode.Builder, ai.chalk.protos.chalk.expression.v1.WindowExprNodeOrBuilder> windowExprBuilder_;
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     * @return Whether the windowExpr field is set.
     */
    @java.lang.Override
    public boolean hasWindowExpr() {
      return exprTypeCase_ == 18;
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     * @return The windowExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.WindowExprNode getWindowExpr() {
      if (windowExprBuilder_ == null) {
        if (exprTypeCase_ == 18) {
          return (ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.WindowExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 18) {
          return windowExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.WindowExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     */
    public Builder setWindowExpr(ai.chalk.protos.chalk.expression.v1.WindowExprNode value) {
      if (windowExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        windowExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     */
    public Builder setWindowExpr(
        ai.chalk.protos.chalk.expression.v1.WindowExprNode.Builder builderForValue) {
      if (windowExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        windowExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     */
    public Builder mergeWindowExpr(ai.chalk.protos.chalk.expression.v1.WindowExprNode value) {
      if (windowExprBuilder_ == null) {
        if (exprTypeCase_ == 18 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.WindowExprNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.WindowExprNode.newBuilder((ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 18) {
          windowExprBuilder_.mergeFrom(value);
        } else {
          windowExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 18;
      return this;
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     */
    public Builder clearWindowExpr() {
      if (windowExprBuilder_ == null) {
        if (exprTypeCase_ == 18) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 18) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        windowExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.WindowExprNode.Builder getWindowExprBuilder() {
      return getWindowExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.WindowExprNodeOrBuilder getWindowExprOrBuilder() {
      if ((exprTypeCase_ == 18) && (windowExprBuilder_ != null)) {
        return windowExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 18) {
          return (ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.WindowExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * window expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.WindowExprNode, ai.chalk.protos.chalk.expression.v1.WindowExprNode.Builder, ai.chalk.protos.chalk.expression.v1.WindowExprNodeOrBuilder> 
        getWindowExprFieldBuilder() {
      if (windowExprBuilder_ == null) {
        if (!(exprTypeCase_ == 18)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.WindowExprNode.getDefaultInstance();
        }
        windowExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.WindowExprNode, ai.chalk.protos.chalk.expression.v1.WindowExprNode.Builder, ai.chalk.protos.chalk.expression.v1.WindowExprNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.WindowExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 18;
      onChanged();
      return windowExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode, ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.Builder, ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNodeOrBuilder> aggregateUdfExprBuilder_;
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     * @return Whether the aggregateUdfExpr field is set.
     */
    @java.lang.Override
    public boolean hasAggregateUdfExpr() {
      return exprTypeCase_ == 19;
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     * @return The aggregateUdfExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode getAggregateUdfExpr() {
      if (aggregateUdfExprBuilder_ == null) {
        if (exprTypeCase_ == 19) {
          return (ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 19) {
          return aggregateUdfExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     */
    public Builder setAggregateUdfExpr(ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode value) {
      if (aggregateUdfExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        aggregateUdfExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     */
    public Builder setAggregateUdfExpr(
        ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.Builder builderForValue) {
      if (aggregateUdfExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        aggregateUdfExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     */
    public Builder mergeAggregateUdfExpr(ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode value) {
      if (aggregateUdfExprBuilder_ == null) {
        if (exprTypeCase_ == 19 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.newBuilder((ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 19) {
          aggregateUdfExprBuilder_.mergeFrom(value);
        } else {
          aggregateUdfExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     */
    public Builder clearAggregateUdfExpr() {
      if (aggregateUdfExprBuilder_ == null) {
        if (exprTypeCase_ == 19) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 19) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        aggregateUdfExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.Builder getAggregateUdfExprBuilder() {
      return getAggregateUdfExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNodeOrBuilder getAggregateUdfExprOrBuilder() {
      if ((exprTypeCase_ == 19) && (aggregateUdfExprBuilder_ != null)) {
        return aggregateUdfExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 19) {
          return (ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * AggregateUDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode, ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.Builder, ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNodeOrBuilder> 
        getAggregateUdfExprFieldBuilder() {
      if (aggregateUdfExprBuilder_ == null) {
        if (!(exprTypeCase_ == 19)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.getDefaultInstance();
        }
        aggregateUdfExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode, ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode.Builder, ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 19;
      onChanged();
      return aggregateUdfExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode, ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.Builder, ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNodeOrBuilder> scalarUdfExprBuilder_;
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     * @return Whether the scalarUdfExpr field is set.
     */
    @java.lang.Override
    public boolean hasScalarUdfExpr() {
      return exprTypeCase_ == 20;
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     * @return The scalarUdfExpr.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode getScalarUdfExpr() {
      if (scalarUdfExprBuilder_ == null) {
        if (exprTypeCase_ == 20) {
          return (ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 20) {
          return scalarUdfExprBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     */
    public Builder setScalarUdfExpr(ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode value) {
      if (scalarUdfExprBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        scalarUdfExprBuilder_.setMessage(value);
      }
      exprTypeCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     */
    public Builder setScalarUdfExpr(
        ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.Builder builderForValue) {
      if (scalarUdfExprBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        scalarUdfExprBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     */
    public Builder mergeScalarUdfExpr(ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode value) {
      if (scalarUdfExprBuilder_ == null) {
        if (exprTypeCase_ == 20 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.newBuilder((ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 20) {
          scalarUdfExprBuilder_.mergeFrom(value);
        } else {
          scalarUdfExprBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     */
    public Builder clearScalarUdfExpr() {
      if (scalarUdfExprBuilder_ == null) {
        if (exprTypeCase_ == 20) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 20) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        scalarUdfExprBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.Builder getScalarUdfExprBuilder() {
      return getScalarUdfExprFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNodeOrBuilder getScalarUdfExprOrBuilder() {
      if ((exprTypeCase_ == 20) && (scalarUdfExprBuilder_ != null)) {
        return scalarUdfExprBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 20) {
          return (ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Scalar UDF expressions
     * </pre>
     *
     * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode, ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.Builder, ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNodeOrBuilder> 
        getScalarUdfExprFieldBuilder() {
      if (scalarUdfExprBuilder_ == null) {
        if (!(exprTypeCase_ == 20)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.getDefaultInstance();
        }
        scalarUdfExprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode, ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode.Builder, ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 20;
      onChanged();
      return scalarUdfExprBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.GetIndexedField, ai.chalk.protos.chalk.expression.v1.GetIndexedField.Builder, ai.chalk.protos.chalk.expression.v1.GetIndexedFieldOrBuilder> getIndexedFieldBuilder_;
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     * @return Whether the getIndexedField field is set.
     */
    @java.lang.Override
    public boolean hasGetIndexedField() {
      return exprTypeCase_ == 21;
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     * @return The getIndexedField.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.GetIndexedField getGetIndexedField() {
      if (getIndexedFieldBuilder_ == null) {
        if (exprTypeCase_ == 21) {
          return (ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.GetIndexedField.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 21) {
          return getIndexedFieldBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.GetIndexedField.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     */
    public Builder setGetIndexedField(ai.chalk.protos.chalk.expression.v1.GetIndexedField value) {
      if (getIndexedFieldBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        getIndexedFieldBuilder_.setMessage(value);
      }
      exprTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     */
    public Builder setGetIndexedField(
        ai.chalk.protos.chalk.expression.v1.GetIndexedField.Builder builderForValue) {
      if (getIndexedFieldBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        getIndexedFieldBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     */
    public Builder mergeGetIndexedField(ai.chalk.protos.chalk.expression.v1.GetIndexedField value) {
      if (getIndexedFieldBuilder_ == null) {
        if (exprTypeCase_ == 21 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.GetIndexedField.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.GetIndexedField.newBuilder((ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 21) {
          getIndexedFieldBuilder_.mergeFrom(value);
        } else {
          getIndexedFieldBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 21;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     */
    public Builder clearGetIndexedField() {
      if (getIndexedFieldBuilder_ == null) {
        if (exprTypeCase_ == 21) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 21) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        getIndexedFieldBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.GetIndexedField.Builder getGetIndexedFieldBuilder() {
      return getGetIndexedFieldFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.GetIndexedFieldOrBuilder getGetIndexedFieldOrBuilder() {
      if ((exprTypeCase_ == 21) && (getIndexedFieldBuilder_ != null)) {
        return getIndexedFieldBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 21) {
          return (ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.GetIndexedField.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.GetIndexedField, ai.chalk.protos.chalk.expression.v1.GetIndexedField.Builder, ai.chalk.protos.chalk.expression.v1.GetIndexedFieldOrBuilder> 
        getGetIndexedFieldFieldBuilder() {
      if (getIndexedFieldBuilder_ == null) {
        if (!(exprTypeCase_ == 21)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.GetIndexedField.getDefaultInstance();
        }
        getIndexedFieldBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.GetIndexedField, ai.chalk.protos.chalk.expression.v1.GetIndexedField.Builder, ai.chalk.protos.chalk.expression.v1.GetIndexedFieldOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.GetIndexedField) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 21;
      onChanged();
      return getIndexedFieldBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.GroupingSetNode, ai.chalk.protos.chalk.expression.v1.GroupingSetNode.Builder, ai.chalk.protos.chalk.expression.v1.GroupingSetNodeOrBuilder> groupingSetBuilder_;
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     * @return Whether the groupingSet field is set.
     */
    @java.lang.Override
    public boolean hasGroupingSet() {
      return exprTypeCase_ == 22;
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     * @return The groupingSet.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.GroupingSetNode getGroupingSet() {
      if (groupingSetBuilder_ == null) {
        if (exprTypeCase_ == 22) {
          return (ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.GroupingSetNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 22) {
          return groupingSetBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.GroupingSetNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     */
    public Builder setGroupingSet(ai.chalk.protos.chalk.expression.v1.GroupingSetNode value) {
      if (groupingSetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        groupingSetBuilder_.setMessage(value);
      }
      exprTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     */
    public Builder setGroupingSet(
        ai.chalk.protos.chalk.expression.v1.GroupingSetNode.Builder builderForValue) {
      if (groupingSetBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        groupingSetBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     */
    public Builder mergeGroupingSet(ai.chalk.protos.chalk.expression.v1.GroupingSetNode value) {
      if (groupingSetBuilder_ == null) {
        if (exprTypeCase_ == 22 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.GroupingSetNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.GroupingSetNode.newBuilder((ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 22) {
          groupingSetBuilder_.mergeFrom(value);
        } else {
          groupingSetBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 22;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     */
    public Builder clearGroupingSet() {
      if (groupingSetBuilder_ == null) {
        if (exprTypeCase_ == 22) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 22) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        groupingSetBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.GroupingSetNode.Builder getGroupingSetBuilder() {
      return getGroupingSetFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.GroupingSetNodeOrBuilder getGroupingSetOrBuilder() {
      if ((exprTypeCase_ == 22) && (groupingSetBuilder_ != null)) {
        return groupingSetBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 22) {
          return (ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.GroupingSetNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.GroupingSetNode, ai.chalk.protos.chalk.expression.v1.GroupingSetNode.Builder, ai.chalk.protos.chalk.expression.v1.GroupingSetNodeOrBuilder> 
        getGroupingSetFieldBuilder() {
      if (groupingSetBuilder_ == null) {
        if (!(exprTypeCase_ == 22)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.GroupingSetNode.getDefaultInstance();
        }
        groupingSetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.GroupingSetNode, ai.chalk.protos.chalk.expression.v1.GroupingSetNode.Builder, ai.chalk.protos.chalk.expression.v1.GroupingSetNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.GroupingSetNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 22;
      onChanged();
      return groupingSetBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.CubeNode, ai.chalk.protos.chalk.expression.v1.CubeNode.Builder, ai.chalk.protos.chalk.expression.v1.CubeNodeOrBuilder> cubeBuilder_;
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     * @return Whether the cube field is set.
     */
    @java.lang.Override
    public boolean hasCube() {
      return exprTypeCase_ == 23;
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     * @return The cube.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.CubeNode getCube() {
      if (cubeBuilder_ == null) {
        if (exprTypeCase_ == 23) {
          return (ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.CubeNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 23) {
          return cubeBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.CubeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     */
    public Builder setCube(ai.chalk.protos.chalk.expression.v1.CubeNode value) {
      if (cubeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        cubeBuilder_.setMessage(value);
      }
      exprTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     */
    public Builder setCube(
        ai.chalk.protos.chalk.expression.v1.CubeNode.Builder builderForValue) {
      if (cubeBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        cubeBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     */
    public Builder mergeCube(ai.chalk.protos.chalk.expression.v1.CubeNode value) {
      if (cubeBuilder_ == null) {
        if (exprTypeCase_ == 23 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.CubeNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.CubeNode.newBuilder((ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 23) {
          cubeBuilder_.mergeFrom(value);
        } else {
          cubeBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 23;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     */
    public Builder clearCube() {
      if (cubeBuilder_ == null) {
        if (exprTypeCase_ == 23) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 23) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        cubeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.CubeNode.Builder getCubeBuilder() {
      return getCubeFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.CubeNodeOrBuilder getCubeOrBuilder() {
      if ((exprTypeCase_ == 23) && (cubeBuilder_ != null)) {
        return cubeBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 23) {
          return (ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.CubeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.CubeNode, ai.chalk.protos.chalk.expression.v1.CubeNode.Builder, ai.chalk.protos.chalk.expression.v1.CubeNodeOrBuilder> 
        getCubeFieldBuilder() {
      if (cubeBuilder_ == null) {
        if (!(exprTypeCase_ == 23)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.CubeNode.getDefaultInstance();
        }
        cubeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.CubeNode, ai.chalk.protos.chalk.expression.v1.CubeNode.Builder, ai.chalk.protos.chalk.expression.v1.CubeNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.CubeNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 23;
      onChanged();
      return cubeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.RollupNode, ai.chalk.protos.chalk.expression.v1.RollupNode.Builder, ai.chalk.protos.chalk.expression.v1.RollupNodeOrBuilder> rollupBuilder_;
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     * @return Whether the rollup field is set.
     */
    @java.lang.Override
    public boolean hasRollup() {
      return exprTypeCase_ == 24;
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     * @return The rollup.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.RollupNode getRollup() {
      if (rollupBuilder_ == null) {
        if (exprTypeCase_ == 24) {
          return (ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.RollupNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 24) {
          return rollupBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.RollupNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     */
    public Builder setRollup(ai.chalk.protos.chalk.expression.v1.RollupNode value) {
      if (rollupBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        rollupBuilder_.setMessage(value);
      }
      exprTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     */
    public Builder setRollup(
        ai.chalk.protos.chalk.expression.v1.RollupNode.Builder builderForValue) {
      if (rollupBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        rollupBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     */
    public Builder mergeRollup(ai.chalk.protos.chalk.expression.v1.RollupNode value) {
      if (rollupBuilder_ == null) {
        if (exprTypeCase_ == 24 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.RollupNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.RollupNode.newBuilder((ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 24) {
          rollupBuilder_.mergeFrom(value);
        } else {
          rollupBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 24;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     */
    public Builder clearRollup() {
      if (rollupBuilder_ == null) {
        if (exprTypeCase_ == 24) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 24) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        rollupBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.RollupNode.Builder getRollupBuilder() {
      return getRollupFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.RollupNodeOrBuilder getRollupOrBuilder() {
      if ((exprTypeCase_ == 24) && (rollupBuilder_ != null)) {
        return rollupBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 24) {
          return (ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.RollupNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.RollupNode, ai.chalk.protos.chalk.expression.v1.RollupNode.Builder, ai.chalk.protos.chalk.expression.v1.RollupNodeOrBuilder> 
        getRollupFieldBuilder() {
      if (rollupBuilder_ == null) {
        if (!(exprTypeCase_ == 24)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.RollupNode.getDefaultInstance();
        }
        rollupBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.RollupNode, ai.chalk.protos.chalk.expression.v1.RollupNode.Builder, ai.chalk.protos.chalk.expression.v1.RollupNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.RollupNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 24;
      onChanged();
      return rollupBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsTrue, ai.chalk.protos.chalk.expression.v1.IsTrue.Builder, ai.chalk.protos.chalk.expression.v1.IsTrueOrBuilder> isTrueBuilder_;
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     * @return Whether the isTrue field is set.
     */
    @java.lang.Override
    public boolean hasIsTrue() {
      return exprTypeCase_ == 25;
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     * @return The isTrue.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsTrue getIsTrue() {
      if (isTrueBuilder_ == null) {
        if (exprTypeCase_ == 25) {
          return (ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsTrue.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 25) {
          return isTrueBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsTrue.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     */
    public Builder setIsTrue(ai.chalk.protos.chalk.expression.v1.IsTrue value) {
      if (isTrueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isTrueBuilder_.setMessage(value);
      }
      exprTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     */
    public Builder setIsTrue(
        ai.chalk.protos.chalk.expression.v1.IsTrue.Builder builderForValue) {
      if (isTrueBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isTrueBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     */
    public Builder mergeIsTrue(ai.chalk.protos.chalk.expression.v1.IsTrue value) {
      if (isTrueBuilder_ == null) {
        if (exprTypeCase_ == 25 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsTrue.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsTrue.newBuilder((ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 25) {
          isTrueBuilder_.mergeFrom(value);
        } else {
          isTrueBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 25;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     */
    public Builder clearIsTrue() {
      if (isTrueBuilder_ == null) {
        if (exprTypeCase_ == 25) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 25) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isTrueBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsTrue.Builder getIsTrueBuilder() {
      return getIsTrueFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsTrueOrBuilder getIsTrueOrBuilder() {
      if ((exprTypeCase_ == 25) && (isTrueBuilder_ != null)) {
        return isTrueBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 25) {
          return (ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsTrue.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsTrue, ai.chalk.protos.chalk.expression.v1.IsTrue.Builder, ai.chalk.protos.chalk.expression.v1.IsTrueOrBuilder> 
        getIsTrueFieldBuilder() {
      if (isTrueBuilder_ == null) {
        if (!(exprTypeCase_ == 25)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsTrue.getDefaultInstance();
        }
        isTrueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsTrue, ai.chalk.protos.chalk.expression.v1.IsTrue.Builder, ai.chalk.protos.chalk.expression.v1.IsTrueOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsTrue) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 25;
      onChanged();
      return isTrueBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsFalse, ai.chalk.protos.chalk.expression.v1.IsFalse.Builder, ai.chalk.protos.chalk.expression.v1.IsFalseOrBuilder> isFalseBuilder_;
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     * @return Whether the isFalse field is set.
     */
    @java.lang.Override
    public boolean hasIsFalse() {
      return exprTypeCase_ == 26;
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     * @return The isFalse.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsFalse getIsFalse() {
      if (isFalseBuilder_ == null) {
        if (exprTypeCase_ == 26) {
          return (ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsFalse.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 26) {
          return isFalseBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsFalse.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     */
    public Builder setIsFalse(ai.chalk.protos.chalk.expression.v1.IsFalse value) {
      if (isFalseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isFalseBuilder_.setMessage(value);
      }
      exprTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     */
    public Builder setIsFalse(
        ai.chalk.protos.chalk.expression.v1.IsFalse.Builder builderForValue) {
      if (isFalseBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isFalseBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     */
    public Builder mergeIsFalse(ai.chalk.protos.chalk.expression.v1.IsFalse value) {
      if (isFalseBuilder_ == null) {
        if (exprTypeCase_ == 26 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsFalse.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsFalse.newBuilder((ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 26) {
          isFalseBuilder_.mergeFrom(value);
        } else {
          isFalseBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 26;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     */
    public Builder clearIsFalse() {
      if (isFalseBuilder_ == null) {
        if (exprTypeCase_ == 26) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 26) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isFalseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsFalse.Builder getIsFalseBuilder() {
      return getIsFalseFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsFalseOrBuilder getIsFalseOrBuilder() {
      if ((exprTypeCase_ == 26) && (isFalseBuilder_ != null)) {
        return isFalseBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 26) {
          return (ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsFalse.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsFalse, ai.chalk.protos.chalk.expression.v1.IsFalse.Builder, ai.chalk.protos.chalk.expression.v1.IsFalseOrBuilder> 
        getIsFalseFieldBuilder() {
      if (isFalseBuilder_ == null) {
        if (!(exprTypeCase_ == 26)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsFalse.getDefaultInstance();
        }
        isFalseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsFalse, ai.chalk.protos.chalk.expression.v1.IsFalse.Builder, ai.chalk.protos.chalk.expression.v1.IsFalseOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsFalse) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 26;
      onChanged();
      return isFalseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsUnknown, ai.chalk.protos.chalk.expression.v1.IsUnknown.Builder, ai.chalk.protos.chalk.expression.v1.IsUnknownOrBuilder> isUnknownBuilder_;
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     * @return Whether the isUnknown field is set.
     */
    @java.lang.Override
    public boolean hasIsUnknown() {
      return exprTypeCase_ == 27;
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     * @return The isUnknown.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsUnknown getIsUnknown() {
      if (isUnknownBuilder_ == null) {
        if (exprTypeCase_ == 27) {
          return (ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsUnknown.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 27) {
          return isUnknownBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsUnknown.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     */
    public Builder setIsUnknown(ai.chalk.protos.chalk.expression.v1.IsUnknown value) {
      if (isUnknownBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isUnknownBuilder_.setMessage(value);
      }
      exprTypeCase_ = 27;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     */
    public Builder setIsUnknown(
        ai.chalk.protos.chalk.expression.v1.IsUnknown.Builder builderForValue) {
      if (isUnknownBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isUnknownBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 27;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     */
    public Builder mergeIsUnknown(ai.chalk.protos.chalk.expression.v1.IsUnknown value) {
      if (isUnknownBuilder_ == null) {
        if (exprTypeCase_ == 27 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsUnknown.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsUnknown.newBuilder((ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 27) {
          isUnknownBuilder_.mergeFrom(value);
        } else {
          isUnknownBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 27;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     */
    public Builder clearIsUnknown() {
      if (isUnknownBuilder_ == null) {
        if (exprTypeCase_ == 27) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 27) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isUnknownBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsUnknown.Builder getIsUnknownBuilder() {
      return getIsUnknownFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsUnknownOrBuilder getIsUnknownOrBuilder() {
      if ((exprTypeCase_ == 27) && (isUnknownBuilder_ != null)) {
        return isUnknownBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 27) {
          return (ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsUnknown.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsUnknown, ai.chalk.protos.chalk.expression.v1.IsUnknown.Builder, ai.chalk.protos.chalk.expression.v1.IsUnknownOrBuilder> 
        getIsUnknownFieldBuilder() {
      if (isUnknownBuilder_ == null) {
        if (!(exprTypeCase_ == 27)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsUnknown.getDefaultInstance();
        }
        isUnknownBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsUnknown, ai.chalk.protos.chalk.expression.v1.IsUnknown.Builder, ai.chalk.protos.chalk.expression.v1.IsUnknownOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsUnknown) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 27;
      onChanged();
      return isUnknownBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotTrue, ai.chalk.protos.chalk.expression.v1.IsNotTrue.Builder, ai.chalk.protos.chalk.expression.v1.IsNotTrueOrBuilder> isNotTrueBuilder_;
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     * @return Whether the isNotTrue field is set.
     */
    @java.lang.Override
    public boolean hasIsNotTrue() {
      return exprTypeCase_ == 28;
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     * @return The isNotTrue.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotTrue getIsNotTrue() {
      if (isNotTrueBuilder_ == null) {
        if (exprTypeCase_ == 28) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotTrue.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 28) {
          return isNotTrueBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotTrue.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     */
    public Builder setIsNotTrue(ai.chalk.protos.chalk.expression.v1.IsNotTrue value) {
      if (isNotTrueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isNotTrueBuilder_.setMessage(value);
      }
      exprTypeCase_ = 28;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     */
    public Builder setIsNotTrue(
        ai.chalk.protos.chalk.expression.v1.IsNotTrue.Builder builderForValue) {
      if (isNotTrueBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isNotTrueBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 28;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     */
    public Builder mergeIsNotTrue(ai.chalk.protos.chalk.expression.v1.IsNotTrue value) {
      if (isNotTrueBuilder_ == null) {
        if (exprTypeCase_ == 28 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsNotTrue.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotTrue.newBuilder((ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 28) {
          isNotTrueBuilder_.mergeFrom(value);
        } else {
          isNotTrueBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 28;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     */
    public Builder clearIsNotTrue() {
      if (isNotTrueBuilder_ == null) {
        if (exprTypeCase_ == 28) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 28) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isNotTrueBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsNotTrue.Builder getIsNotTrueBuilder() {
      return getIsNotTrueFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotTrueOrBuilder getIsNotTrueOrBuilder() {
      if ((exprTypeCase_ == 28) && (isNotTrueBuilder_ != null)) {
        return isNotTrueBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 28) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotTrue.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotTrue, ai.chalk.protos.chalk.expression.v1.IsNotTrue.Builder, ai.chalk.protos.chalk.expression.v1.IsNotTrueOrBuilder> 
        getIsNotTrueFieldBuilder() {
      if (isNotTrueBuilder_ == null) {
        if (!(exprTypeCase_ == 28)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotTrue.getDefaultInstance();
        }
        isNotTrueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsNotTrue, ai.chalk.protos.chalk.expression.v1.IsNotTrue.Builder, ai.chalk.protos.chalk.expression.v1.IsNotTrueOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsNotTrue) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 28;
      onChanged();
      return isNotTrueBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotFalse, ai.chalk.protos.chalk.expression.v1.IsNotFalse.Builder, ai.chalk.protos.chalk.expression.v1.IsNotFalseOrBuilder> isNotFalseBuilder_;
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     * @return Whether the isNotFalse field is set.
     */
    @java.lang.Override
    public boolean hasIsNotFalse() {
      return exprTypeCase_ == 29;
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     * @return The isNotFalse.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotFalse getIsNotFalse() {
      if (isNotFalseBuilder_ == null) {
        if (exprTypeCase_ == 29) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotFalse.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 29) {
          return isNotFalseBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotFalse.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     */
    public Builder setIsNotFalse(ai.chalk.protos.chalk.expression.v1.IsNotFalse value) {
      if (isNotFalseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isNotFalseBuilder_.setMessage(value);
      }
      exprTypeCase_ = 29;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     */
    public Builder setIsNotFalse(
        ai.chalk.protos.chalk.expression.v1.IsNotFalse.Builder builderForValue) {
      if (isNotFalseBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isNotFalseBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 29;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     */
    public Builder mergeIsNotFalse(ai.chalk.protos.chalk.expression.v1.IsNotFalse value) {
      if (isNotFalseBuilder_ == null) {
        if (exprTypeCase_ == 29 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsNotFalse.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotFalse.newBuilder((ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 29) {
          isNotFalseBuilder_.mergeFrom(value);
        } else {
          isNotFalseBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 29;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     */
    public Builder clearIsNotFalse() {
      if (isNotFalseBuilder_ == null) {
        if (exprTypeCase_ == 29) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 29) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isNotFalseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsNotFalse.Builder getIsNotFalseBuilder() {
      return getIsNotFalseFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotFalseOrBuilder getIsNotFalseOrBuilder() {
      if ((exprTypeCase_ == 29) && (isNotFalseBuilder_ != null)) {
        return isNotFalseBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 29) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotFalse.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotFalse, ai.chalk.protos.chalk.expression.v1.IsNotFalse.Builder, ai.chalk.protos.chalk.expression.v1.IsNotFalseOrBuilder> 
        getIsNotFalseFieldBuilder() {
      if (isNotFalseBuilder_ == null) {
        if (!(exprTypeCase_ == 29)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotFalse.getDefaultInstance();
        }
        isNotFalseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsNotFalse, ai.chalk.protos.chalk.expression.v1.IsNotFalse.Builder, ai.chalk.protos.chalk.expression.v1.IsNotFalseOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsNotFalse) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 29;
      onChanged();
      return isNotFalseBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotUnknown, ai.chalk.protos.chalk.expression.v1.IsNotUnknown.Builder, ai.chalk.protos.chalk.expression.v1.IsNotUnknownOrBuilder> isNotUnknownBuilder_;
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     * @return Whether the isNotUnknown field is set.
     */
    @java.lang.Override
    public boolean hasIsNotUnknown() {
      return exprTypeCase_ == 30;
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     * @return The isNotUnknown.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotUnknown getIsNotUnknown() {
      if (isNotUnknownBuilder_ == null) {
        if (exprTypeCase_ == 30) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotUnknown.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 30) {
          return isNotUnknownBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotUnknown.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     */
    public Builder setIsNotUnknown(ai.chalk.protos.chalk.expression.v1.IsNotUnknown value) {
      if (isNotUnknownBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        isNotUnknownBuilder_.setMessage(value);
      }
      exprTypeCase_ = 30;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     */
    public Builder setIsNotUnknown(
        ai.chalk.protos.chalk.expression.v1.IsNotUnknown.Builder builderForValue) {
      if (isNotUnknownBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        isNotUnknownBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 30;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     */
    public Builder mergeIsNotUnknown(ai.chalk.protos.chalk.expression.v1.IsNotUnknown value) {
      if (isNotUnknownBuilder_ == null) {
        if (exprTypeCase_ == 30 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.IsNotUnknown.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotUnknown.newBuilder((ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 30) {
          isNotUnknownBuilder_.mergeFrom(value);
        } else {
          isNotUnknownBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 30;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     */
    public Builder clearIsNotUnknown() {
      if (isNotUnknownBuilder_ == null) {
        if (exprTypeCase_ == 30) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 30) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        isNotUnknownBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.IsNotUnknown.Builder getIsNotUnknownBuilder() {
      return getIsNotUnknownFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.IsNotUnknownOrBuilder getIsNotUnknownOrBuilder() {
      if ((exprTypeCase_ == 30) && (isNotUnknownBuilder_ != null)) {
        return isNotUnknownBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 30) {
          return (ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.IsNotUnknown.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.IsNotUnknown, ai.chalk.protos.chalk.expression.v1.IsNotUnknown.Builder, ai.chalk.protos.chalk.expression.v1.IsNotUnknownOrBuilder> 
        getIsNotUnknownFieldBuilder() {
      if (isNotUnknownBuilder_ == null) {
        if (!(exprTypeCase_ == 30)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.IsNotUnknown.getDefaultInstance();
        }
        isNotUnknownBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.IsNotUnknown, ai.chalk.protos.chalk.expression.v1.IsNotUnknown.Builder, ai.chalk.protos.chalk.expression.v1.IsNotUnknownOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.IsNotUnknown) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 30;
      onChanged();
      return isNotUnknownBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.LikeNode, ai.chalk.protos.chalk.expression.v1.LikeNode.Builder, ai.chalk.protos.chalk.expression.v1.LikeNodeOrBuilder> likeBuilder_;
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     * @return Whether the like field is set.
     */
    @java.lang.Override
    public boolean hasLike() {
      return exprTypeCase_ == 31;
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     * @return The like.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.LikeNode getLike() {
      if (likeBuilder_ == null) {
        if (exprTypeCase_ == 31) {
          return (ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.LikeNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 31) {
          return likeBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.LikeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     */
    public Builder setLike(ai.chalk.protos.chalk.expression.v1.LikeNode value) {
      if (likeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        likeBuilder_.setMessage(value);
      }
      exprTypeCase_ = 31;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     */
    public Builder setLike(
        ai.chalk.protos.chalk.expression.v1.LikeNode.Builder builderForValue) {
      if (likeBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        likeBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 31;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     */
    public Builder mergeLike(ai.chalk.protos.chalk.expression.v1.LikeNode value) {
      if (likeBuilder_ == null) {
        if (exprTypeCase_ == 31 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.LikeNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.LikeNode.newBuilder((ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 31) {
          likeBuilder_.mergeFrom(value);
        } else {
          likeBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 31;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     */
    public Builder clearLike() {
      if (likeBuilder_ == null) {
        if (exprTypeCase_ == 31) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 31) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        likeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.LikeNode.Builder getLikeBuilder() {
      return getLikeFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.LikeNodeOrBuilder getLikeOrBuilder() {
      if ((exprTypeCase_ == 31) && (likeBuilder_ != null)) {
        return likeBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 31) {
          return (ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.LikeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.LikeNode, ai.chalk.protos.chalk.expression.v1.LikeNode.Builder, ai.chalk.protos.chalk.expression.v1.LikeNodeOrBuilder> 
        getLikeFieldBuilder() {
      if (likeBuilder_ == null) {
        if (!(exprTypeCase_ == 31)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.LikeNode.getDefaultInstance();
        }
        likeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.LikeNode, ai.chalk.protos.chalk.expression.v1.LikeNode.Builder, ai.chalk.protos.chalk.expression.v1.LikeNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.LikeNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 31;
      onChanged();
      return likeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.ILikeNode, ai.chalk.protos.chalk.expression.v1.ILikeNode.Builder, ai.chalk.protos.chalk.expression.v1.ILikeNodeOrBuilder> ilikeBuilder_;
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     * @return Whether the ilike field is set.
     */
    @java.lang.Override
    public boolean hasIlike() {
      return exprTypeCase_ == 32;
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     * @return The ilike.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.ILikeNode getIlike() {
      if (ilikeBuilder_ == null) {
        if (exprTypeCase_ == 32) {
          return (ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.ILikeNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 32) {
          return ilikeBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.ILikeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     */
    public Builder setIlike(ai.chalk.protos.chalk.expression.v1.ILikeNode value) {
      if (ilikeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        ilikeBuilder_.setMessage(value);
      }
      exprTypeCase_ = 32;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     */
    public Builder setIlike(
        ai.chalk.protos.chalk.expression.v1.ILikeNode.Builder builderForValue) {
      if (ilikeBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        ilikeBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 32;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     */
    public Builder mergeIlike(ai.chalk.protos.chalk.expression.v1.ILikeNode value) {
      if (ilikeBuilder_ == null) {
        if (exprTypeCase_ == 32 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.ILikeNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.ILikeNode.newBuilder((ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 32) {
          ilikeBuilder_.mergeFrom(value);
        } else {
          ilikeBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 32;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     */
    public Builder clearIlike() {
      if (ilikeBuilder_ == null) {
        if (exprTypeCase_ == 32) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 32) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        ilikeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.ILikeNode.Builder getIlikeBuilder() {
      return getIlikeFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.ILikeNodeOrBuilder getIlikeOrBuilder() {
      if ((exprTypeCase_ == 32) && (ilikeBuilder_ != null)) {
        return ilikeBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 32) {
          return (ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.ILikeNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.ILikeNode, ai.chalk.protos.chalk.expression.v1.ILikeNode.Builder, ai.chalk.protos.chalk.expression.v1.ILikeNodeOrBuilder> 
        getIlikeFieldBuilder() {
      if (ilikeBuilder_ == null) {
        if (!(exprTypeCase_ == 32)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.ILikeNode.getDefaultInstance();
        }
        ilikeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.ILikeNode, ai.chalk.protos.chalk.expression.v1.ILikeNode.Builder, ai.chalk.protos.chalk.expression.v1.ILikeNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.ILikeNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 32;
      onChanged();
      return ilikeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.SimilarToNode, ai.chalk.protos.chalk.expression.v1.SimilarToNode.Builder, ai.chalk.protos.chalk.expression.v1.SimilarToNodeOrBuilder> similarToBuilder_;
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     * @return Whether the similarTo field is set.
     */
    @java.lang.Override
    public boolean hasSimilarTo() {
      return exprTypeCase_ == 33;
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     * @return The similarTo.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.SimilarToNode getSimilarTo() {
      if (similarToBuilder_ == null) {
        if (exprTypeCase_ == 33) {
          return (ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.SimilarToNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 33) {
          return similarToBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.SimilarToNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     */
    public Builder setSimilarTo(ai.chalk.protos.chalk.expression.v1.SimilarToNode value) {
      if (similarToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        similarToBuilder_.setMessage(value);
      }
      exprTypeCase_ = 33;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     */
    public Builder setSimilarTo(
        ai.chalk.protos.chalk.expression.v1.SimilarToNode.Builder builderForValue) {
      if (similarToBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        similarToBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 33;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     */
    public Builder mergeSimilarTo(ai.chalk.protos.chalk.expression.v1.SimilarToNode value) {
      if (similarToBuilder_ == null) {
        if (exprTypeCase_ == 33 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.SimilarToNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.SimilarToNode.newBuilder((ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 33) {
          similarToBuilder_.mergeFrom(value);
        } else {
          similarToBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 33;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     */
    public Builder clearSimilarTo() {
      if (similarToBuilder_ == null) {
        if (exprTypeCase_ == 33) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 33) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        similarToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.SimilarToNode.Builder getSimilarToBuilder() {
      return getSimilarToFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.SimilarToNodeOrBuilder getSimilarToOrBuilder() {
      if ((exprTypeCase_ == 33) && (similarToBuilder_ != null)) {
        return similarToBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 33) {
          return (ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.SimilarToNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.SimilarToNode, ai.chalk.protos.chalk.expression.v1.SimilarToNode.Builder, ai.chalk.protos.chalk.expression.v1.SimilarToNodeOrBuilder> 
        getSimilarToFieldBuilder() {
      if (similarToBuilder_ == null) {
        if (!(exprTypeCase_ == 33)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.SimilarToNode.getDefaultInstance();
        }
        similarToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.SimilarToNode, ai.chalk.protos.chalk.expression.v1.SimilarToNode.Builder, ai.chalk.protos.chalk.expression.v1.SimilarToNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.SimilarToNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 33;
      onChanged();
      return similarToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.PlaceholderNode, ai.chalk.protos.chalk.expression.v1.PlaceholderNode.Builder, ai.chalk.protos.chalk.expression.v1.PlaceholderNodeOrBuilder> placeholderBuilder_;
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     * @return Whether the placeholder field is set.
     */
    @java.lang.Override
    public boolean hasPlaceholder() {
      return exprTypeCase_ == 34;
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     * @return The placeholder.
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.PlaceholderNode getPlaceholder() {
      if (placeholderBuilder_ == null) {
        if (exprTypeCase_ == 34) {
          return (ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.PlaceholderNode.getDefaultInstance();
      } else {
        if (exprTypeCase_ == 34) {
          return placeholderBuilder_.getMessage();
        }
        return ai.chalk.protos.chalk.expression.v1.PlaceholderNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     */
    public Builder setPlaceholder(ai.chalk.protos.chalk.expression.v1.PlaceholderNode value) {
      if (placeholderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        exprType_ = value;
        onChanged();
      } else {
        placeholderBuilder_.setMessage(value);
      }
      exprTypeCase_ = 34;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     */
    public Builder setPlaceholder(
        ai.chalk.protos.chalk.expression.v1.PlaceholderNode.Builder builderForValue) {
      if (placeholderBuilder_ == null) {
        exprType_ = builderForValue.build();
        onChanged();
      } else {
        placeholderBuilder_.setMessage(builderForValue.build());
      }
      exprTypeCase_ = 34;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     */
    public Builder mergePlaceholder(ai.chalk.protos.chalk.expression.v1.PlaceholderNode value) {
      if (placeholderBuilder_ == null) {
        if (exprTypeCase_ == 34 &&
            exprType_ != ai.chalk.protos.chalk.expression.v1.PlaceholderNode.getDefaultInstance()) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.PlaceholderNode.newBuilder((ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_)
              .mergeFrom(value).buildPartial();
        } else {
          exprType_ = value;
        }
        onChanged();
      } else {
        if (exprTypeCase_ == 34) {
          placeholderBuilder_.mergeFrom(value);
        } else {
          placeholderBuilder_.setMessage(value);
        }
      }
      exprTypeCase_ = 34;
      return this;
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     */
    public Builder clearPlaceholder() {
      if (placeholderBuilder_ == null) {
        if (exprTypeCase_ == 34) {
          exprTypeCase_ = 0;
          exprType_ = null;
          onChanged();
        }
      } else {
        if (exprTypeCase_ == 34) {
          exprTypeCase_ = 0;
          exprType_ = null;
        }
        placeholderBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.PlaceholderNode.Builder getPlaceholderBuilder() {
      return getPlaceholderFieldBuilder().getBuilder();
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     */
    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.PlaceholderNodeOrBuilder getPlaceholderOrBuilder() {
      if ((exprTypeCase_ == 34) && (placeholderBuilder_ != null)) {
        return placeholderBuilder_.getMessageOrBuilder();
      } else {
        if (exprTypeCase_ == 34) {
          return (ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_;
        }
        return ai.chalk.protos.chalk.expression.v1.PlaceholderNode.getDefaultInstance();
      }
    }
    /**
     * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ai.chalk.protos.chalk.expression.v1.PlaceholderNode, ai.chalk.protos.chalk.expression.v1.PlaceholderNode.Builder, ai.chalk.protos.chalk.expression.v1.PlaceholderNodeOrBuilder> 
        getPlaceholderFieldBuilder() {
      if (placeholderBuilder_ == null) {
        if (!(exprTypeCase_ == 34)) {
          exprType_ = ai.chalk.protos.chalk.expression.v1.PlaceholderNode.getDefaultInstance();
        }
        placeholderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ai.chalk.protos.chalk.expression.v1.PlaceholderNode, ai.chalk.protos.chalk.expression.v1.PlaceholderNode.Builder, ai.chalk.protos.chalk.expression.v1.PlaceholderNodeOrBuilder>(
                (ai.chalk.protos.chalk.expression.v1.PlaceholderNode) exprType_,
                getParentForChildren(),
                isClean());
        exprType_ = null;
      }
      exprTypeCase_ = 34;
      onChanged();
      return placeholderBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:chalk.expression.v1.LogicalExprNode)
  }

  // @@protoc_insertion_point(class_scope:chalk.expression.v1.LogicalExprNode)
  private static final ai.chalk.protos.chalk.expression.v1.LogicalExprNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.chalk.protos.chalk.expression.v1.LogicalExprNode();
  }

  public static ai.chalk.protos.chalk.expression.v1.LogicalExprNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LogicalExprNode>
      PARSER = new com.google.protobuf.AbstractParser<LogicalExprNode>() {
    @java.lang.Override
    public LogicalExprNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<LogicalExprNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LogicalExprNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.LogicalExprNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

