// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/expression/v1/expression.proto

// Protobuf Java Version: 3.25.3
package ai.chalk.protos.chalk.expression.v1;

/**
 * Protobuf enum {@code chalk.expression.v1.ScalarFunction}
 */
public enum ScalarFunction
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SCALAR_FUNCTION_UNSPECIFIED = 0;</code>
   */
  SCALAR_FUNCTION_UNSPECIFIED(0),
  /**
   * <code>SCALAR_FUNCTION_ABS = 1;</code>
   */
  SCALAR_FUNCTION_ABS(1),
  /**
   * <code>SCALAR_FUNCTION_ACOS = 2;</code>
   */
  SCALAR_FUNCTION_ACOS(2),
  /**
   * <code>SCALAR_FUNCTION_ASIN = 3;</code>
   */
  SCALAR_FUNCTION_ASIN(3),
  /**
   * <code>SCALAR_FUNCTION_ATAN = 4;</code>
   */
  SCALAR_FUNCTION_ATAN(4),
  /**
   * <code>SCALAR_FUNCTION_ASCII = 5;</code>
   */
  SCALAR_FUNCTION_ASCII(5),
  /**
   * <code>SCALAR_FUNCTION_CEIL = 6;</code>
   */
  SCALAR_FUNCTION_CEIL(6),
  /**
   * <code>SCALAR_FUNCTION_COS = 7;</code>
   */
  SCALAR_FUNCTION_COS(7),
  /**
   * <code>SCALAR_FUNCTION_DIGEST = 8;</code>
   */
  SCALAR_FUNCTION_DIGEST(8),
  /**
   * <code>SCALAR_FUNCTION_EXP = 9;</code>
   */
  SCALAR_FUNCTION_EXP(9),
  /**
   * <code>SCALAR_FUNCTION_FLOOR = 10;</code>
   */
  SCALAR_FUNCTION_FLOOR(10),
  /**
   * <code>SCALAR_FUNCTION_LN = 11;</code>
   */
  SCALAR_FUNCTION_LN(11),
  /**
   * <code>SCALAR_FUNCTION_LOG = 12;</code>
   */
  SCALAR_FUNCTION_LOG(12),
  /**
   * <code>SCALAR_FUNCTION_LOG10 = 13;</code>
   */
  SCALAR_FUNCTION_LOG10(13),
  /**
   * <code>SCALAR_FUNCTION_LOG2 = 14;</code>
   */
  SCALAR_FUNCTION_LOG2(14),
  /**
   * <code>SCALAR_FUNCTION_ROUND = 15;</code>
   */
  SCALAR_FUNCTION_ROUND(15),
  /**
   * <code>SCALAR_FUNCTION_SIGNUM = 16;</code>
   */
  SCALAR_FUNCTION_SIGNUM(16),
  /**
   * <code>SCALAR_FUNCTION_SIN = 17;</code>
   */
  SCALAR_FUNCTION_SIN(17),
  /**
   * <code>SCALAR_FUNCTION_SQRT = 18;</code>
   */
  SCALAR_FUNCTION_SQRT(18),
  /**
   * <code>SCALAR_FUNCTION_TAN = 19;</code>
   */
  SCALAR_FUNCTION_TAN(19),
  /**
   * <code>SCALAR_FUNCTION_TRUNC = 20;</code>
   */
  SCALAR_FUNCTION_TRUNC(20),
  /**
   * <code>SCALAR_FUNCTION_ARRAY = 21;</code>
   */
  SCALAR_FUNCTION_ARRAY(21),
  /**
   * <code>SCALAR_FUNCTION_REGEXP_MATCH = 22;</code>
   */
  SCALAR_FUNCTION_REGEXP_MATCH(22),
  /**
   * <code>SCALAR_FUNCTION_BIT_LENGTH = 23;</code>
   */
  SCALAR_FUNCTION_BIT_LENGTH(23),
  /**
   * <code>SCALAR_FUNCTION_BTRIM = 24;</code>
   */
  SCALAR_FUNCTION_BTRIM(24),
  /**
   * <code>SCALAR_FUNCTION_CHARACTER_LENGTH = 25;</code>
   */
  SCALAR_FUNCTION_CHARACTER_LENGTH(25),
  /**
   * <code>SCALAR_FUNCTION_CHR = 26;</code>
   */
  SCALAR_FUNCTION_CHR(26),
  /**
   * <code>SCALAR_FUNCTION_CONCAT = 27;</code>
   */
  SCALAR_FUNCTION_CONCAT(27),
  /**
   * <code>SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR = 28;</code>
   */
  SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR(28),
  /**
   * <code>SCALAR_FUNCTION_DATE_PART = 29;</code>
   */
  SCALAR_FUNCTION_DATE_PART(29),
  /**
   * <code>SCALAR_FUNCTION_DATE_TRUNC = 30;</code>
   */
  SCALAR_FUNCTION_DATE_TRUNC(30),
  /**
   * <code>SCALAR_FUNCTION_INIT_CAP = 31;</code>
   */
  SCALAR_FUNCTION_INIT_CAP(31),
  /**
   * <code>SCALAR_FUNCTION_LEFT = 32;</code>
   */
  SCALAR_FUNCTION_LEFT(32),
  /**
   * <code>SCALAR_FUNCTION_LPAD = 33;</code>
   */
  SCALAR_FUNCTION_LPAD(33),
  /**
   * <code>SCALAR_FUNCTION_LOWER = 34;</code>
   */
  SCALAR_FUNCTION_LOWER(34),
  /**
   * <code>SCALAR_FUNCTION_LTRIM = 35;</code>
   */
  SCALAR_FUNCTION_LTRIM(35),
  /**
   * <code>SCALAR_FUNCTION_MD5 = 36;</code>
   */
  SCALAR_FUNCTION_MD5(36),
  /**
   * <code>SCALAR_FUNCTION_NULL_IF = 37;</code>
   */
  SCALAR_FUNCTION_NULL_IF(37),
  /**
   * <code>SCALAR_FUNCTION_OCTET_LENGTH = 38;</code>
   */
  SCALAR_FUNCTION_OCTET_LENGTH(38),
  /**
   * <code>SCALAR_FUNCTION_RANDOM = 39;</code>
   */
  SCALAR_FUNCTION_RANDOM(39),
  /**
   * <code>SCALAR_FUNCTION_REGEXP_REPLACE = 40;</code>
   */
  SCALAR_FUNCTION_REGEXP_REPLACE(40),
  /**
   * <code>SCALAR_FUNCTION_REPEAT = 41;</code>
   */
  SCALAR_FUNCTION_REPEAT(41),
  /**
   * <code>SCALAR_FUNCTION_REPLACE = 42;</code>
   */
  SCALAR_FUNCTION_REPLACE(42),
  /**
   * <code>SCALAR_FUNCTION_REVERSE = 43;</code>
   */
  SCALAR_FUNCTION_REVERSE(43),
  /**
   * <code>SCALAR_FUNCTION_RIGHT = 44;</code>
   */
  SCALAR_FUNCTION_RIGHT(44),
  /**
   * <code>SCALAR_FUNCTION_RPAD = 45;</code>
   */
  SCALAR_FUNCTION_RPAD(45),
  /**
   * <code>SCALAR_FUNCTION_RTRIM = 46;</code>
   */
  SCALAR_FUNCTION_RTRIM(46),
  /**
   * <code>SCALAR_FUNCTION_SHA224 = 47;</code>
   */
  SCALAR_FUNCTION_SHA224(47),
  /**
   * <code>SCALAR_FUNCTION_SHA256 = 48;</code>
   */
  SCALAR_FUNCTION_SHA256(48),
  /**
   * <code>SCALAR_FUNCTION_SHA384 = 49;</code>
   */
  SCALAR_FUNCTION_SHA384(49),
  /**
   * <code>SCALAR_FUNCTION_SHA512 = 50;</code>
   */
  SCALAR_FUNCTION_SHA512(50),
  /**
   * <code>SCALAR_FUNCTION_SPLIT_PART = 51;</code>
   */
  SCALAR_FUNCTION_SPLIT_PART(51),
  /**
   * <code>SCALAR_FUNCTION_STARTS_WITH = 52;</code>
   */
  SCALAR_FUNCTION_STARTS_WITH(52),
  /**
   * <code>SCALAR_FUNCTION_STRPOS = 53;</code>
   */
  SCALAR_FUNCTION_STRPOS(53),
  /**
   * <code>SCALAR_FUNCTION_SUBSTR = 54;</code>
   */
  SCALAR_FUNCTION_SUBSTR(54),
  /**
   * <code>SCALAR_FUNCTION_TO_HEX = 55;</code>
   */
  SCALAR_FUNCTION_TO_HEX(55),
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP = 56;</code>
   */
  SCALAR_FUNCTION_TO_TIMESTAMP(56),
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS = 57;</code>
   */
  SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS(57),
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_MICROS = 58;</code>
   */
  SCALAR_FUNCTION_TO_TIMESTAMP_MICROS(58),
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS = 59;</code>
   */
  SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS(59),
  /**
   * <code>SCALAR_FUNCTION_NOW = 60;</code>
   */
  SCALAR_FUNCTION_NOW(60),
  /**
   * <code>SCALAR_FUNCTION_TRANSLATE = 61;</code>
   */
  SCALAR_FUNCTION_TRANSLATE(61),
  /**
   * <code>SCALAR_FUNCTION_TRIM = 62;</code>
   */
  SCALAR_FUNCTION_TRIM(62),
  /**
   * <code>SCALAR_FUNCTION_UPPER = 63;</code>
   */
  SCALAR_FUNCTION_UPPER(63),
  /**
   * <code>SCALAR_FUNCTION_COALESCE = 64;</code>
   */
  SCALAR_FUNCTION_COALESCE(64),
  /**
   * <code>SCALAR_FUNCTION_POWER = 65;</code>
   */
  SCALAR_FUNCTION_POWER(65),
  /**
   * <code>SCALAR_FUNCTION_STRUCT_FUN = 66;</code>
   */
  SCALAR_FUNCTION_STRUCT_FUN(66),
  /**
   * <code>SCALAR_FUNCTION_FROM_UNIXTIME = 67;</code>
   */
  SCALAR_FUNCTION_FROM_UNIXTIME(67),
  /**
   * <code>SCALAR_FUNCTION_ATAN2 = 68;</code>
   */
  SCALAR_FUNCTION_ATAN2(68),
  /**
   * <code>SCALAR_FUNCTION_DATE_BIN = 69;</code>
   */
  SCALAR_FUNCTION_DATE_BIN(69),
  /**
   * <code>SCALAR_FUNCTION_ARROW_TYPEOF = 70;</code>
   */
  SCALAR_FUNCTION_ARROW_TYPEOF(70),
  /**
   * <code>SCALAR_FUNCTION_CURRENT_DATE = 71;</code>
   */
  SCALAR_FUNCTION_CURRENT_DATE(71),
  /**
   * <code>SCALAR_FUNCTION_CURRENT_TIME = 72;</code>
   */
  SCALAR_FUNCTION_CURRENT_TIME(72),
  /**
   * <code>SCALAR_FUNCTION_UUID = 73;</code>
   */
  SCALAR_FUNCTION_UUID(73),
  /**
   * <code>SCALAR_FUNCTION_CBRT = 74;</code>
   */
  SCALAR_FUNCTION_CBRT(74),
  /**
   * <code>SCALAR_FUNCTION_ACOSH = 75;</code>
   */
  SCALAR_FUNCTION_ACOSH(75),
  /**
   * <code>SCALAR_FUNCTION_ASINH = 76;</code>
   */
  SCALAR_FUNCTION_ASINH(76),
  /**
   * <code>SCALAR_FUNCTION_ATANH = 77;</code>
   */
  SCALAR_FUNCTION_ATANH(77),
  /**
   * <code>SCALAR_FUNCTION_SINH = 78;</code>
   */
  SCALAR_FUNCTION_SINH(78),
  /**
   * <code>SCALAR_FUNCTION_COSH = 79;</code>
   */
  SCALAR_FUNCTION_COSH(79),
  /**
   * <code>SCALAR_FUNCTION_TANH = 80;</code>
   */
  SCALAR_FUNCTION_TANH(80),
  /**
   * <code>SCALAR_FUNCTION_PI = 81;</code>
   */
  SCALAR_FUNCTION_PI(81),
  /**
   * <code>SCALAR_FUNCTION_DEGREES = 82;</code>
   */
  SCALAR_FUNCTION_DEGREES(82),
  /**
   * <code>SCALAR_FUNCTION_RADIANS = 83;</code>
   */
  SCALAR_FUNCTION_RADIANS(83),
  /**
   * <code>SCALAR_FUNCTION_FACTORIAL = 84;</code>
   */
  SCALAR_FUNCTION_FACTORIAL(84),
  /**
   * <code>SCALAR_FUNCTION_LCM = 85;</code>
   */
  SCALAR_FUNCTION_LCM(85),
  /**
   * <code>SCALAR_FUNCTION_GCD = 86;</code>
   */
  SCALAR_FUNCTION_GCD(86),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_APPEND = 87;</code>
   */
  SCALAR_FUNCTION_ARRAY_APPEND(87),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_CONCAT = 88;</code>
   */
  SCALAR_FUNCTION_ARRAY_CONCAT(88),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_DIMS = 89;</code>
   */
  SCALAR_FUNCTION_ARRAY_DIMS(89),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPEAT = 90;</code>
   */
  SCALAR_FUNCTION_ARRAY_REPEAT(90),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_LENGTH = 91;</code>
   */
  SCALAR_FUNCTION_ARRAY_LENGTH(91),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_NDIMS = 92;</code>
   */
  SCALAR_FUNCTION_ARRAY_NDIMS(92),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POSITION = 93;</code>
   */
  SCALAR_FUNCTION_ARRAY_POSITION(93),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POSITIONS = 94;</code>
   */
  SCALAR_FUNCTION_ARRAY_POSITIONS(94),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_PREPEND = 95;</code>
   */
  SCALAR_FUNCTION_ARRAY_PREPEND(95),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REMOVE = 96;</code>
   */
  SCALAR_FUNCTION_ARRAY_REMOVE(96),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPLACE = 97;</code>
   */
  SCALAR_FUNCTION_ARRAY_REPLACE(97),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_TO_STRING = 98;</code>
   */
  SCALAR_FUNCTION_ARRAY_TO_STRING(98),
  /**
   * <code>SCALAR_FUNCTION_CARDINALITY = 99;</code>
   */
  SCALAR_FUNCTION_CARDINALITY(99),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_ELEMENT = 100;</code>
   */
  SCALAR_FUNCTION_ARRAY_ELEMENT(100),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_SLICE = 101;</code>
   */
  SCALAR_FUNCTION_ARRAY_SLICE(101),
  /**
   * <code>SCALAR_FUNCTION_ENCODE = 102;</code>
   */
  SCALAR_FUNCTION_ENCODE(102),
  /**
   * <code>SCALAR_FUNCTION_DECODE = 103;</code>
   */
  SCALAR_FUNCTION_DECODE(103),
  /**
   * <code>SCALAR_FUNCTION_COT = 104;</code>
   */
  SCALAR_FUNCTION_COT(104),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_HAS = 105;</code>
   */
  SCALAR_FUNCTION_ARRAY_HAS(105),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_HAS_ANY = 106;</code>
   */
  SCALAR_FUNCTION_ARRAY_HAS_ANY(106),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_HAS_ALL = 107;</code>
   */
  SCALAR_FUNCTION_ARRAY_HAS_ALL(107),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REMOVE_N = 108;</code>
   */
  SCALAR_FUNCTION_ARRAY_REMOVE_N(108),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPLACE_N = 109;</code>
   */
  SCALAR_FUNCTION_ARRAY_REPLACE_N(109),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REMOVE_ALL = 110;</code>
   */
  SCALAR_FUNCTION_ARRAY_REMOVE_ALL(110),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPLACE_ALL = 111;</code>
   */
  SCALAR_FUNCTION_ARRAY_REPLACE_ALL(111),
  /**
   * <code>SCALAR_FUNCTION_NANVL = 112;</code>
   */
  SCALAR_FUNCTION_NANVL(112),
  /**
   * <code>SCALAR_FUNCTION_FLATTEN = 113;</code>
   */
  SCALAR_FUNCTION_FLATTEN(113),
  /**
   * <code>SCALAR_FUNCTION_ISNAN = 114;</code>
   */
  SCALAR_FUNCTION_ISNAN(114),
  /**
   * <code>SCALAR_FUNCTION_ISZERO = 115;</code>
   */
  SCALAR_FUNCTION_ISZERO(115),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_EMPTY = 116;</code>
   */
  SCALAR_FUNCTION_ARRAY_EMPTY(116),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POP_BACK = 117;</code>
   */
  SCALAR_FUNCTION_ARRAY_POP_BACK(117),
  /**
   * <code>SCALAR_FUNCTION_STRING_TO_ARRAY = 118;</code>
   */
  SCALAR_FUNCTION_STRING_TO_ARRAY(118),
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_NANOS = 119;</code>
   */
  SCALAR_FUNCTION_TO_TIMESTAMP_NANOS(119),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_INTERSECT = 120;</code>
   */
  SCALAR_FUNCTION_ARRAY_INTERSECT(120),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_UNION = 121;</code>
   */
  SCALAR_FUNCTION_ARRAY_UNION(121),
  /**
   * <code>SCALAR_FUNCTION_OVER_LAY = 122;</code>
   */
  SCALAR_FUNCTION_OVER_LAY(122),
  /**
   * <code>SCALAR_FUNCTION_RANGE = 123;</code>
   */
  SCALAR_FUNCTION_RANGE(123),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_EXCEPT = 124;</code>
   */
  SCALAR_FUNCTION_ARRAY_EXCEPT(124),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POP_FRONT = 125;</code>
   */
  SCALAR_FUNCTION_ARRAY_POP_FRONT(125),
  /**
   * <code>SCALAR_FUNCTION_LEVENSHTEIN = 126;</code>
   */
  SCALAR_FUNCTION_LEVENSHTEIN(126),
  /**
   * <code>SCALAR_FUNCTION_SUBSTR_INDEX = 127;</code>
   */
  SCALAR_FUNCTION_SUBSTR_INDEX(127),
  /**
   * <code>SCALAR_FUNCTION_FIND_IN_SET = 128;</code>
   */
  SCALAR_FUNCTION_FIND_IN_SET(128),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_SORT = 129;</code>
   */
  SCALAR_FUNCTION_ARRAY_SORT(129),
  /**
   * <code>SCALAR_FUNCTION_ARRAY_DISTINCT = 130;</code>
   */
  SCALAR_FUNCTION_ARRAY_DISTINCT(130),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SCALAR_FUNCTION_UNSPECIFIED = 0;</code>
   */
  public static final int SCALAR_FUNCTION_UNSPECIFIED_VALUE = 0;
  /**
   * <code>SCALAR_FUNCTION_ABS = 1;</code>
   */
  public static final int SCALAR_FUNCTION_ABS_VALUE = 1;
  /**
   * <code>SCALAR_FUNCTION_ACOS = 2;</code>
   */
  public static final int SCALAR_FUNCTION_ACOS_VALUE = 2;
  /**
   * <code>SCALAR_FUNCTION_ASIN = 3;</code>
   */
  public static final int SCALAR_FUNCTION_ASIN_VALUE = 3;
  /**
   * <code>SCALAR_FUNCTION_ATAN = 4;</code>
   */
  public static final int SCALAR_FUNCTION_ATAN_VALUE = 4;
  /**
   * <code>SCALAR_FUNCTION_ASCII = 5;</code>
   */
  public static final int SCALAR_FUNCTION_ASCII_VALUE = 5;
  /**
   * <code>SCALAR_FUNCTION_CEIL = 6;</code>
   */
  public static final int SCALAR_FUNCTION_CEIL_VALUE = 6;
  /**
   * <code>SCALAR_FUNCTION_COS = 7;</code>
   */
  public static final int SCALAR_FUNCTION_COS_VALUE = 7;
  /**
   * <code>SCALAR_FUNCTION_DIGEST = 8;</code>
   */
  public static final int SCALAR_FUNCTION_DIGEST_VALUE = 8;
  /**
   * <code>SCALAR_FUNCTION_EXP = 9;</code>
   */
  public static final int SCALAR_FUNCTION_EXP_VALUE = 9;
  /**
   * <code>SCALAR_FUNCTION_FLOOR = 10;</code>
   */
  public static final int SCALAR_FUNCTION_FLOOR_VALUE = 10;
  /**
   * <code>SCALAR_FUNCTION_LN = 11;</code>
   */
  public static final int SCALAR_FUNCTION_LN_VALUE = 11;
  /**
   * <code>SCALAR_FUNCTION_LOG = 12;</code>
   */
  public static final int SCALAR_FUNCTION_LOG_VALUE = 12;
  /**
   * <code>SCALAR_FUNCTION_LOG10 = 13;</code>
   */
  public static final int SCALAR_FUNCTION_LOG10_VALUE = 13;
  /**
   * <code>SCALAR_FUNCTION_LOG2 = 14;</code>
   */
  public static final int SCALAR_FUNCTION_LOG2_VALUE = 14;
  /**
   * <code>SCALAR_FUNCTION_ROUND = 15;</code>
   */
  public static final int SCALAR_FUNCTION_ROUND_VALUE = 15;
  /**
   * <code>SCALAR_FUNCTION_SIGNUM = 16;</code>
   */
  public static final int SCALAR_FUNCTION_SIGNUM_VALUE = 16;
  /**
   * <code>SCALAR_FUNCTION_SIN = 17;</code>
   */
  public static final int SCALAR_FUNCTION_SIN_VALUE = 17;
  /**
   * <code>SCALAR_FUNCTION_SQRT = 18;</code>
   */
  public static final int SCALAR_FUNCTION_SQRT_VALUE = 18;
  /**
   * <code>SCALAR_FUNCTION_TAN = 19;</code>
   */
  public static final int SCALAR_FUNCTION_TAN_VALUE = 19;
  /**
   * <code>SCALAR_FUNCTION_TRUNC = 20;</code>
   */
  public static final int SCALAR_FUNCTION_TRUNC_VALUE = 20;
  /**
   * <code>SCALAR_FUNCTION_ARRAY = 21;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_VALUE = 21;
  /**
   * <code>SCALAR_FUNCTION_REGEXP_MATCH = 22;</code>
   */
  public static final int SCALAR_FUNCTION_REGEXP_MATCH_VALUE = 22;
  /**
   * <code>SCALAR_FUNCTION_BIT_LENGTH = 23;</code>
   */
  public static final int SCALAR_FUNCTION_BIT_LENGTH_VALUE = 23;
  /**
   * <code>SCALAR_FUNCTION_BTRIM = 24;</code>
   */
  public static final int SCALAR_FUNCTION_BTRIM_VALUE = 24;
  /**
   * <code>SCALAR_FUNCTION_CHARACTER_LENGTH = 25;</code>
   */
  public static final int SCALAR_FUNCTION_CHARACTER_LENGTH_VALUE = 25;
  /**
   * <code>SCALAR_FUNCTION_CHR = 26;</code>
   */
  public static final int SCALAR_FUNCTION_CHR_VALUE = 26;
  /**
   * <code>SCALAR_FUNCTION_CONCAT = 27;</code>
   */
  public static final int SCALAR_FUNCTION_CONCAT_VALUE = 27;
  /**
   * <code>SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR = 28;</code>
   */
  public static final int SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR_VALUE = 28;
  /**
   * <code>SCALAR_FUNCTION_DATE_PART = 29;</code>
   */
  public static final int SCALAR_FUNCTION_DATE_PART_VALUE = 29;
  /**
   * <code>SCALAR_FUNCTION_DATE_TRUNC = 30;</code>
   */
  public static final int SCALAR_FUNCTION_DATE_TRUNC_VALUE = 30;
  /**
   * <code>SCALAR_FUNCTION_INIT_CAP = 31;</code>
   */
  public static final int SCALAR_FUNCTION_INIT_CAP_VALUE = 31;
  /**
   * <code>SCALAR_FUNCTION_LEFT = 32;</code>
   */
  public static final int SCALAR_FUNCTION_LEFT_VALUE = 32;
  /**
   * <code>SCALAR_FUNCTION_LPAD = 33;</code>
   */
  public static final int SCALAR_FUNCTION_LPAD_VALUE = 33;
  /**
   * <code>SCALAR_FUNCTION_LOWER = 34;</code>
   */
  public static final int SCALAR_FUNCTION_LOWER_VALUE = 34;
  /**
   * <code>SCALAR_FUNCTION_LTRIM = 35;</code>
   */
  public static final int SCALAR_FUNCTION_LTRIM_VALUE = 35;
  /**
   * <code>SCALAR_FUNCTION_MD5 = 36;</code>
   */
  public static final int SCALAR_FUNCTION_MD5_VALUE = 36;
  /**
   * <code>SCALAR_FUNCTION_NULL_IF = 37;</code>
   */
  public static final int SCALAR_FUNCTION_NULL_IF_VALUE = 37;
  /**
   * <code>SCALAR_FUNCTION_OCTET_LENGTH = 38;</code>
   */
  public static final int SCALAR_FUNCTION_OCTET_LENGTH_VALUE = 38;
  /**
   * <code>SCALAR_FUNCTION_RANDOM = 39;</code>
   */
  public static final int SCALAR_FUNCTION_RANDOM_VALUE = 39;
  /**
   * <code>SCALAR_FUNCTION_REGEXP_REPLACE = 40;</code>
   */
  public static final int SCALAR_FUNCTION_REGEXP_REPLACE_VALUE = 40;
  /**
   * <code>SCALAR_FUNCTION_REPEAT = 41;</code>
   */
  public static final int SCALAR_FUNCTION_REPEAT_VALUE = 41;
  /**
   * <code>SCALAR_FUNCTION_REPLACE = 42;</code>
   */
  public static final int SCALAR_FUNCTION_REPLACE_VALUE = 42;
  /**
   * <code>SCALAR_FUNCTION_REVERSE = 43;</code>
   */
  public static final int SCALAR_FUNCTION_REVERSE_VALUE = 43;
  /**
   * <code>SCALAR_FUNCTION_RIGHT = 44;</code>
   */
  public static final int SCALAR_FUNCTION_RIGHT_VALUE = 44;
  /**
   * <code>SCALAR_FUNCTION_RPAD = 45;</code>
   */
  public static final int SCALAR_FUNCTION_RPAD_VALUE = 45;
  /**
   * <code>SCALAR_FUNCTION_RTRIM = 46;</code>
   */
  public static final int SCALAR_FUNCTION_RTRIM_VALUE = 46;
  /**
   * <code>SCALAR_FUNCTION_SHA224 = 47;</code>
   */
  public static final int SCALAR_FUNCTION_SHA224_VALUE = 47;
  /**
   * <code>SCALAR_FUNCTION_SHA256 = 48;</code>
   */
  public static final int SCALAR_FUNCTION_SHA256_VALUE = 48;
  /**
   * <code>SCALAR_FUNCTION_SHA384 = 49;</code>
   */
  public static final int SCALAR_FUNCTION_SHA384_VALUE = 49;
  /**
   * <code>SCALAR_FUNCTION_SHA512 = 50;</code>
   */
  public static final int SCALAR_FUNCTION_SHA512_VALUE = 50;
  /**
   * <code>SCALAR_FUNCTION_SPLIT_PART = 51;</code>
   */
  public static final int SCALAR_FUNCTION_SPLIT_PART_VALUE = 51;
  /**
   * <code>SCALAR_FUNCTION_STARTS_WITH = 52;</code>
   */
  public static final int SCALAR_FUNCTION_STARTS_WITH_VALUE = 52;
  /**
   * <code>SCALAR_FUNCTION_STRPOS = 53;</code>
   */
  public static final int SCALAR_FUNCTION_STRPOS_VALUE = 53;
  /**
   * <code>SCALAR_FUNCTION_SUBSTR = 54;</code>
   */
  public static final int SCALAR_FUNCTION_SUBSTR_VALUE = 54;
  /**
   * <code>SCALAR_FUNCTION_TO_HEX = 55;</code>
   */
  public static final int SCALAR_FUNCTION_TO_HEX_VALUE = 55;
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP = 56;</code>
   */
  public static final int SCALAR_FUNCTION_TO_TIMESTAMP_VALUE = 56;
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS = 57;</code>
   */
  public static final int SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS_VALUE = 57;
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_MICROS = 58;</code>
   */
  public static final int SCALAR_FUNCTION_TO_TIMESTAMP_MICROS_VALUE = 58;
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS = 59;</code>
   */
  public static final int SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS_VALUE = 59;
  /**
   * <code>SCALAR_FUNCTION_NOW = 60;</code>
   */
  public static final int SCALAR_FUNCTION_NOW_VALUE = 60;
  /**
   * <code>SCALAR_FUNCTION_TRANSLATE = 61;</code>
   */
  public static final int SCALAR_FUNCTION_TRANSLATE_VALUE = 61;
  /**
   * <code>SCALAR_FUNCTION_TRIM = 62;</code>
   */
  public static final int SCALAR_FUNCTION_TRIM_VALUE = 62;
  /**
   * <code>SCALAR_FUNCTION_UPPER = 63;</code>
   */
  public static final int SCALAR_FUNCTION_UPPER_VALUE = 63;
  /**
   * <code>SCALAR_FUNCTION_COALESCE = 64;</code>
   */
  public static final int SCALAR_FUNCTION_COALESCE_VALUE = 64;
  /**
   * <code>SCALAR_FUNCTION_POWER = 65;</code>
   */
  public static final int SCALAR_FUNCTION_POWER_VALUE = 65;
  /**
   * <code>SCALAR_FUNCTION_STRUCT_FUN = 66;</code>
   */
  public static final int SCALAR_FUNCTION_STRUCT_FUN_VALUE = 66;
  /**
   * <code>SCALAR_FUNCTION_FROM_UNIXTIME = 67;</code>
   */
  public static final int SCALAR_FUNCTION_FROM_UNIXTIME_VALUE = 67;
  /**
   * <code>SCALAR_FUNCTION_ATAN2 = 68;</code>
   */
  public static final int SCALAR_FUNCTION_ATAN2_VALUE = 68;
  /**
   * <code>SCALAR_FUNCTION_DATE_BIN = 69;</code>
   */
  public static final int SCALAR_FUNCTION_DATE_BIN_VALUE = 69;
  /**
   * <code>SCALAR_FUNCTION_ARROW_TYPEOF = 70;</code>
   */
  public static final int SCALAR_FUNCTION_ARROW_TYPEOF_VALUE = 70;
  /**
   * <code>SCALAR_FUNCTION_CURRENT_DATE = 71;</code>
   */
  public static final int SCALAR_FUNCTION_CURRENT_DATE_VALUE = 71;
  /**
   * <code>SCALAR_FUNCTION_CURRENT_TIME = 72;</code>
   */
  public static final int SCALAR_FUNCTION_CURRENT_TIME_VALUE = 72;
  /**
   * <code>SCALAR_FUNCTION_UUID = 73;</code>
   */
  public static final int SCALAR_FUNCTION_UUID_VALUE = 73;
  /**
   * <code>SCALAR_FUNCTION_CBRT = 74;</code>
   */
  public static final int SCALAR_FUNCTION_CBRT_VALUE = 74;
  /**
   * <code>SCALAR_FUNCTION_ACOSH = 75;</code>
   */
  public static final int SCALAR_FUNCTION_ACOSH_VALUE = 75;
  /**
   * <code>SCALAR_FUNCTION_ASINH = 76;</code>
   */
  public static final int SCALAR_FUNCTION_ASINH_VALUE = 76;
  /**
   * <code>SCALAR_FUNCTION_ATANH = 77;</code>
   */
  public static final int SCALAR_FUNCTION_ATANH_VALUE = 77;
  /**
   * <code>SCALAR_FUNCTION_SINH = 78;</code>
   */
  public static final int SCALAR_FUNCTION_SINH_VALUE = 78;
  /**
   * <code>SCALAR_FUNCTION_COSH = 79;</code>
   */
  public static final int SCALAR_FUNCTION_COSH_VALUE = 79;
  /**
   * <code>SCALAR_FUNCTION_TANH = 80;</code>
   */
  public static final int SCALAR_FUNCTION_TANH_VALUE = 80;
  /**
   * <code>SCALAR_FUNCTION_PI = 81;</code>
   */
  public static final int SCALAR_FUNCTION_PI_VALUE = 81;
  /**
   * <code>SCALAR_FUNCTION_DEGREES = 82;</code>
   */
  public static final int SCALAR_FUNCTION_DEGREES_VALUE = 82;
  /**
   * <code>SCALAR_FUNCTION_RADIANS = 83;</code>
   */
  public static final int SCALAR_FUNCTION_RADIANS_VALUE = 83;
  /**
   * <code>SCALAR_FUNCTION_FACTORIAL = 84;</code>
   */
  public static final int SCALAR_FUNCTION_FACTORIAL_VALUE = 84;
  /**
   * <code>SCALAR_FUNCTION_LCM = 85;</code>
   */
  public static final int SCALAR_FUNCTION_LCM_VALUE = 85;
  /**
   * <code>SCALAR_FUNCTION_GCD = 86;</code>
   */
  public static final int SCALAR_FUNCTION_GCD_VALUE = 86;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_APPEND = 87;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_APPEND_VALUE = 87;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_CONCAT = 88;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_CONCAT_VALUE = 88;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_DIMS = 89;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_DIMS_VALUE = 89;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPEAT = 90;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_REPEAT_VALUE = 90;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_LENGTH = 91;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_LENGTH_VALUE = 91;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_NDIMS = 92;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_NDIMS_VALUE = 92;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POSITION = 93;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_POSITION_VALUE = 93;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POSITIONS = 94;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_POSITIONS_VALUE = 94;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_PREPEND = 95;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_PREPEND_VALUE = 95;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REMOVE = 96;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_REMOVE_VALUE = 96;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPLACE = 97;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_REPLACE_VALUE = 97;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_TO_STRING = 98;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_TO_STRING_VALUE = 98;
  /**
   * <code>SCALAR_FUNCTION_CARDINALITY = 99;</code>
   */
  public static final int SCALAR_FUNCTION_CARDINALITY_VALUE = 99;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_ELEMENT = 100;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_ELEMENT_VALUE = 100;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_SLICE = 101;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_SLICE_VALUE = 101;
  /**
   * <code>SCALAR_FUNCTION_ENCODE = 102;</code>
   */
  public static final int SCALAR_FUNCTION_ENCODE_VALUE = 102;
  /**
   * <code>SCALAR_FUNCTION_DECODE = 103;</code>
   */
  public static final int SCALAR_FUNCTION_DECODE_VALUE = 103;
  /**
   * <code>SCALAR_FUNCTION_COT = 104;</code>
   */
  public static final int SCALAR_FUNCTION_COT_VALUE = 104;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_HAS = 105;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_HAS_VALUE = 105;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_HAS_ANY = 106;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_HAS_ANY_VALUE = 106;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_HAS_ALL = 107;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_HAS_ALL_VALUE = 107;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REMOVE_N = 108;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_REMOVE_N_VALUE = 108;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPLACE_N = 109;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_REPLACE_N_VALUE = 109;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REMOVE_ALL = 110;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_REMOVE_ALL_VALUE = 110;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_REPLACE_ALL = 111;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_REPLACE_ALL_VALUE = 111;
  /**
   * <code>SCALAR_FUNCTION_NANVL = 112;</code>
   */
  public static final int SCALAR_FUNCTION_NANVL_VALUE = 112;
  /**
   * <code>SCALAR_FUNCTION_FLATTEN = 113;</code>
   */
  public static final int SCALAR_FUNCTION_FLATTEN_VALUE = 113;
  /**
   * <code>SCALAR_FUNCTION_ISNAN = 114;</code>
   */
  public static final int SCALAR_FUNCTION_ISNAN_VALUE = 114;
  /**
   * <code>SCALAR_FUNCTION_ISZERO = 115;</code>
   */
  public static final int SCALAR_FUNCTION_ISZERO_VALUE = 115;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_EMPTY = 116;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_EMPTY_VALUE = 116;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POP_BACK = 117;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_POP_BACK_VALUE = 117;
  /**
   * <code>SCALAR_FUNCTION_STRING_TO_ARRAY = 118;</code>
   */
  public static final int SCALAR_FUNCTION_STRING_TO_ARRAY_VALUE = 118;
  /**
   * <code>SCALAR_FUNCTION_TO_TIMESTAMP_NANOS = 119;</code>
   */
  public static final int SCALAR_FUNCTION_TO_TIMESTAMP_NANOS_VALUE = 119;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_INTERSECT = 120;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_INTERSECT_VALUE = 120;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_UNION = 121;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_UNION_VALUE = 121;
  /**
   * <code>SCALAR_FUNCTION_OVER_LAY = 122;</code>
   */
  public static final int SCALAR_FUNCTION_OVER_LAY_VALUE = 122;
  /**
   * <code>SCALAR_FUNCTION_RANGE = 123;</code>
   */
  public static final int SCALAR_FUNCTION_RANGE_VALUE = 123;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_EXCEPT = 124;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_EXCEPT_VALUE = 124;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_POP_FRONT = 125;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_POP_FRONT_VALUE = 125;
  /**
   * <code>SCALAR_FUNCTION_LEVENSHTEIN = 126;</code>
   */
  public static final int SCALAR_FUNCTION_LEVENSHTEIN_VALUE = 126;
  /**
   * <code>SCALAR_FUNCTION_SUBSTR_INDEX = 127;</code>
   */
  public static final int SCALAR_FUNCTION_SUBSTR_INDEX_VALUE = 127;
  /**
   * <code>SCALAR_FUNCTION_FIND_IN_SET = 128;</code>
   */
  public static final int SCALAR_FUNCTION_FIND_IN_SET_VALUE = 128;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_SORT = 129;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_SORT_VALUE = 129;
  /**
   * <code>SCALAR_FUNCTION_ARRAY_DISTINCT = 130;</code>
   */
  public static final int SCALAR_FUNCTION_ARRAY_DISTINCT_VALUE = 130;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ScalarFunction valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ScalarFunction forNumber(int value) {
    switch (value) {
      case 0: return SCALAR_FUNCTION_UNSPECIFIED;
      case 1: return SCALAR_FUNCTION_ABS;
      case 2: return SCALAR_FUNCTION_ACOS;
      case 3: return SCALAR_FUNCTION_ASIN;
      case 4: return SCALAR_FUNCTION_ATAN;
      case 5: return SCALAR_FUNCTION_ASCII;
      case 6: return SCALAR_FUNCTION_CEIL;
      case 7: return SCALAR_FUNCTION_COS;
      case 8: return SCALAR_FUNCTION_DIGEST;
      case 9: return SCALAR_FUNCTION_EXP;
      case 10: return SCALAR_FUNCTION_FLOOR;
      case 11: return SCALAR_FUNCTION_LN;
      case 12: return SCALAR_FUNCTION_LOG;
      case 13: return SCALAR_FUNCTION_LOG10;
      case 14: return SCALAR_FUNCTION_LOG2;
      case 15: return SCALAR_FUNCTION_ROUND;
      case 16: return SCALAR_FUNCTION_SIGNUM;
      case 17: return SCALAR_FUNCTION_SIN;
      case 18: return SCALAR_FUNCTION_SQRT;
      case 19: return SCALAR_FUNCTION_TAN;
      case 20: return SCALAR_FUNCTION_TRUNC;
      case 21: return SCALAR_FUNCTION_ARRAY;
      case 22: return SCALAR_FUNCTION_REGEXP_MATCH;
      case 23: return SCALAR_FUNCTION_BIT_LENGTH;
      case 24: return SCALAR_FUNCTION_BTRIM;
      case 25: return SCALAR_FUNCTION_CHARACTER_LENGTH;
      case 26: return SCALAR_FUNCTION_CHR;
      case 27: return SCALAR_FUNCTION_CONCAT;
      case 28: return SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR;
      case 29: return SCALAR_FUNCTION_DATE_PART;
      case 30: return SCALAR_FUNCTION_DATE_TRUNC;
      case 31: return SCALAR_FUNCTION_INIT_CAP;
      case 32: return SCALAR_FUNCTION_LEFT;
      case 33: return SCALAR_FUNCTION_LPAD;
      case 34: return SCALAR_FUNCTION_LOWER;
      case 35: return SCALAR_FUNCTION_LTRIM;
      case 36: return SCALAR_FUNCTION_MD5;
      case 37: return SCALAR_FUNCTION_NULL_IF;
      case 38: return SCALAR_FUNCTION_OCTET_LENGTH;
      case 39: return SCALAR_FUNCTION_RANDOM;
      case 40: return SCALAR_FUNCTION_REGEXP_REPLACE;
      case 41: return SCALAR_FUNCTION_REPEAT;
      case 42: return SCALAR_FUNCTION_REPLACE;
      case 43: return SCALAR_FUNCTION_REVERSE;
      case 44: return SCALAR_FUNCTION_RIGHT;
      case 45: return SCALAR_FUNCTION_RPAD;
      case 46: return SCALAR_FUNCTION_RTRIM;
      case 47: return SCALAR_FUNCTION_SHA224;
      case 48: return SCALAR_FUNCTION_SHA256;
      case 49: return SCALAR_FUNCTION_SHA384;
      case 50: return SCALAR_FUNCTION_SHA512;
      case 51: return SCALAR_FUNCTION_SPLIT_PART;
      case 52: return SCALAR_FUNCTION_STARTS_WITH;
      case 53: return SCALAR_FUNCTION_STRPOS;
      case 54: return SCALAR_FUNCTION_SUBSTR;
      case 55: return SCALAR_FUNCTION_TO_HEX;
      case 56: return SCALAR_FUNCTION_TO_TIMESTAMP;
      case 57: return SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS;
      case 58: return SCALAR_FUNCTION_TO_TIMESTAMP_MICROS;
      case 59: return SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS;
      case 60: return SCALAR_FUNCTION_NOW;
      case 61: return SCALAR_FUNCTION_TRANSLATE;
      case 62: return SCALAR_FUNCTION_TRIM;
      case 63: return SCALAR_FUNCTION_UPPER;
      case 64: return SCALAR_FUNCTION_COALESCE;
      case 65: return SCALAR_FUNCTION_POWER;
      case 66: return SCALAR_FUNCTION_STRUCT_FUN;
      case 67: return SCALAR_FUNCTION_FROM_UNIXTIME;
      case 68: return SCALAR_FUNCTION_ATAN2;
      case 69: return SCALAR_FUNCTION_DATE_BIN;
      case 70: return SCALAR_FUNCTION_ARROW_TYPEOF;
      case 71: return SCALAR_FUNCTION_CURRENT_DATE;
      case 72: return SCALAR_FUNCTION_CURRENT_TIME;
      case 73: return SCALAR_FUNCTION_UUID;
      case 74: return SCALAR_FUNCTION_CBRT;
      case 75: return SCALAR_FUNCTION_ACOSH;
      case 76: return SCALAR_FUNCTION_ASINH;
      case 77: return SCALAR_FUNCTION_ATANH;
      case 78: return SCALAR_FUNCTION_SINH;
      case 79: return SCALAR_FUNCTION_COSH;
      case 80: return SCALAR_FUNCTION_TANH;
      case 81: return SCALAR_FUNCTION_PI;
      case 82: return SCALAR_FUNCTION_DEGREES;
      case 83: return SCALAR_FUNCTION_RADIANS;
      case 84: return SCALAR_FUNCTION_FACTORIAL;
      case 85: return SCALAR_FUNCTION_LCM;
      case 86: return SCALAR_FUNCTION_GCD;
      case 87: return SCALAR_FUNCTION_ARRAY_APPEND;
      case 88: return SCALAR_FUNCTION_ARRAY_CONCAT;
      case 89: return SCALAR_FUNCTION_ARRAY_DIMS;
      case 90: return SCALAR_FUNCTION_ARRAY_REPEAT;
      case 91: return SCALAR_FUNCTION_ARRAY_LENGTH;
      case 92: return SCALAR_FUNCTION_ARRAY_NDIMS;
      case 93: return SCALAR_FUNCTION_ARRAY_POSITION;
      case 94: return SCALAR_FUNCTION_ARRAY_POSITIONS;
      case 95: return SCALAR_FUNCTION_ARRAY_PREPEND;
      case 96: return SCALAR_FUNCTION_ARRAY_REMOVE;
      case 97: return SCALAR_FUNCTION_ARRAY_REPLACE;
      case 98: return SCALAR_FUNCTION_ARRAY_TO_STRING;
      case 99: return SCALAR_FUNCTION_CARDINALITY;
      case 100: return SCALAR_FUNCTION_ARRAY_ELEMENT;
      case 101: return SCALAR_FUNCTION_ARRAY_SLICE;
      case 102: return SCALAR_FUNCTION_ENCODE;
      case 103: return SCALAR_FUNCTION_DECODE;
      case 104: return SCALAR_FUNCTION_COT;
      case 105: return SCALAR_FUNCTION_ARRAY_HAS;
      case 106: return SCALAR_FUNCTION_ARRAY_HAS_ANY;
      case 107: return SCALAR_FUNCTION_ARRAY_HAS_ALL;
      case 108: return SCALAR_FUNCTION_ARRAY_REMOVE_N;
      case 109: return SCALAR_FUNCTION_ARRAY_REPLACE_N;
      case 110: return SCALAR_FUNCTION_ARRAY_REMOVE_ALL;
      case 111: return SCALAR_FUNCTION_ARRAY_REPLACE_ALL;
      case 112: return SCALAR_FUNCTION_NANVL;
      case 113: return SCALAR_FUNCTION_FLATTEN;
      case 114: return SCALAR_FUNCTION_ISNAN;
      case 115: return SCALAR_FUNCTION_ISZERO;
      case 116: return SCALAR_FUNCTION_ARRAY_EMPTY;
      case 117: return SCALAR_FUNCTION_ARRAY_POP_BACK;
      case 118: return SCALAR_FUNCTION_STRING_TO_ARRAY;
      case 119: return SCALAR_FUNCTION_TO_TIMESTAMP_NANOS;
      case 120: return SCALAR_FUNCTION_ARRAY_INTERSECT;
      case 121: return SCALAR_FUNCTION_ARRAY_UNION;
      case 122: return SCALAR_FUNCTION_OVER_LAY;
      case 123: return SCALAR_FUNCTION_RANGE;
      case 124: return SCALAR_FUNCTION_ARRAY_EXCEPT;
      case 125: return SCALAR_FUNCTION_ARRAY_POP_FRONT;
      case 126: return SCALAR_FUNCTION_LEVENSHTEIN;
      case 127: return SCALAR_FUNCTION_SUBSTR_INDEX;
      case 128: return SCALAR_FUNCTION_FIND_IN_SET;
      case 129: return SCALAR_FUNCTION_ARRAY_SORT;
      case 130: return SCALAR_FUNCTION_ARRAY_DISTINCT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ScalarFunction>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ScalarFunction> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ScalarFunction>() {
          public ScalarFunction findValueByNumber(int number) {
            return ScalarFunction.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.expression.v1.ExpressionProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ScalarFunction[] VALUES = values();

  public static ScalarFunction valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ScalarFunction(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:chalk.expression.v1.ScalarFunction)
}

