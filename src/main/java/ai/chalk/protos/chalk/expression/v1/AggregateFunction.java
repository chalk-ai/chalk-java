// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/expression/v1/expression.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.expression.v1;

/**
 * Protobuf enum {@code chalk.expression.v1.AggregateFunction}
 */
public enum AggregateFunction
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>AGGREGATE_FUNCTION_UNSPECIFIED = 0;</code>
   */
  AGGREGATE_FUNCTION_UNSPECIFIED(0),
  /**
   * <code>AGGREGATE_FUNCTION_MIN = 1;</code>
   */
  AGGREGATE_FUNCTION_MIN(1),
  /**
   * <code>AGGREGATE_FUNCTION_MAX = 2;</code>
   */
  AGGREGATE_FUNCTION_MAX(2),
  /**
   * <code>AGGREGATE_FUNCTION_SUM = 3;</code>
   */
  AGGREGATE_FUNCTION_SUM(3),
  /**
   * <code>AGGREGATE_FUNCTION_AVG = 4;</code>
   */
  AGGREGATE_FUNCTION_AVG(4),
  /**
   * <code>AGGREGATE_FUNCTION_COUNT = 5;</code>
   */
  AGGREGATE_FUNCTION_COUNT(5),
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_DISTINCT = 6;</code>
   */
  AGGREGATE_FUNCTION_APPROX_DISTINCT(6),
  /**
   * <code>AGGREGATE_FUNCTION_ARRAY = 7;</code>
   */
  AGGREGATE_FUNCTION_ARRAY(7),
  /**
   * <code>AGGREGATE_FUNCTION_VARIANCE = 8;</code>
   */
  AGGREGATE_FUNCTION_VARIANCE(8),
  /**
   * <code>AGGREGATE_FUNCTION_VARIANCE_POP = 9;</code>
   */
  AGGREGATE_FUNCTION_VARIANCE_POP(9),
  /**
   * <code>AGGREGATE_FUNCTION_COVARIANCE = 10;</code>
   */
  AGGREGATE_FUNCTION_COVARIANCE(10),
  /**
   * <code>AGGREGATE_FUNCTION_COVARIANCE_POP = 11;</code>
   */
  AGGREGATE_FUNCTION_COVARIANCE_POP(11),
  /**
   * <code>AGGREGATE_FUNCTION_STDDEV = 12;</code>
   */
  AGGREGATE_FUNCTION_STDDEV(12),
  /**
   * <code>AGGREGATE_FUNCTION_STDDEV_POP = 13;</code>
   */
  AGGREGATE_FUNCTION_STDDEV_POP(13),
  /**
   * <code>AGGREGATE_FUNCTION_CORRELATION = 14;</code>
   */
  AGGREGATE_FUNCTION_CORRELATION(14),
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT = 15;</code>
   */
  AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT(15),
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_MEDIAN = 16;</code>
   */
  AGGREGATE_FUNCTION_APPROX_MEDIAN(16),
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT = 17;</code>
   */
  AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT(17),
  /**
   * <code>AGGREGATE_FUNCTION_GROUPING = 18;</code>
   */
  AGGREGATE_FUNCTION_GROUPING(18),
  /**
   * <code>AGGREGATE_FUNCTION_MEDIAN = 19;</code>
   */
  AGGREGATE_FUNCTION_MEDIAN(19),
  /**
   * <code>AGGREGATE_FUNCTION_BIT_AND = 20;</code>
   */
  AGGREGATE_FUNCTION_BIT_AND(20),
  /**
   * <code>AGGREGATE_FUNCTION_BIT_OR = 21;</code>
   */
  AGGREGATE_FUNCTION_BIT_OR(21),
  /**
   * <code>AGGREGATE_FUNCTION_BIT_XOR = 22;</code>
   */
  AGGREGATE_FUNCTION_BIT_XOR(22),
  /**
   * <code>AGGREGATE_FUNCTION_BOOL_AND = 23;</code>
   */
  AGGREGATE_FUNCTION_BOOL_AND(23),
  /**
   * <code>AGGREGATE_FUNCTION_BOOL_OR = 24;</code>
   */
  AGGREGATE_FUNCTION_BOOL_OR(24),
  /**
   * <code>AGGREGATE_FUNCTION_FIRST_VALUE = 25;</code>
   */
  AGGREGATE_FUNCTION_FIRST_VALUE(25),
  /**
   * <code>AGGREGATE_FUNCTION_LAST_VALUE = 26;</code>
   */
  AGGREGATE_FUNCTION_LAST_VALUE(26),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SLOPE = 27;</code>
   */
  AGGREGATE_FUNCTION_REGR_SLOPE(27),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_INTERCEPT = 28;</code>
   */
  AGGREGATE_FUNCTION_REGR_INTERCEPT(28),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_COUNT = 29;</code>
   */
  AGGREGATE_FUNCTION_REGR_COUNT(29),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_R2 = 30;</code>
   */
  AGGREGATE_FUNCTION_REGR_R2(30),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_AVGX = 31;</code>
   */
  AGGREGATE_FUNCTION_REGR_AVGX(31),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_AVGY = 32;</code>
   */
  AGGREGATE_FUNCTION_REGR_AVGY(32),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SXX = 33;</code>
   */
  AGGREGATE_FUNCTION_REGR_SXX(33),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SYY = 34;</code>
   */
  AGGREGATE_FUNCTION_REGR_SYY(34),
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SXY = 35;</code>
   */
  AGGREGATE_FUNCTION_REGR_SXY(35),
  /**
   * <code>AGGREGATE_FUNCTION_STRING = 36;</code>
   */
  AGGREGATE_FUNCTION_STRING(36),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>AGGREGATE_FUNCTION_UNSPECIFIED = 0;</code>
   */
  public static final int AGGREGATE_FUNCTION_UNSPECIFIED_VALUE = 0;
  /**
   * <code>AGGREGATE_FUNCTION_MIN = 1;</code>
   */
  public static final int AGGREGATE_FUNCTION_MIN_VALUE = 1;
  /**
   * <code>AGGREGATE_FUNCTION_MAX = 2;</code>
   */
  public static final int AGGREGATE_FUNCTION_MAX_VALUE = 2;
  /**
   * <code>AGGREGATE_FUNCTION_SUM = 3;</code>
   */
  public static final int AGGREGATE_FUNCTION_SUM_VALUE = 3;
  /**
   * <code>AGGREGATE_FUNCTION_AVG = 4;</code>
   */
  public static final int AGGREGATE_FUNCTION_AVG_VALUE = 4;
  /**
   * <code>AGGREGATE_FUNCTION_COUNT = 5;</code>
   */
  public static final int AGGREGATE_FUNCTION_COUNT_VALUE = 5;
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_DISTINCT = 6;</code>
   */
  public static final int AGGREGATE_FUNCTION_APPROX_DISTINCT_VALUE = 6;
  /**
   * <code>AGGREGATE_FUNCTION_ARRAY = 7;</code>
   */
  public static final int AGGREGATE_FUNCTION_ARRAY_VALUE = 7;
  /**
   * <code>AGGREGATE_FUNCTION_VARIANCE = 8;</code>
   */
  public static final int AGGREGATE_FUNCTION_VARIANCE_VALUE = 8;
  /**
   * <code>AGGREGATE_FUNCTION_VARIANCE_POP = 9;</code>
   */
  public static final int AGGREGATE_FUNCTION_VARIANCE_POP_VALUE = 9;
  /**
   * <code>AGGREGATE_FUNCTION_COVARIANCE = 10;</code>
   */
  public static final int AGGREGATE_FUNCTION_COVARIANCE_VALUE = 10;
  /**
   * <code>AGGREGATE_FUNCTION_COVARIANCE_POP = 11;</code>
   */
  public static final int AGGREGATE_FUNCTION_COVARIANCE_POP_VALUE = 11;
  /**
   * <code>AGGREGATE_FUNCTION_STDDEV = 12;</code>
   */
  public static final int AGGREGATE_FUNCTION_STDDEV_VALUE = 12;
  /**
   * <code>AGGREGATE_FUNCTION_STDDEV_POP = 13;</code>
   */
  public static final int AGGREGATE_FUNCTION_STDDEV_POP_VALUE = 13;
  /**
   * <code>AGGREGATE_FUNCTION_CORRELATION = 14;</code>
   */
  public static final int AGGREGATE_FUNCTION_CORRELATION_VALUE = 14;
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT = 15;</code>
   */
  public static final int AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_VALUE = 15;
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_MEDIAN = 16;</code>
   */
  public static final int AGGREGATE_FUNCTION_APPROX_MEDIAN_VALUE = 16;
  /**
   * <code>AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT = 17;</code>
   */
  public static final int AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT_VALUE = 17;
  /**
   * <code>AGGREGATE_FUNCTION_GROUPING = 18;</code>
   */
  public static final int AGGREGATE_FUNCTION_GROUPING_VALUE = 18;
  /**
   * <code>AGGREGATE_FUNCTION_MEDIAN = 19;</code>
   */
  public static final int AGGREGATE_FUNCTION_MEDIAN_VALUE = 19;
  /**
   * <code>AGGREGATE_FUNCTION_BIT_AND = 20;</code>
   */
  public static final int AGGREGATE_FUNCTION_BIT_AND_VALUE = 20;
  /**
   * <code>AGGREGATE_FUNCTION_BIT_OR = 21;</code>
   */
  public static final int AGGREGATE_FUNCTION_BIT_OR_VALUE = 21;
  /**
   * <code>AGGREGATE_FUNCTION_BIT_XOR = 22;</code>
   */
  public static final int AGGREGATE_FUNCTION_BIT_XOR_VALUE = 22;
  /**
   * <code>AGGREGATE_FUNCTION_BOOL_AND = 23;</code>
   */
  public static final int AGGREGATE_FUNCTION_BOOL_AND_VALUE = 23;
  /**
   * <code>AGGREGATE_FUNCTION_BOOL_OR = 24;</code>
   */
  public static final int AGGREGATE_FUNCTION_BOOL_OR_VALUE = 24;
  /**
   * <code>AGGREGATE_FUNCTION_FIRST_VALUE = 25;</code>
   */
  public static final int AGGREGATE_FUNCTION_FIRST_VALUE_VALUE = 25;
  /**
   * <code>AGGREGATE_FUNCTION_LAST_VALUE = 26;</code>
   */
  public static final int AGGREGATE_FUNCTION_LAST_VALUE_VALUE = 26;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SLOPE = 27;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_SLOPE_VALUE = 27;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_INTERCEPT = 28;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_INTERCEPT_VALUE = 28;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_COUNT = 29;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_COUNT_VALUE = 29;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_R2 = 30;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_R2_VALUE = 30;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_AVGX = 31;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_AVGX_VALUE = 31;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_AVGY = 32;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_AVGY_VALUE = 32;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SXX = 33;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_SXX_VALUE = 33;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SYY = 34;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_SYY_VALUE = 34;
  /**
   * <code>AGGREGATE_FUNCTION_REGR_SXY = 35;</code>
   */
  public static final int AGGREGATE_FUNCTION_REGR_SXY_VALUE = 35;
  /**
   * <code>AGGREGATE_FUNCTION_STRING = 36;</code>
   */
  public static final int AGGREGATE_FUNCTION_STRING_VALUE = 36;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AggregateFunction valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AggregateFunction forNumber(int value) {
    switch (value) {
      case 0: return AGGREGATE_FUNCTION_UNSPECIFIED;
      case 1: return AGGREGATE_FUNCTION_MIN;
      case 2: return AGGREGATE_FUNCTION_MAX;
      case 3: return AGGREGATE_FUNCTION_SUM;
      case 4: return AGGREGATE_FUNCTION_AVG;
      case 5: return AGGREGATE_FUNCTION_COUNT;
      case 6: return AGGREGATE_FUNCTION_APPROX_DISTINCT;
      case 7: return AGGREGATE_FUNCTION_ARRAY;
      case 8: return AGGREGATE_FUNCTION_VARIANCE;
      case 9: return AGGREGATE_FUNCTION_VARIANCE_POP;
      case 10: return AGGREGATE_FUNCTION_COVARIANCE;
      case 11: return AGGREGATE_FUNCTION_COVARIANCE_POP;
      case 12: return AGGREGATE_FUNCTION_STDDEV;
      case 13: return AGGREGATE_FUNCTION_STDDEV_POP;
      case 14: return AGGREGATE_FUNCTION_CORRELATION;
      case 15: return AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT;
      case 16: return AGGREGATE_FUNCTION_APPROX_MEDIAN;
      case 17: return AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT;
      case 18: return AGGREGATE_FUNCTION_GROUPING;
      case 19: return AGGREGATE_FUNCTION_MEDIAN;
      case 20: return AGGREGATE_FUNCTION_BIT_AND;
      case 21: return AGGREGATE_FUNCTION_BIT_OR;
      case 22: return AGGREGATE_FUNCTION_BIT_XOR;
      case 23: return AGGREGATE_FUNCTION_BOOL_AND;
      case 24: return AGGREGATE_FUNCTION_BOOL_OR;
      case 25: return AGGREGATE_FUNCTION_FIRST_VALUE;
      case 26: return AGGREGATE_FUNCTION_LAST_VALUE;
      case 27: return AGGREGATE_FUNCTION_REGR_SLOPE;
      case 28: return AGGREGATE_FUNCTION_REGR_INTERCEPT;
      case 29: return AGGREGATE_FUNCTION_REGR_COUNT;
      case 30: return AGGREGATE_FUNCTION_REGR_R2;
      case 31: return AGGREGATE_FUNCTION_REGR_AVGX;
      case 32: return AGGREGATE_FUNCTION_REGR_AVGY;
      case 33: return AGGREGATE_FUNCTION_REGR_SXX;
      case 34: return AGGREGATE_FUNCTION_REGR_SYY;
      case 35: return AGGREGATE_FUNCTION_REGR_SXY;
      case 36: return AGGREGATE_FUNCTION_STRING;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AggregateFunction>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AggregateFunction> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AggregateFunction>() {
          public AggregateFunction findValueByNumber(int number) {
            return AggregateFunction.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.expression.v1.ExpressionProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final AggregateFunction[] VALUES = values();

  public static AggregateFunction valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AggregateFunction(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:chalk.expression.v1.AggregateFunction)
}

