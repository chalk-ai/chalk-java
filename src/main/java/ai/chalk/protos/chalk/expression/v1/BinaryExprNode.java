// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/expression/v1/expression.proto

// Protobuf Java Version: 4.26.1
package ai.chalk.protos.chalk.expression.v1;

/**
 * Protobuf type {@code chalk.expression.v1.BinaryExprNode}
 */
public final class BinaryExprNode extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:chalk.expression.v1.BinaryExprNode)
    BinaryExprNodeOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      BinaryExprNode.class.getName());
  }
  // Use BinaryExprNode.newBuilder() to construct.
  private BinaryExprNode(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private BinaryExprNode() {
    operands_ = java.util.Collections.emptyList();
    op_ = "";
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_BinaryExprNode_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_BinaryExprNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.chalk.protos.chalk.expression.v1.BinaryExprNode.class, ai.chalk.protos.chalk.expression.v1.BinaryExprNode.Builder.class);
  }

  public static final int OPERANDS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<ai.chalk.protos.chalk.expression.v1.LogicalExprNode> operands_;
  /**
   * <pre>
   * Represents the operands from the left inner most expression
   * to the right outer most expression where each of them are chained
   * with the operator 'op'.
   * </pre>
   *
   * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.expression.v1.LogicalExprNode> getOperandsList() {
    return operands_;
  }
  /**
   * <pre>
   * Represents the operands from the left inner most expression
   * to the right outer most expression where each of them are chained
   * with the operator 'op'.
   * </pre>
   *
   * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder> 
      getOperandsOrBuilderList() {
    return operands_;
  }
  /**
   * <pre>
   * Represents the operands from the left inner most expression
   * to the right outer most expression where each of them are chained
   * with the operator 'op'.
   * </pre>
   *
   * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
   */
  @java.lang.Override
  public int getOperandsCount() {
    return operands_.size();
  }
  /**
   * <pre>
   * Represents the operands from the left inner most expression
   * to the right outer most expression where each of them are chained
   * with the operator 'op'.
   * </pre>
   *
   * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.LogicalExprNode getOperands(int index) {
    return operands_.get(index);
  }
  /**
   * <pre>
   * Represents the operands from the left inner most expression
   * to the right outer most expression where each of them are chained
   * with the operator 'op'.
   * </pre>
   *
   * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder getOperandsOrBuilder(
      int index) {
    return operands_.get(index);
  }

  public static final int OP_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object op_ = "";
  /**
   * <code>string op = 3 [json_name = "op"];</code>
   * @return The op.
   */
  @java.lang.Override
  public java.lang.String getOp() {
    java.lang.Object ref = op_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      op_ = s;
      return s;
    }
  }
  /**
   * <code>string op = 3 [json_name = "op"];</code>
   * @return The bytes for op.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOpBytes() {
    java.lang.Object ref = op_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      op_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < operands_.size(); i++) {
      output.writeMessage(1, operands_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(op_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 3, op_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < operands_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, operands_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(op_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(3, op_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.chalk.protos.chalk.expression.v1.BinaryExprNode)) {
      return super.equals(obj);
    }
    ai.chalk.protos.chalk.expression.v1.BinaryExprNode other = (ai.chalk.protos.chalk.expression.v1.BinaryExprNode) obj;

    if (!getOperandsList()
        .equals(other.getOperandsList())) return false;
    if (!getOp()
        .equals(other.getOp())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getOperandsCount() > 0) {
      hash = (37 * hash) + OPERANDS_FIELD_NUMBER;
      hash = (53 * hash) + getOperandsList().hashCode();
    }
    hash = (37 * hash) + OP_FIELD_NUMBER;
    hash = (53 * hash) + getOp().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.chalk.protos.chalk.expression.v1.BinaryExprNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code chalk.expression.v1.BinaryExprNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:chalk.expression.v1.BinaryExprNode)
      ai.chalk.protos.chalk.expression.v1.BinaryExprNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_BinaryExprNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_BinaryExprNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.chalk.protos.chalk.expression.v1.BinaryExprNode.class, ai.chalk.protos.chalk.expression.v1.BinaryExprNode.Builder.class);
    }

    // Construct using ai.chalk.protos.chalk.expression.v1.BinaryExprNode.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (operandsBuilder_ == null) {
        operands_ = java.util.Collections.emptyList();
      } else {
        operands_ = null;
        operandsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      op_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.chalk.protos.chalk.expression.v1.ExpressionProto.internal_static_chalk_expression_v1_BinaryExprNode_descriptor;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.BinaryExprNode getDefaultInstanceForType() {
      return ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance();
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.BinaryExprNode build() {
      ai.chalk.protos.chalk.expression.v1.BinaryExprNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.expression.v1.BinaryExprNode buildPartial() {
      ai.chalk.protos.chalk.expression.v1.BinaryExprNode result = new ai.chalk.protos.chalk.expression.v1.BinaryExprNode(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(ai.chalk.protos.chalk.expression.v1.BinaryExprNode result) {
      if (operandsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          operands_ = java.util.Collections.unmodifiableList(operands_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.operands_ = operands_;
      } else {
        result.operands_ = operandsBuilder_.build();
      }
    }

    private void buildPartial0(ai.chalk.protos.chalk.expression.v1.BinaryExprNode result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.op_ = op_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.chalk.protos.chalk.expression.v1.BinaryExprNode) {
        return mergeFrom((ai.chalk.protos.chalk.expression.v1.BinaryExprNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.chalk.protos.chalk.expression.v1.BinaryExprNode other) {
      if (other == ai.chalk.protos.chalk.expression.v1.BinaryExprNode.getDefaultInstance()) return this;
      if (operandsBuilder_ == null) {
        if (!other.operands_.isEmpty()) {
          if (operands_.isEmpty()) {
            operands_ = other.operands_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureOperandsIsMutable();
            operands_.addAll(other.operands_);
          }
          onChanged();
        }
      } else {
        if (!other.operands_.isEmpty()) {
          if (operandsBuilder_.isEmpty()) {
            operandsBuilder_.dispose();
            operandsBuilder_ = null;
            operands_ = other.operands_;
            bitField0_ = (bitField0_ & ~0x00000001);
            operandsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getOperandsFieldBuilder() : null;
          } else {
            operandsBuilder_.addAllMessages(other.operands_);
          }
        }
      }
      if (!other.getOp().isEmpty()) {
        op_ = other.op_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              ai.chalk.protos.chalk.expression.v1.LogicalExprNode m =
                  input.readMessage(
                      ai.chalk.protos.chalk.expression.v1.LogicalExprNode.parser(),
                      extensionRegistry);
              if (operandsBuilder_ == null) {
                ensureOperandsIsMutable();
                operands_.add(m);
              } else {
                operandsBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 26: {
              op_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<ai.chalk.protos.chalk.expression.v1.LogicalExprNode> operands_ =
      java.util.Collections.emptyList();
    private void ensureOperandsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        operands_ = new java.util.ArrayList<ai.chalk.protos.chalk.expression.v1.LogicalExprNode>(operands_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.expression.v1.LogicalExprNode, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder, ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder> operandsBuilder_;

    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.expression.v1.LogicalExprNode> getOperandsList() {
      if (operandsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(operands_);
      } else {
        return operandsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public int getOperandsCount() {
      if (operandsBuilder_ == null) {
        return operands_.size();
      } else {
        return operandsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNode getOperands(int index) {
      if (operandsBuilder_ == null) {
        return operands_.get(index);
      } else {
        return operandsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder setOperands(
        int index, ai.chalk.protos.chalk.expression.v1.LogicalExprNode value) {
      if (operandsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOperandsIsMutable();
        operands_.set(index, value);
        onChanged();
      } else {
        operandsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder setOperands(
        int index, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder builderForValue) {
      if (operandsBuilder_ == null) {
        ensureOperandsIsMutable();
        operands_.set(index, builderForValue.build());
        onChanged();
      } else {
        operandsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder addOperands(ai.chalk.protos.chalk.expression.v1.LogicalExprNode value) {
      if (operandsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOperandsIsMutable();
        operands_.add(value);
        onChanged();
      } else {
        operandsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder addOperands(
        int index, ai.chalk.protos.chalk.expression.v1.LogicalExprNode value) {
      if (operandsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOperandsIsMutable();
        operands_.add(index, value);
        onChanged();
      } else {
        operandsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder addOperands(
        ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder builderForValue) {
      if (operandsBuilder_ == null) {
        ensureOperandsIsMutable();
        operands_.add(builderForValue.build());
        onChanged();
      } else {
        operandsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder addOperands(
        int index, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder builderForValue) {
      if (operandsBuilder_ == null) {
        ensureOperandsIsMutable();
        operands_.add(index, builderForValue.build());
        onChanged();
      } else {
        operandsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder addAllOperands(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.expression.v1.LogicalExprNode> values) {
      if (operandsBuilder_ == null) {
        ensureOperandsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, operands_);
        onChanged();
      } else {
        operandsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder clearOperands() {
      if (operandsBuilder_ == null) {
        operands_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        operandsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public Builder removeOperands(int index) {
      if (operandsBuilder_ == null) {
        ensureOperandsIsMutable();
        operands_.remove(index);
        onChanged();
      } else {
        operandsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder getOperandsBuilder(
        int index) {
      return getOperandsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder getOperandsOrBuilder(
        int index) {
      if (operandsBuilder_ == null) {
        return operands_.get(index);  } else {
        return operandsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public java.util.List<? extends ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder> 
         getOperandsOrBuilderList() {
      if (operandsBuilder_ != null) {
        return operandsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(operands_);
      }
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder addOperandsBuilder() {
      return getOperandsFieldBuilder().addBuilder(
          ai.chalk.protos.chalk.expression.v1.LogicalExprNode.getDefaultInstance());
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder addOperandsBuilder(
        int index) {
      return getOperandsFieldBuilder().addBuilder(
          index, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.getDefaultInstance());
    }
    /**
     * <pre>
     * Represents the operands from the left inner most expression
     * to the right outer most expression where each of them are chained
     * with the operator 'op'.
     * </pre>
     *
     * <code>repeated .chalk.expression.v1.LogicalExprNode operands = 1 [json_name = "operands"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder> 
         getOperandsBuilderList() {
      return getOperandsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.expression.v1.LogicalExprNode, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder, ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder> 
        getOperandsFieldBuilder() {
      if (operandsBuilder_ == null) {
        operandsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.chalk.protos.chalk.expression.v1.LogicalExprNode, ai.chalk.protos.chalk.expression.v1.LogicalExprNode.Builder, ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder>(
                operands_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        operands_ = null;
      }
      return operandsBuilder_;
    }

    private java.lang.Object op_ = "";
    /**
     * <code>string op = 3 [json_name = "op"];</code>
     * @return The op.
     */
    public java.lang.String getOp() {
      java.lang.Object ref = op_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        op_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string op = 3 [json_name = "op"];</code>
     * @return The bytes for op.
     */
    public com.google.protobuf.ByteString
        getOpBytes() {
      java.lang.Object ref = op_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        op_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string op = 3 [json_name = "op"];</code>
     * @param value The op to set.
     * @return This builder for chaining.
     */
    public Builder setOp(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      op_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>string op = 3 [json_name = "op"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOp() {
      op_ = getDefaultInstance().getOp();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>string op = 3 [json_name = "op"];</code>
     * @param value The bytes for op to set.
     * @return This builder for chaining.
     */
    public Builder setOpBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      op_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:chalk.expression.v1.BinaryExprNode)
  }

  // @@protoc_insertion_point(class_scope:chalk.expression.v1.BinaryExprNode)
  private static final ai.chalk.protos.chalk.expression.v1.BinaryExprNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.chalk.protos.chalk.expression.v1.BinaryExprNode();
  }

  public static ai.chalk.protos.chalk.expression.v1.BinaryExprNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BinaryExprNode>
      PARSER = new com.google.protobuf.AbstractParser<BinaryExprNode>() {
    @java.lang.Override
    public BinaryExprNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<BinaryExprNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BinaryExprNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.chalk.protos.chalk.expression.v1.BinaryExprNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

