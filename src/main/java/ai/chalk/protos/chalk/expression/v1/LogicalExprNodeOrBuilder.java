// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/expression/v1/expression.proto

// Protobuf Java Version: 4.26.1
package ai.chalk.protos.chalk.expression.v1;

public interface LogicalExprNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.expression.v1.LogicalExprNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
   * @return Whether the column field is set.
   */
  boolean hasColumn();
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
   * @return The column.
   */
  ai.chalk.protos.chalk.expression.v1.Column getColumn();
  /**
   * <pre>
   * column references
   * </pre>
   *
   * <code>.chalk.expression.v1.Column column = 1 [json_name = "column"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.ColumnOrBuilder getColumnOrBuilder();

  /**
   * <pre>
   * alias
   * </pre>
   *
   * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
   * @return Whether the alias field is set.
   */
  boolean hasAlias();
  /**
   * <pre>
   * alias
   * </pre>
   *
   * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
   * @return The alias.
   */
  ai.chalk.protos.chalk.expression.v1.AliasNode getAlias();
  /**
   * <pre>
   * alias
   * </pre>
   *
   * <code>.chalk.expression.v1.AliasNode alias = 2 [json_name = "alias"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.AliasNodeOrBuilder getAliasOrBuilder();

  /**
   * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
   * @return Whether the literal field is set.
   */
  boolean hasLiteral();
  /**
   * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
   * @return The literal.
   */
  ai.chalk.protos.chalk.arrow.v1.ScalarValue getLiteral();
  /**
   * <code>.chalk.arrow.v1.ScalarValue literal = 3 [json_name = "literal"];</code>
   */
  ai.chalk.protos.chalk.arrow.v1.ScalarValueOrBuilder getLiteralOrBuilder();

  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
   * @return Whether the binaryExpr field is set.
   */
  boolean hasBinaryExpr();
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
   * @return The binaryExpr.
   */
  ai.chalk.protos.chalk.expression.v1.BinaryExprNode getBinaryExpr();
  /**
   * <pre>
   * binary expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.BinaryExprNode binary_expr = 4 [json_name = "binaryExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.BinaryExprNodeOrBuilder getBinaryExprOrBuilder();

  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
   * @return Whether the aggregateExpr field is set.
   */
  boolean hasAggregateExpr();
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
   * @return The aggregateExpr.
   */
  ai.chalk.protos.chalk.expression.v1.AggregateExprNode getAggregateExpr();
  /**
   * <pre>
   * aggregate expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateExprNode aggregate_expr = 5 [json_name = "aggregateExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.AggregateExprNodeOrBuilder getAggregateExprOrBuilder();

  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
   * @return Whether the isNullExpr field is set.
   */
  boolean hasIsNullExpr();
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
   * @return The isNullExpr.
   */
  ai.chalk.protos.chalk.expression.v1.IsNull getIsNullExpr();
  /**
   * <pre>
   * null checks
   * </pre>
   *
   * <code>.chalk.expression.v1.IsNull is_null_expr = 6 [json_name = "isNullExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsNullOrBuilder getIsNullExprOrBuilder();

  /**
   * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
   * @return Whether the isNotNullExpr field is set.
   */
  boolean hasIsNotNullExpr();
  /**
   * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
   * @return The isNotNullExpr.
   */
  ai.chalk.protos.chalk.expression.v1.IsNotNull getIsNotNullExpr();
  /**
   * <code>.chalk.expression.v1.IsNotNull is_not_null_expr = 7 [json_name = "isNotNullExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsNotNullOrBuilder getIsNotNullExprOrBuilder();

  /**
   * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
   * @return Whether the notExpr field is set.
   */
  boolean hasNotExpr();
  /**
   * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
   * @return The notExpr.
   */
  ai.chalk.protos.chalk.expression.v1.Not getNotExpr();
  /**
   * <code>.chalk.expression.v1.Not not_expr = 8 [json_name = "notExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.NotOrBuilder getNotExprOrBuilder();

  /**
   * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
   * @return Whether the between field is set.
   */
  boolean hasBetween();
  /**
   * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
   * @return The between.
   */
  ai.chalk.protos.chalk.expression.v1.BetweenNode getBetween();
  /**
   * <code>.chalk.expression.v1.BetweenNode between = 9 [json_name = "between"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.BetweenNodeOrBuilder getBetweenOrBuilder();

  /**
   * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
   * @return Whether the case field is set.
   */
  boolean hasCase();
  /**
   * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
   * @return The case.
   */
  ai.chalk.protos.chalk.expression.v1.CaseNode getCase();
  /**
   * <code>.chalk.expression.v1.CaseNode case = 10 [json_name = "case"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.CaseNodeOrBuilder getCaseOrBuilder();

  /**
   * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
   * @return Whether the cast field is set.
   */
  boolean hasCast();
  /**
   * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
   * @return The cast.
   */
  ai.chalk.protos.chalk.expression.v1.CastNode getCast();
  /**
   * <code>.chalk.expression.v1.CastNode cast = 11 [json_name = "cast"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.CastNodeOrBuilder getCastOrBuilder();

  /**
   * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
   * @return Whether the sort field is set.
   */
  boolean hasSort();
  /**
   * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
   * @return The sort.
   */
  ai.chalk.protos.chalk.expression.v1.SortExprNode getSort();
  /**
   * <code>.chalk.expression.v1.SortExprNode sort = 12 [json_name = "sort"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.SortExprNodeOrBuilder getSortOrBuilder();

  /**
   * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
   * @return Whether the negative field is set.
   */
  boolean hasNegative();
  /**
   * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
   * @return The negative.
   */
  ai.chalk.protos.chalk.expression.v1.NegativeNode getNegative();
  /**
   * <code>.chalk.expression.v1.NegativeNode negative = 13 [json_name = "negative"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.NegativeNodeOrBuilder getNegativeOrBuilder();

  /**
   * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
   * @return Whether the inList field is set.
   */
  boolean hasInList();
  /**
   * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
   * @return The inList.
   */
  ai.chalk.protos.chalk.expression.v1.InListNode getInList();
  /**
   * <code>.chalk.expression.v1.InListNode in_list = 14 [json_name = "inList"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.InListNodeOrBuilder getInListOrBuilder();

  /**
   * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
   * @return Whether the wildcard field is set.
   */
  boolean hasWildcard();
  /**
   * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
   * @return The wildcard.
   */
  ai.chalk.protos.chalk.expression.v1.Wildcard getWildcard();
  /**
   * <code>.chalk.expression.v1.Wildcard wildcard = 15 [json_name = "wildcard"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.WildcardOrBuilder getWildcardOrBuilder();

  /**
   * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
   * @return Whether the scalarFunction field is set.
   */
  boolean hasScalarFunction();
  /**
   * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
   * @return The scalarFunction.
   */
  ai.chalk.protos.chalk.expression.v1.ScalarFunctionNode getScalarFunction();
  /**
   * <code>.chalk.expression.v1.ScalarFunctionNode scalar_function = 16 [json_name = "scalarFunction"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.ScalarFunctionNodeOrBuilder getScalarFunctionOrBuilder();

  /**
   * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
   * @return Whether the tryCast field is set.
   */
  boolean hasTryCast();
  /**
   * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
   * @return The tryCast.
   */
  ai.chalk.protos.chalk.expression.v1.TryCastNode getTryCast();
  /**
   * <code>.chalk.expression.v1.TryCastNode try_cast = 17 [json_name = "tryCast"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.TryCastNodeOrBuilder getTryCastOrBuilder();

  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
   * @return Whether the windowExpr field is set.
   */
  boolean hasWindowExpr();
  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
   * @return The windowExpr.
   */
  ai.chalk.protos.chalk.expression.v1.WindowExprNode getWindowExpr();
  /**
   * <pre>
   * window expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.WindowExprNode window_expr = 18 [json_name = "windowExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.WindowExprNodeOrBuilder getWindowExprOrBuilder();

  /**
   * <pre>
   * AggregateUDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
   * @return Whether the aggregateUdfExpr field is set.
   */
  boolean hasAggregateUdfExpr();
  /**
   * <pre>
   * AggregateUDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
   * @return The aggregateUdfExpr.
   */
  ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNode getAggregateUdfExpr();
  /**
   * <pre>
   * AggregateUDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.AggregateUDFExprNode aggregate_udf_expr = 19 [json_name = "aggregateUdfExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.AggregateUDFExprNodeOrBuilder getAggregateUdfExprOrBuilder();

  /**
   * <pre>
   * Scalar UDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
   * @return Whether the scalarUdfExpr field is set.
   */
  boolean hasScalarUdfExpr();
  /**
   * <pre>
   * Scalar UDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
   * @return The scalarUdfExpr.
   */
  ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNode getScalarUdfExpr();
  /**
   * <pre>
   * Scalar UDF expressions
   * </pre>
   *
   * <code>.chalk.expression.v1.ScalarUDFExprNode scalar_udf_expr = 20 [json_name = "scalarUdfExpr"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.ScalarUDFExprNodeOrBuilder getScalarUdfExprOrBuilder();

  /**
   * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
   * @return Whether the getIndexedField field is set.
   */
  boolean hasGetIndexedField();
  /**
   * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
   * @return The getIndexedField.
   */
  ai.chalk.protos.chalk.expression.v1.GetIndexedField getGetIndexedField();
  /**
   * <code>.chalk.expression.v1.GetIndexedField get_indexed_field = 21 [json_name = "getIndexedField"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.GetIndexedFieldOrBuilder getGetIndexedFieldOrBuilder();

  /**
   * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
   * @return Whether the groupingSet field is set.
   */
  boolean hasGroupingSet();
  /**
   * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
   * @return The groupingSet.
   */
  ai.chalk.protos.chalk.expression.v1.GroupingSetNode getGroupingSet();
  /**
   * <code>.chalk.expression.v1.GroupingSetNode grouping_set = 22 [json_name = "groupingSet"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.GroupingSetNodeOrBuilder getGroupingSetOrBuilder();

  /**
   * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
   * @return Whether the cube field is set.
   */
  boolean hasCube();
  /**
   * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
   * @return The cube.
   */
  ai.chalk.protos.chalk.expression.v1.CubeNode getCube();
  /**
   * <code>.chalk.expression.v1.CubeNode cube = 23 [json_name = "cube"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.CubeNodeOrBuilder getCubeOrBuilder();

  /**
   * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
   * @return Whether the rollup field is set.
   */
  boolean hasRollup();
  /**
   * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
   * @return The rollup.
   */
  ai.chalk.protos.chalk.expression.v1.RollupNode getRollup();
  /**
   * <code>.chalk.expression.v1.RollupNode rollup = 24 [json_name = "rollup"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.RollupNodeOrBuilder getRollupOrBuilder();

  /**
   * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
   * @return Whether the isTrue field is set.
   */
  boolean hasIsTrue();
  /**
   * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
   * @return The isTrue.
   */
  ai.chalk.protos.chalk.expression.v1.IsTrue getIsTrue();
  /**
   * <code>.chalk.expression.v1.IsTrue is_true = 25 [json_name = "isTrue"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsTrueOrBuilder getIsTrueOrBuilder();

  /**
   * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
   * @return Whether the isFalse field is set.
   */
  boolean hasIsFalse();
  /**
   * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
   * @return The isFalse.
   */
  ai.chalk.protos.chalk.expression.v1.IsFalse getIsFalse();
  /**
   * <code>.chalk.expression.v1.IsFalse is_false = 26 [json_name = "isFalse"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsFalseOrBuilder getIsFalseOrBuilder();

  /**
   * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
   * @return Whether the isUnknown field is set.
   */
  boolean hasIsUnknown();
  /**
   * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
   * @return The isUnknown.
   */
  ai.chalk.protos.chalk.expression.v1.IsUnknown getIsUnknown();
  /**
   * <code>.chalk.expression.v1.IsUnknown is_unknown = 27 [json_name = "isUnknown"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsUnknownOrBuilder getIsUnknownOrBuilder();

  /**
   * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
   * @return Whether the isNotTrue field is set.
   */
  boolean hasIsNotTrue();
  /**
   * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
   * @return The isNotTrue.
   */
  ai.chalk.protos.chalk.expression.v1.IsNotTrue getIsNotTrue();
  /**
   * <code>.chalk.expression.v1.IsNotTrue is_not_true = 28 [json_name = "isNotTrue"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsNotTrueOrBuilder getIsNotTrueOrBuilder();

  /**
   * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
   * @return Whether the isNotFalse field is set.
   */
  boolean hasIsNotFalse();
  /**
   * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
   * @return The isNotFalse.
   */
  ai.chalk.protos.chalk.expression.v1.IsNotFalse getIsNotFalse();
  /**
   * <code>.chalk.expression.v1.IsNotFalse is_not_false = 29 [json_name = "isNotFalse"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsNotFalseOrBuilder getIsNotFalseOrBuilder();

  /**
   * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
   * @return Whether the isNotUnknown field is set.
   */
  boolean hasIsNotUnknown();
  /**
   * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
   * @return The isNotUnknown.
   */
  ai.chalk.protos.chalk.expression.v1.IsNotUnknown getIsNotUnknown();
  /**
   * <code>.chalk.expression.v1.IsNotUnknown is_not_unknown = 30 [json_name = "isNotUnknown"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.IsNotUnknownOrBuilder getIsNotUnknownOrBuilder();

  /**
   * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
   * @return Whether the like field is set.
   */
  boolean hasLike();
  /**
   * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
   * @return The like.
   */
  ai.chalk.protos.chalk.expression.v1.LikeNode getLike();
  /**
   * <code>.chalk.expression.v1.LikeNode like = 31 [json_name = "like"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.LikeNodeOrBuilder getLikeOrBuilder();

  /**
   * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
   * @return Whether the ilike field is set.
   */
  boolean hasIlike();
  /**
   * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
   * @return The ilike.
   */
  ai.chalk.protos.chalk.expression.v1.ILikeNode getIlike();
  /**
   * <code>.chalk.expression.v1.ILikeNode ilike = 32 [json_name = "ilike"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.ILikeNodeOrBuilder getIlikeOrBuilder();

  /**
   * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
   * @return Whether the similarTo field is set.
   */
  boolean hasSimilarTo();
  /**
   * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
   * @return The similarTo.
   */
  ai.chalk.protos.chalk.expression.v1.SimilarToNode getSimilarTo();
  /**
   * <code>.chalk.expression.v1.SimilarToNode similar_to = 33 [json_name = "similarTo"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.SimilarToNodeOrBuilder getSimilarToOrBuilder();

  /**
   * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
   * @return Whether the placeholder field is set.
   */
  boolean hasPlaceholder();
  /**
   * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
   * @return The placeholder.
   */
  ai.chalk.protos.chalk.expression.v1.PlaceholderNode getPlaceholder();
  /**
   * <code>.chalk.expression.v1.PlaceholderNode placeholder = 34 [json_name = "placeholder"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.PlaceholderNodeOrBuilder getPlaceholderOrBuilder();

  ai.chalk.protos.chalk.expression.v1.LogicalExprNode.ExprTypeCase getExprTypeCase();
}
