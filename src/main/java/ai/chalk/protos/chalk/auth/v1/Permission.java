// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/auth/v1/permissions.proto

// Protobuf Java Version: 3.25.3
package ai.chalk.protos.chalk.auth.v1;

/**
 * Protobuf enum {@code chalk.auth.v1.Permission}
 */
public enum Permission
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Default value -- should never be set.
   * </pre>
   *
   * <code>PERMISSION_UNSPECIFIED = 0;</code>
   */
  PERMISSION_UNSPECIFIED(0),
  /**
   * <pre>
   * Only used for creating a new token
   * </pre>
   *
   * <code>PERMISSION_INSECURE_UNAUTHENTICATED = 1;</code>
   */
  PERMISSION_INSECURE_UNAUTHENTICATED(1),
  /**
   * <code>PERMISSION_AUTHENTICATED = 2;</code>
   */
  PERMISSION_AUTHENTICATED(2),
  /**
   * <pre>
   * Query online features.
   * </pre>
   *
   * <code>PERMISSION_QUERY_ONLINE = 3;</code>
   */
  PERMISSION_QUERY_ONLINE(3),
  /**
   * <pre>
   * Query offline features.
   * </pre>
   *
   * <code>PERMISSION_QUERY_OFFLINE = 4;</code>
   */
  PERMISSION_QUERY_OFFLINE(4),
  /**
   * <pre>
   * Create a new chart or alert
   * </pre>
   *
   * <code>PERMISSION_MONITORING_CREATE = 5;</code>
   */
  PERMISSION_MONITORING_CREATE(5),
  /**
   * <pre>
   * See charts and alerts
   * </pre>
   *
   * <code>PERMISSION_MONITORING_READ = 6;</code>
   */
  PERMISSION_MONITORING_READ(6),
  /**
   * <pre>
   * Add team members to your organization
   * </pre>
   *
   * <code>PERMISSION_TEAM_ADD = 7;</code>
   */
  PERMISSION_TEAM_ADD(7),
  /**
   * <pre>
   * Remove a team member
   * </pre>
   *
   * <code>PERMISSION_TEAM_DELETE = 8;</code>
   */
  PERMISSION_TEAM_DELETE(8),
  /**
   * <pre>
   * See the team members in your organization
   * </pre>
   *
   * <code>PERMISSION_TEAM_LIST = 9;</code>
   */
  PERMISSION_TEAM_LIST(9),
  /**
   * <pre>
   * Configure authentication options for your organization
   * </pre>
   *
   * <code>PERMISSION_TEAM_ADMIN = 10;</code>
   */
  PERMISSION_TEAM_ADMIN(10),
  /**
   * <pre>
   * Read information about deployments.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_READ = 11;</code>
   */
  PERMISSION_DEPLOY_READ(11),
  /**
   * <pre>
   * Create a new deployment.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_CREATE = 12;</code>
   */
  PERMISSION_DEPLOY_CREATE(12),
  /**
   * <pre>
   * Create a new preview deployment.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_PREVIEW = 13;</code>
   */
  PERMISSION_DEPLOY_PREVIEW(13),
  /**
   * <pre>
   * Redeploy an existing deployment.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_REDEPLOY = 14;</code>
   */
  PERMISSION_DEPLOY_REDEPLOY(14),
  /**
   * <pre>
   * Read logs from resolvers.
   * </pre>
   *
   * <code>PERMISSION_LOGS_LIST = 15;</code>
   */
  PERMISSION_LOGS_LIST(15),
  /**
   * <pre>
   * Read the scheduled runs.
   * </pre>
   *
   * <code>PERMISSION_CRON_READ = 16;</code>
   */
  PERMISSION_CRON_READ(16),
  /**
   * <pre>
   * Trigger a new scheduled run.
   * </pre>
   *
   * <code>PERMISSION_CRON_CREATE = 17;</code>
   */
  PERMISSION_CRON_CREATE(17),
  /**
   * <pre>
   * Create, modify, or delete secret values.
   * </pre>
   *
   * <code>PERMISSION_SECRETS_WRITE = 18;</code>
   */
  PERMISSION_SECRETS_WRITE(18),
  /**
   * <pre>
   * Decrypt secret values.
   * </pre>
   *
   * <code>PERMISSION_SECRETS_DECRYPT = 19;</code>
   */
  PERMISSION_SECRETS_DECRYPT(19),
  /**
   * <pre>
   * See the list of available secrets. Reading secrets is not allowed with this permission.
   * </pre>
   *
   * <code>PERMISSION_SECRETS_LIST = 20;</code>
   */
  PERMISSION_SECRETS_LIST(20),
  /**
   * <pre>
   * Create, modify, or delete service tokens.
   * </pre>
   *
   * <code>PERMISSION_TOKENS_WRITE = 21;</code>
   */
  PERMISSION_TOKENS_WRITE(21),
  /**
   * <pre>
   * List the service tokens and see client ids, but not client secrets.
   * </pre>
   *
   * <code>PERMISSION_TOKENS_LIST = 22;</code>
   */
  PERMISSION_TOKENS_LIST(22),
  /**
   * <pre>
   * View information about migrations.
   * </pre>
   *
   * <code>PERMISSION_MIGRATE_READ = 23;</code>
   */
  PERMISSION_MIGRATE_READ(23),
  /**
   * <pre>
   * Create a migration plan.
   * </pre>
   *
   * <code>PERMISSION_MIGRATE_PLAN = 24;</code>
   */
  PERMISSION_MIGRATE_PLAN(24),
  /**
   * <pre>
   * Execute a migration plan.
   * </pre>
   *
   * <code>PERMISSION_MIGRATE_EXECUTE = 25;</code>
   */
  PERMISSION_MIGRATE_EXECUTE(25),
  /**
   * <pre>
   * Create a new project
   * </pre>
   *
   * <code>PERMISSION_PROJECT_CREATE = 26;</code>
   */
  PERMISSION_PROJECT_CREATE(26),
  /**
   * <pre>
   * Administer Chalk
   * </pre>
   *
   * <code>PERMISSION_CHALK_ADMIN = 27;</code>
   */
  PERMISSION_CHALK_ADMIN(27),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Default value -- should never be set.
   * </pre>
   *
   * <code>PERMISSION_UNSPECIFIED = 0;</code>
   */
  public static final int PERMISSION_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Only used for creating a new token
   * </pre>
   *
   * <code>PERMISSION_INSECURE_UNAUTHENTICATED = 1;</code>
   */
  public static final int PERMISSION_INSECURE_UNAUTHENTICATED_VALUE = 1;
  /**
   * <code>PERMISSION_AUTHENTICATED = 2;</code>
   */
  public static final int PERMISSION_AUTHENTICATED_VALUE = 2;
  /**
   * <pre>
   * Query online features.
   * </pre>
   *
   * <code>PERMISSION_QUERY_ONLINE = 3;</code>
   */
  public static final int PERMISSION_QUERY_ONLINE_VALUE = 3;
  /**
   * <pre>
   * Query offline features.
   * </pre>
   *
   * <code>PERMISSION_QUERY_OFFLINE = 4;</code>
   */
  public static final int PERMISSION_QUERY_OFFLINE_VALUE = 4;
  /**
   * <pre>
   * Create a new chart or alert
   * </pre>
   *
   * <code>PERMISSION_MONITORING_CREATE = 5;</code>
   */
  public static final int PERMISSION_MONITORING_CREATE_VALUE = 5;
  /**
   * <pre>
   * See charts and alerts
   * </pre>
   *
   * <code>PERMISSION_MONITORING_READ = 6;</code>
   */
  public static final int PERMISSION_MONITORING_READ_VALUE = 6;
  /**
   * <pre>
   * Add team members to your organization
   * </pre>
   *
   * <code>PERMISSION_TEAM_ADD = 7;</code>
   */
  public static final int PERMISSION_TEAM_ADD_VALUE = 7;
  /**
   * <pre>
   * Remove a team member
   * </pre>
   *
   * <code>PERMISSION_TEAM_DELETE = 8;</code>
   */
  public static final int PERMISSION_TEAM_DELETE_VALUE = 8;
  /**
   * <pre>
   * See the team members in your organization
   * </pre>
   *
   * <code>PERMISSION_TEAM_LIST = 9;</code>
   */
  public static final int PERMISSION_TEAM_LIST_VALUE = 9;
  /**
   * <pre>
   * Configure authentication options for your organization
   * </pre>
   *
   * <code>PERMISSION_TEAM_ADMIN = 10;</code>
   */
  public static final int PERMISSION_TEAM_ADMIN_VALUE = 10;
  /**
   * <pre>
   * Read information about deployments.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_READ = 11;</code>
   */
  public static final int PERMISSION_DEPLOY_READ_VALUE = 11;
  /**
   * <pre>
   * Create a new deployment.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_CREATE = 12;</code>
   */
  public static final int PERMISSION_DEPLOY_CREATE_VALUE = 12;
  /**
   * <pre>
   * Create a new preview deployment.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_PREVIEW = 13;</code>
   */
  public static final int PERMISSION_DEPLOY_PREVIEW_VALUE = 13;
  /**
   * <pre>
   * Redeploy an existing deployment.
   * </pre>
   *
   * <code>PERMISSION_DEPLOY_REDEPLOY = 14;</code>
   */
  public static final int PERMISSION_DEPLOY_REDEPLOY_VALUE = 14;
  /**
   * <pre>
   * Read logs from resolvers.
   * </pre>
   *
   * <code>PERMISSION_LOGS_LIST = 15;</code>
   */
  public static final int PERMISSION_LOGS_LIST_VALUE = 15;
  /**
   * <pre>
   * Read the scheduled runs.
   * </pre>
   *
   * <code>PERMISSION_CRON_READ = 16;</code>
   */
  public static final int PERMISSION_CRON_READ_VALUE = 16;
  /**
   * <pre>
   * Trigger a new scheduled run.
   * </pre>
   *
   * <code>PERMISSION_CRON_CREATE = 17;</code>
   */
  public static final int PERMISSION_CRON_CREATE_VALUE = 17;
  /**
   * <pre>
   * Create, modify, or delete secret values.
   * </pre>
   *
   * <code>PERMISSION_SECRETS_WRITE = 18;</code>
   */
  public static final int PERMISSION_SECRETS_WRITE_VALUE = 18;
  /**
   * <pre>
   * Decrypt secret values.
   * </pre>
   *
   * <code>PERMISSION_SECRETS_DECRYPT = 19;</code>
   */
  public static final int PERMISSION_SECRETS_DECRYPT_VALUE = 19;
  /**
   * <pre>
   * See the list of available secrets. Reading secrets is not allowed with this permission.
   * </pre>
   *
   * <code>PERMISSION_SECRETS_LIST = 20;</code>
   */
  public static final int PERMISSION_SECRETS_LIST_VALUE = 20;
  /**
   * <pre>
   * Create, modify, or delete service tokens.
   * </pre>
   *
   * <code>PERMISSION_TOKENS_WRITE = 21;</code>
   */
  public static final int PERMISSION_TOKENS_WRITE_VALUE = 21;
  /**
   * <pre>
   * List the service tokens and see client ids, but not client secrets.
   * </pre>
   *
   * <code>PERMISSION_TOKENS_LIST = 22;</code>
   */
  public static final int PERMISSION_TOKENS_LIST_VALUE = 22;
  /**
   * <pre>
   * View information about migrations.
   * </pre>
   *
   * <code>PERMISSION_MIGRATE_READ = 23;</code>
   */
  public static final int PERMISSION_MIGRATE_READ_VALUE = 23;
  /**
   * <pre>
   * Create a migration plan.
   * </pre>
   *
   * <code>PERMISSION_MIGRATE_PLAN = 24;</code>
   */
  public static final int PERMISSION_MIGRATE_PLAN_VALUE = 24;
  /**
   * <pre>
   * Execute a migration plan.
   * </pre>
   *
   * <code>PERMISSION_MIGRATE_EXECUTE = 25;</code>
   */
  public static final int PERMISSION_MIGRATE_EXECUTE_VALUE = 25;
  /**
   * <pre>
   * Create a new project
   * </pre>
   *
   * <code>PERMISSION_PROJECT_CREATE = 26;</code>
   */
  public static final int PERMISSION_PROJECT_CREATE_VALUE = 26;
  /**
   * <pre>
   * Administer Chalk
   * </pre>
   *
   * <code>PERMISSION_CHALK_ADMIN = 27;</code>
   */
  public static final int PERMISSION_CHALK_ADMIN_VALUE = 27;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Permission valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Permission forNumber(int value) {
    switch (value) {
      case 0: return PERMISSION_UNSPECIFIED;
      case 1: return PERMISSION_INSECURE_UNAUTHENTICATED;
      case 2: return PERMISSION_AUTHENTICATED;
      case 3: return PERMISSION_QUERY_ONLINE;
      case 4: return PERMISSION_QUERY_OFFLINE;
      case 5: return PERMISSION_MONITORING_CREATE;
      case 6: return PERMISSION_MONITORING_READ;
      case 7: return PERMISSION_TEAM_ADD;
      case 8: return PERMISSION_TEAM_DELETE;
      case 9: return PERMISSION_TEAM_LIST;
      case 10: return PERMISSION_TEAM_ADMIN;
      case 11: return PERMISSION_DEPLOY_READ;
      case 12: return PERMISSION_DEPLOY_CREATE;
      case 13: return PERMISSION_DEPLOY_PREVIEW;
      case 14: return PERMISSION_DEPLOY_REDEPLOY;
      case 15: return PERMISSION_LOGS_LIST;
      case 16: return PERMISSION_CRON_READ;
      case 17: return PERMISSION_CRON_CREATE;
      case 18: return PERMISSION_SECRETS_WRITE;
      case 19: return PERMISSION_SECRETS_DECRYPT;
      case 20: return PERMISSION_SECRETS_LIST;
      case 21: return PERMISSION_TOKENS_WRITE;
      case 22: return PERMISSION_TOKENS_LIST;
      case 23: return PERMISSION_MIGRATE_READ;
      case 24: return PERMISSION_MIGRATE_PLAN;
      case 25: return PERMISSION_MIGRATE_EXECUTE;
      case 26: return PERMISSION_PROJECT_CREATE;
      case 27: return PERMISSION_CHALK_ADMIN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Permission>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Permission> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Permission>() {
          public Permission findValueByNumber(int number) {
            return Permission.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.auth.v1.PermissionsProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Permission[] VALUES = values();

  public static Permission valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Permission(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:chalk.auth.v1.Permission)
}

