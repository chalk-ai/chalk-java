// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/auth/v1/permissions.proto
// Protobuf Java Version: 4.26.1

package ai.chalk.protos.chalk.auth.v1;

public final class PermissionsProto {
  private PermissionsProto() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      PermissionsProto.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(ai.chalk.protos.chalk.auth.v1.PermissionsProto.permission);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public static final int PERMISSION_FIELD_NUMBER = 2000;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      ai.chalk.protos.chalk.auth.v1.Permission> permission = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        ai.chalk.protos.chalk.auth.v1.Permission.class,
        null);

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037chalk/auth/v1/permissions.proto\022\rchalk" +
      ".auth.v1\032\035chalk/utils/v1/encoding.proto\032" +
      " google/protobuf/descriptor.proto*\351\t\n\nPe" +
      "rmission\022\032\n\026PERMISSION_UNSPECIFIED\020\000\022\'\n#" +
      "PERMISSION_INSECURE_UNAUTHENTICATED\020\001\022\034\n" +
      "\030PERMISSION_AUTHENTICATED\020\002\022\033\n\027PERMISSIO" +
      "N_QUERY_ONLINE\020\003\022\034\n\030PERMISSION_QUERY_OFF" +
      "LINE\020\004\022 \n\034PERMISSION_MONITORING_CREATE\020\005" +
      "\022\036\n\032PERMISSION_MONITORING_READ\020\006\022\027\n\023PERM" +
      "ISSION_TEAM_ADD\020\007\022\032\n\026PERMISSION_TEAM_DEL" +
      "ETE\020\010\022\030\n\024PERMISSION_TEAM_LIST\020\t\022\031\n\025PERMI" +
      "SSION_TEAM_ADMIN\020\n\022\032\n\026PERMISSION_DEPLOY_" +
      "READ\020\013\022\034\n\030PERMISSION_DEPLOY_CREATE\020\014\022\035\n\031" +
      "PERMISSION_DEPLOY_PREVIEW\020\r\022\036\n\032PERMISSIO" +
      "N_DEPLOY_REDEPLOY\020\016\022\030\n\024PERMISSION_LOGS_L" +
      "IST\020\017\022\030\n\024PERMISSION_CRON_READ\020\020\022\032\n\026PERMI" +
      "SSION_CRON_CREATE\020\021\022\034\n\030PERMISSION_SECRET" +
      "S_WRITE\020\022\022\036\n\032PERMISSION_SECRETS_DECRYPT\020" +
      "\023\022\033\n\027PERMISSION_SECRETS_LIST\020\024\022\033\n\027PERMIS" +
      "SION_TOKENS_WRITE\020\025\022\032\n\026PERMISSION_TOKENS" +
      "_LIST\020\026\022\033\n\027PERMISSION_MIGRATE_READ\020\027\022\033\n\027" +
      "PERMISSION_MIGRATE_PLAN\020\030\022\036\n\032PERMISSION_" +
      "MIGRATE_EXECUTE\020\031\022\035\n\031PERMISSION_PROJECT_" +
      "CREATE\020\032\032\272\003\342\241\'\265\003\n\020\010\003\022\014query.online\n\021\010\004\022\r" +
      "query.offline\n\025\010\005\022\021monitoring.create\n\023\010\006" +
      "\022\017monitoring.read\n\014\010\007\022\010team.add\n\017\010\010\022\013tea" +
      "m.delete\n\r\010\t\022\tteam.list\n\016\010\n\022\nteam.admin\n" +
      "\017\010\013\022\013deploy.read\n\021\010\014\022\rdeploy.create\n\022\010\r\022" +
      "\016deploy.preview\n\023\010\016\022\017deploy.redeploy\n\r\010\017" +
      "\022\tlogs.list\n\r\010\020\022\tcron.read\n\017\010\021\022\013cron.cre" +
      "ate\n\021\010\022\022\rsecrets.write\n\023\010\023\022\017secrets.decr" +
      "ypt\n\020\010\024\022\014secrets.list\n\020\010\025\022\014tokens.write\n" +
      "\017\010\026\022\013tokens.list\n\020\010\027\022\014migrate.read\n\020\010\030\022\014" +
      "migrate.plan\n\023\010\031\022\017migrate.execute\n\022\010\032\022\016p" +
      "roject.create:Z\n\npermission\022\036.google.pro" +
      "tobuf.MethodOptions\030\320\017 \001(\0162\031.chalk.auth." +
      "v1.PermissionR\npermissionB\227\001\n\035ai.chalk.p" +
      "rotos.chalk.auth.v1B\020PermissionsProtoP\001Z" +
      "\016auth/v1;authv1\242\002\003CAX\252\002\rChalk.Auth.V1\312\002\r" +
      "Chalk\\Auth\\V1\342\002\031Chalk\\Auth\\V1\\GPBMetadat" +
      "a\352\002\017Chalk::Auth::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          ai.chalk.protos.chalk.utils.v1.EncodingProto.getDescriptor(),
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        });
    permission.internalInit(descriptor.getExtensions().get(0));
    descriptor.resolveAllFeaturesImmutable();
    ai.chalk.protos.chalk.utils.v1.EncodingProto.getDescriptor();
    com.google.protobuf.DescriptorProtos.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(ai.chalk.protos.chalk.utils.v1.EncodingProto.encoding);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
