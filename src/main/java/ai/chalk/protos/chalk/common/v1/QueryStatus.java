// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/common/v1/dataset_response.proto

// Protobuf Java Version: 4.26.1
package ai.chalk.protos.chalk.common.v1;

/**
 * Protobuf enum {@code chalk.common.v1.QueryStatus}
 */
public enum QueryStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Default value, should not be used
   * </pre>
   *
   * <code>QUERY_STATUS_UNSPECIFIED = 0;</code>
   */
  QUERY_STATUS_UNSPECIFIED(0),
  /**
   * <pre>
   * Pending submission to the database.
   * </pre>
   *
   * <code>QUERY_STATUS_PENDING_SUBMISSION = 1;</code>
   */
  QUERY_STATUS_PENDING_SUBMISSION(1),
  /**
   * <pre>
   * Submitted to the database, but not yet running
   * </pre>
   *
   * <code>QUERY_STATUS_SUBMITTED = 2;</code>
   */
  QUERY_STATUS_SUBMITTED(2),
  /**
   * <pre>
   * Running in the database.
   * </pre>
   *
   * <code>QUERY_STATUS_RUNNING = 3;</code>
   */
  QUERY_STATUS_RUNNING(3),
  /**
   * <pre>
   * Error with either submitting or running the job.
   * </pre>
   *
   * <code>QUERY_STATUS_ERROR = 4;</code>
   */
  QUERY_STATUS_ERROR(4),
  /**
   * <pre>
   * The job did not complete before an expiration deadline, so there are no results.
   * </pre>
   *
   * <code>QUERY_STATUS_EXPIRED = 5;</code>
   */
  QUERY_STATUS_EXPIRED(5),
  /**
   * <pre>
   * Manually cancelled before it errored or finished successfully.
   * </pre>
   *
   * <code>QUERY_STATUS_QUERY_STATUS_CANCELLED = 6;</code>
   */
  QUERY_STATUS_QUERY_STATUS_CANCELLED(6),
  /**
   * <pre>
   * Successfully ran the job.
   * </pre>
   *
   * <code>QUERY_STATUS_SUCCESSFUL = 7;</code>
   */
  QUERY_STATUS_SUCCESSFUL(7),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      QueryStatus.class.getName());
  }
  /**
   * <pre>
   * Default value, should not be used
   * </pre>
   *
   * <code>QUERY_STATUS_UNSPECIFIED = 0;</code>
   */
  public static final int QUERY_STATUS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Pending submission to the database.
   * </pre>
   *
   * <code>QUERY_STATUS_PENDING_SUBMISSION = 1;</code>
   */
  public static final int QUERY_STATUS_PENDING_SUBMISSION_VALUE = 1;
  /**
   * <pre>
   * Submitted to the database, but not yet running
   * </pre>
   *
   * <code>QUERY_STATUS_SUBMITTED = 2;</code>
   */
  public static final int QUERY_STATUS_SUBMITTED_VALUE = 2;
  /**
   * <pre>
   * Running in the database.
   * </pre>
   *
   * <code>QUERY_STATUS_RUNNING = 3;</code>
   */
  public static final int QUERY_STATUS_RUNNING_VALUE = 3;
  /**
   * <pre>
   * Error with either submitting or running the job.
   * </pre>
   *
   * <code>QUERY_STATUS_ERROR = 4;</code>
   */
  public static final int QUERY_STATUS_ERROR_VALUE = 4;
  /**
   * <pre>
   * The job did not complete before an expiration deadline, so there are no results.
   * </pre>
   *
   * <code>QUERY_STATUS_EXPIRED = 5;</code>
   */
  public static final int QUERY_STATUS_EXPIRED_VALUE = 5;
  /**
   * <pre>
   * Manually cancelled before it errored or finished successfully.
   * </pre>
   *
   * <code>QUERY_STATUS_QUERY_STATUS_CANCELLED = 6;</code>
   */
  public static final int QUERY_STATUS_QUERY_STATUS_CANCELLED_VALUE = 6;
  /**
   * <pre>
   * Successfully ran the job.
   * </pre>
   *
   * <code>QUERY_STATUS_SUCCESSFUL = 7;</code>
   */
  public static final int QUERY_STATUS_SUCCESSFUL_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static QueryStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static QueryStatus forNumber(int value) {
    switch (value) {
      case 0: return QUERY_STATUS_UNSPECIFIED;
      case 1: return QUERY_STATUS_PENDING_SUBMISSION;
      case 2: return QUERY_STATUS_SUBMITTED;
      case 3: return QUERY_STATUS_RUNNING;
      case 4: return QUERY_STATUS_ERROR;
      case 5: return QUERY_STATUS_EXPIRED;
      case 6: return QUERY_STATUS_QUERY_STATUS_CANCELLED;
      case 7: return QUERY_STATUS_SUCCESSFUL;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<QueryStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      QueryStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<QueryStatus>() {
          public QueryStatus findValueByNumber(int number) {
            return QueryStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.common.v1.DatasetResponseProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final QueryStatus[] VALUES = values();

  public static QueryStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private QueryStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:chalk.common.v1.QueryStatus)
}

