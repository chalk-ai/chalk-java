// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/common/v1/offline_query.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.common.v1;

public interface GetOfflineQueryJobResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.common.v1.GetOfflineQueryJobResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>bool is_finished = 1 [json_name = "isFinished"];</code>
   * @return The isFinished.
   */
  boolean getIsFinished();

  /**
   * <code>int32 version = 2 [json_name = "version"];</code>
   * @return The version.
   */
  int getVersion();

  /**
   * <code>repeated string urls = 3 [json_name = "urls"];</code>
   * @return A list containing the urls.
   */
  java.util.List<java.lang.String>
      getUrlsList();
  /**
   * <code>repeated string urls = 3 [json_name = "urls"];</code>
   * @return The count of urls.
   */
  int getUrlsCount();
  /**
   * <code>repeated string urls = 3 [json_name = "urls"];</code>
   * @param index The index of the element to return.
   * @return The urls at the given index.
   */
  java.lang.String getUrls(int index);
  /**
   * <code>repeated string urls = 3 [json_name = "urls"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the urls at the given index.
   */
  com.google.protobuf.ByteString
      getUrlsBytes(int index);

  /**
   * <code>repeated .chalk.common.v1.ChalkError errors = 4 [json_name = "errors"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.common.v1.ChalkError> 
      getErrorsList();
  /**
   * <code>repeated .chalk.common.v1.ChalkError errors = 4 [json_name = "errors"];</code>
   */
  ai.chalk.protos.chalk.common.v1.ChalkError getErrors(int index);
  /**
   * <code>repeated .chalk.common.v1.ChalkError errors = 4 [json_name = "errors"];</code>
   */
  int getErrorsCount();
  /**
   * <code>repeated .chalk.common.v1.ChalkError errors = 4 [json_name = "errors"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.common.v1.ChalkErrorOrBuilder> 
      getErrorsOrBuilderList();
  /**
   * <code>repeated .chalk.common.v1.ChalkError errors = 4 [json_name = "errors"];</code>
   */
  ai.chalk.protos.chalk.common.v1.ChalkErrorOrBuilder getErrorsOrBuilder(
      int index);

  /**
   * <code>optional .chalk.common.v1.ColumnMetadataList columns = 5 [json_name = "columns"];</code>
   * @return Whether the columns field is set.
   */
  boolean hasColumns();
  /**
   * <code>optional .chalk.common.v1.ColumnMetadataList columns = 5 [json_name = "columns"];</code>
   * @return The columns.
   */
  ai.chalk.protos.chalk.common.v1.ColumnMetadataList getColumns();
  /**
   * <code>optional .chalk.common.v1.ColumnMetadataList columns = 5 [json_name = "columns"];</code>
   */
  ai.chalk.protos.chalk.common.v1.ColumnMetadataListOrBuilder getColumnsOrBuilder();
}
