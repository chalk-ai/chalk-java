// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/graph/v1/graph.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.graph.v1;

public interface DataFrameTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.graph.v1.DataFrameType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string root_namespace = 1 [json_name = "rootNamespace"];</code>
   * @return The rootNamespace.
   */
  java.lang.String getRootNamespace();
  /**
   * <code>string root_namespace = 1 [json_name = "rootNamespace"];</code>
   * @return The bytes for rootNamespace.
   */
  com.google.protobuf.ByteString
      getRootNamespaceBytes();

  /**
   * <code>repeated .chalk.graph.v1.FeatureReference required_columns = 2 [json_name = "requiredColumns"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureReference> 
      getRequiredColumnsList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference required_columns = 2 [json_name = "requiredColumns"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReference getRequiredColumns(int index);
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference required_columns = 2 [json_name = "requiredColumns"];</code>
   */
  int getRequiredColumnsCount();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference required_columns = 2 [json_name = "requiredColumns"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder> 
      getRequiredColumnsOrBuilderList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference required_columns = 2 [json_name = "requiredColumns"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder getRequiredColumnsOrBuilder(
      int index);

  /**
   * <code>repeated .chalk.graph.v1.FeatureReference optional_columns = 3 [json_name = "optionalColumns"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureReference> 
      getOptionalColumnsList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference optional_columns = 3 [json_name = "optionalColumns"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReference getOptionalColumns(int index);
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference optional_columns = 3 [json_name = "optionalColumns"];</code>
   */
  int getOptionalColumnsCount();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference optional_columns = 3 [json_name = "optionalColumns"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder> 
      getOptionalColumnsOrBuilderList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference optional_columns = 3 [json_name = "optionalColumns"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder getOptionalColumnsOrBuilder(
      int index);

  /**
   * <code>.chalk.expression.v1.LogicalExprNode filter = 4 [json_name = "filter"];</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <code>.chalk.expression.v1.LogicalExprNode filter = 4 [json_name = "filter"];</code>
   * @return The filter.
   */
  ai.chalk.protos.chalk.expression.v1.LogicalExprNode getFilter();
  /**
   * <code>.chalk.expression.v1.LogicalExprNode filter = 4 [json_name = "filter"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder getFilterOrBuilder();

  /**
   * <code>optional uint64 limit = 5 [json_name = "limit"];</code>
   * @return Whether the limit field is set.
   */
  boolean hasLimit();
  /**
   * <code>optional uint64 limit = 5 [json_name = "limit"];</code>
   * @return The limit.
   */
  long getLimit();
}
