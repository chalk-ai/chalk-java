// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/graph/v1/graph.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.graph.v1;

public interface ScalarFeatureTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.graph.v1.ScalarFeatureType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <code>string namespace = 2 [json_name = "namespace"];</code>
   * @return The namespace.
   */
  java.lang.String getNamespace();
  /**
   * <code>string namespace = 2 [json_name = "namespace"];</code>
   * @return The bytes for namespace.
   */
  com.google.protobuf.ByteString
      getNamespaceBytes();

  /**
   * <code>bool is_autogenerated = 3 [json_name = "isAutogenerated"];</code>
   * @return The isAutogenerated.
   */
  boolean getIsAutogenerated();

  /**
   * <code>bool no_display = 4 [json_name = "noDisplay"];</code>
   * @return The noDisplay.
   */
  boolean getNoDisplay();

  /**
   * <code>bool is_primary = 5 [json_name = "isPrimary"];</code>
   * @return The isPrimary.
   */
  boolean getIsPrimary();

  /**
   * <code>bool is_nullable = 6 [json_name = "isNullable"];</code>
   * @return The isNullable.
   */
  boolean getIsNullable();

  /**
   * <code>optional uint64 internal_version = 7 [json_name = "internalVersion"];</code>
   * @return Whether the internalVersion field is set.
   */
  boolean hasInternalVersion();
  /**
   * <code>optional uint64 internal_version = 7 [json_name = "internalVersion"];</code>
   * @return The internalVersion.
   */
  long getInternalVersion();

  /**
   * <pre>
   * This represents whatever arg the user passed into the `feature()` call.
   * If both set, this should take precedence over the value in `FeatureSet`.
   * If unset here, the value in `FeatureSet` should be used.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_staleness_duration = 8 [json_name = "maxStalenessDuration"];</code>
   * @return Whether the maxStalenessDuration field is set.
   */
  boolean hasMaxStalenessDuration();
  /**
   * <pre>
   * This represents whatever arg the user passed into the `feature()` call.
   * If both set, this should take precedence over the value in `FeatureSet`.
   * If unset here, the value in `FeatureSet` should be used.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_staleness_duration = 8 [json_name = "maxStalenessDuration"];</code>
   * @return The maxStalenessDuration.
   */
  com.google.protobuf.Duration getMaxStalenessDuration();
  /**
   * <pre>
   * This represents whatever arg the user passed into the `feature()` call.
   * If both set, this should take precedence over the value in `FeatureSet`.
   * If unset here, the value in `FeatureSet` should be used.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_staleness_duration = 8 [json_name = "maxStalenessDuration"];</code>
   */
  com.google.protobuf.DurationOrBuilder getMaxStalenessDurationOrBuilder();

  /**
   * <code>.google.protobuf.Duration offline_ttl_duration = 10 [json_name = "offlineTtlDuration"];</code>
   * @return Whether the offlineTtlDuration field is set.
   */
  boolean hasOfflineTtlDuration();
  /**
   * <code>.google.protobuf.Duration offline_ttl_duration = 10 [json_name = "offlineTtlDuration"];</code>
   * @return The offlineTtlDuration.
   */
  com.google.protobuf.Duration getOfflineTtlDuration();
  /**
   * <code>.google.protobuf.Duration offline_ttl_duration = 10 [json_name = "offlineTtlDuration"];</code>
   */
  com.google.protobuf.DurationOrBuilder getOfflineTtlDurationOrBuilder();

  /**
   * <code>.chalk.arrow.v1.ArrowType arrow_type = 11 [json_name = "arrowType"];</code>
   * @return Whether the arrowType field is set.
   */
  boolean hasArrowType();
  /**
   * <code>.chalk.arrow.v1.ArrowType arrow_type = 11 [json_name = "arrowType"];</code>
   * @return The arrowType.
   */
  ai.chalk.protos.chalk.arrow.v1.ArrowType getArrowType();
  /**
   * <code>.chalk.arrow.v1.ArrowType arrow_type = 11 [json_name = "arrowType"];</code>
   */
  ai.chalk.protos.chalk.arrow.v1.ArrowTypeOrBuilder getArrowTypeOrBuilder();

  /**
   * <code>.chalk.graph.v1.VersionInfo version = 12 [json_name = "version"];</code>
   * @return Whether the version field is set.
   */
  boolean hasVersion();
  /**
   * <code>.chalk.graph.v1.VersionInfo version = 12 [json_name = "version"];</code>
   * @return The version.
   */
  ai.chalk.protos.chalk.graph.v1.VersionInfo getVersion();
  /**
   * <code>.chalk.graph.v1.VersionInfo version = 12 [json_name = "version"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.VersionInfoOrBuilder getVersionOrBuilder();

  /**
   * <code>.chalk.graph.v1.WindowInfo window_info = 13 [json_name = "windowInfo"];</code>
   * @return Whether the windowInfo field is set.
   */
  boolean hasWindowInfo();
  /**
   * <code>.chalk.graph.v1.WindowInfo window_info = 13 [json_name = "windowInfo"];</code>
   * @return The windowInfo.
   */
  ai.chalk.protos.chalk.graph.v1.WindowInfo getWindowInfo();
  /**
   * <code>.chalk.graph.v1.WindowInfo window_info = 13 [json_name = "windowInfo"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.WindowInfoOrBuilder getWindowInfoOrBuilder();

  /**
   * <code>.chalk.arrow.v1.ScalarValue default_value = 14 [json_name = "defaultValue"];</code>
   * @return Whether the defaultValue field is set.
   */
  boolean hasDefaultValue();
  /**
   * <code>.chalk.arrow.v1.ScalarValue default_value = 14 [json_name = "defaultValue"];</code>
   * @return The defaultValue.
   */
  ai.chalk.protos.chalk.arrow.v1.ScalarValue getDefaultValue();
  /**
   * <code>.chalk.arrow.v1.ScalarValue default_value = 14 [json_name = "defaultValue"];</code>
   */
  ai.chalk.protos.chalk.arrow.v1.ScalarValueOrBuilder getDefaultValueOrBuilder();

  /**
   * <code>repeated string tags = 15 [json_name = "tags"];</code>
   * @return A list containing the tags.
   */
  java.util.List<java.lang.String>
      getTagsList();
  /**
   * <code>repeated string tags = 15 [json_name = "tags"];</code>
   * @return The count of tags.
   */
  int getTagsCount();
  /**
   * <code>repeated string tags = 15 [json_name = "tags"];</code>
   * @param index The index of the element to return.
   * @return The tags at the given index.
   */
  java.lang.String getTags(int index);
  /**
   * <code>repeated string tags = 15 [json_name = "tags"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the tags at the given index.
   */
  com.google.protobuf.ByteString
      getTagsBytes(int index);

  /**
   * <code>optional string description = 16 [json_name = "description"];</code>
   * @return Whether the description field is set.
   */
  boolean hasDescription();
  /**
   * <code>optional string description = 16 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <code>optional string description = 16 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <code>optional string owner = 17 [json_name = "owner"];</code>
   * @return Whether the owner field is set.
   */
  boolean hasOwner();
  /**
   * <code>optional string owner = 17 [json_name = "owner"];</code>
   * @return The owner.
   */
  java.lang.String getOwner();
  /**
   * <code>optional string owner = 17 [json_name = "owner"];</code>
   * @return The bytes for owner.
   */
  com.google.protobuf.ByteString
      getOwnerBytes();

  /**
   * <code>.chalk.expression.v1.LogicalExprNode expression = 18 [json_name = "expression"];</code>
   * @return Whether the expression field is set.
   */
  boolean hasExpression();
  /**
   * <code>.chalk.expression.v1.LogicalExprNode expression = 18 [json_name = "expression"];</code>
   * @return The expression.
   */
  ai.chalk.protos.chalk.expression.v1.LogicalExprNode getExpression();
  /**
   * <code>.chalk.expression.v1.LogicalExprNode expression = 18 [json_name = "expression"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder getExpressionOrBuilder();

  /**
   * <code>repeated .chalk.graph.v1.FeatureValidation validations = 19 [json_name = "validations"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureValidation> 
      getValidationsList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureValidation validations = 19 [json_name = "validations"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureValidation getValidations(int index);
  /**
   * <code>repeated .chalk.graph.v1.FeatureValidation validations = 19 [json_name = "validations"];</code>
   */
  int getValidationsCount();
  /**
   * <code>repeated .chalk.graph.v1.FeatureValidation validations = 19 [json_name = "validations"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.graph.v1.FeatureValidationOrBuilder> 
      getValidationsOrBuilderList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureValidation validations = 19 [json_name = "validations"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureValidationOrBuilder getValidationsOrBuilder(
      int index);

  /**
   * <code>.chalk.graph.v1.FeatureReference last_for = 20 [json_name = "lastFor"];</code>
   * @return Whether the lastFor field is set.
   */
  boolean hasLastFor();
  /**
   * <code>.chalk.graph.v1.FeatureReference last_for = 20 [json_name = "lastFor"];</code>
   * @return The lastFor.
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReference getLastFor();
  /**
   * <code>.chalk.graph.v1.FeatureReference last_for = 20 [json_name = "lastFor"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder getLastForOrBuilder();

  /**
   * <pre>
   * This represents whatever arg the user passed into the `feature()` call.
   * If both set, this should take precedence over the value in `FeatureSet`.
   * If unset here, the value in `FeatureSet` should be used.
   * </pre>
   *
   * <code>optional bool etl_offline_to_online = 21 [json_name = "etlOfflineToOnline"];</code>
   * @return Whether the etlOfflineToOnline field is set.
   */
  boolean hasEtlOfflineToOnline();
  /**
   * <pre>
   * This represents whatever arg the user passed into the `feature()` call.
   * If both set, this should take precedence over the value in `FeatureSet`.
   * If unset here, the value in `FeatureSet` should be used.
   * </pre>
   *
   * <code>optional bool etl_offline_to_online = 21 [json_name = "etlOfflineToOnline"];</code>
   * @return The etlOfflineToOnline.
   */
  boolean getEtlOfflineToOnline();

  /**
   * <code>bool is_distance_pseudofeature = 22 [json_name = "isDistancePseudofeature"];</code>
   * @return The isDistancePseudofeature.
   */
  boolean getIsDistancePseudofeature();

  /**
   * <code>string attribute_name = 23 [json_name = "attributeName"];</code>
   * @return The attributeName.
   */
  java.lang.String getAttributeName();
  /**
   * <code>string attribute_name = 23 [json_name = "attributeName"];</code>
   * @return The bytes for attributeName.
   */
  com.google.protobuf.ByteString
      getAttributeNameBytes();

  /**
   * <pre>
   * Whether the user marked the feature as deprecated.
   * </pre>
   *
   * <code>bool is_deprecated = 24 [json_name = "isDeprecated"];</code>
   * @return The isDeprecated.
   */
  boolean getIsDeprecated();

  /**
   * <code>.chalk.graph.v1.CacheStrategy cache_strategy = 25 [json_name = "cacheStrategy"];</code>
   * @return The enum numeric value on the wire for cacheStrategy.
   */
  int getCacheStrategyValue();
  /**
   * <code>.chalk.graph.v1.CacheStrategy cache_strategy = 25 [json_name = "cacheStrategy"];</code>
   * @return The cacheStrategy.
   */
  ai.chalk.protos.chalk.graph.v1.CacheStrategy getCacheStrategy();

  /**
   * <pre>
   * optional because proto default is false, but chalk defaults to true
   * </pre>
   *
   * <code>optional bool store_online = 26 [json_name = "storeOnline"];</code>
   * @return Whether the storeOnline field is set.
   */
  boolean hasStoreOnline();
  /**
   * <pre>
   * optional because proto default is false, but chalk defaults to true
   * </pre>
   *
   * <code>optional bool store_online = 26 [json_name = "storeOnline"];</code>
   * @return The storeOnline.
   */
  boolean getStoreOnline();

  /**
   * <pre>
   * optional because proto default is false, but chalk defaults to true
   * </pre>
   *
   * <code>optional bool store_offline = 27 [json_name = "storeOffline"];</code>
   * @return Whether the storeOffline field is set.
   */
  boolean hasStoreOffline();
  /**
   * <pre>
   * optional because proto default is false, but chalk defaults to true
   * </pre>
   *
   * <code>optional bool store_offline = 27 [json_name = "storeOffline"];</code>
   * @return The storeOffline.
   */
  boolean getStoreOffline();
}
