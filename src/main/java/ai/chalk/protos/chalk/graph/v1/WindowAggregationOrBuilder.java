// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/graph/v1/graph.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.graph.v1;

public interface WindowAggregationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.graph.v1.WindowAggregation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string namespace = 1 [json_name = "namespace"];</code>
   * @return The namespace.
   */
  java.lang.String getNamespace();
  /**
   * <code>string namespace = 1 [json_name = "namespace"];</code>
   * @return The bytes for namespace.
   */
  com.google.protobuf.ByteString
      getNamespaceBytes();

  /**
   * <code>repeated .chalk.graph.v1.FeatureReference group_by = 2 [json_name = "groupBy"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureReference> 
      getGroupByList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference group_by = 2 [json_name = "groupBy"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReference getGroupBy(int index);
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference group_by = 2 [json_name = "groupBy"];</code>
   */
  int getGroupByCount();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference group_by = 2 [json_name = "groupBy"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder> 
      getGroupByOrBuilderList();
  /**
   * <code>repeated .chalk.graph.v1.FeatureReference group_by = 2 [json_name = "groupBy"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder getGroupByOrBuilder(
      int index);

  /**
   * <code>.google.protobuf.Duration bucket_duration = 3 [json_name = "bucketDuration"];</code>
   * @return Whether the bucketDuration field is set.
   */
  boolean hasBucketDuration();
  /**
   * <code>.google.protobuf.Duration bucket_duration = 3 [json_name = "bucketDuration"];</code>
   * @return The bucketDuration.
   */
  com.google.protobuf.Duration getBucketDuration();
  /**
   * <code>.google.protobuf.Duration bucket_duration = 3 [json_name = "bucketDuration"];</code>
   */
  com.google.protobuf.DurationOrBuilder getBucketDurationOrBuilder();

  /**
   * <code>string aggregation = 4 [json_name = "aggregation"];</code>
   * @return The aggregation.
   */
  java.lang.String getAggregation();
  /**
   * <code>string aggregation = 4 [json_name = "aggregation"];</code>
   * @return The bytes for aggregation.
   */
  com.google.protobuf.ByteString
      getAggregationBytes();

  /**
   * <code>optional .chalk.graph.v1.FeatureReference aggregate_on = 5 [json_name = "aggregateOn"];</code>
   * @return Whether the aggregateOn field is set.
   */
  boolean hasAggregateOn();
  /**
   * <code>optional .chalk.graph.v1.FeatureReference aggregate_on = 5 [json_name = "aggregateOn"];</code>
   * @return The aggregateOn.
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReference getAggregateOn();
  /**
   * <code>optional .chalk.graph.v1.FeatureReference aggregate_on = 5 [json_name = "aggregateOn"];</code>
   */
  ai.chalk.protos.chalk.graph.v1.FeatureReferenceOrBuilder getAggregateOnOrBuilder();

  /**
   * <code>.chalk.arrow.v1.ArrowType arrow_type = 6 [json_name = "arrowType"];</code>
   * @return Whether the arrowType field is set.
   */
  boolean hasArrowType();
  /**
   * <code>.chalk.arrow.v1.ArrowType arrow_type = 6 [json_name = "arrowType"];</code>
   * @return The arrowType.
   */
  ai.chalk.protos.chalk.arrow.v1.ArrowType getArrowType();
  /**
   * <code>.chalk.arrow.v1.ArrowType arrow_type = 6 [json_name = "arrowType"];</code>
   */
  ai.chalk.protos.chalk.arrow.v1.ArrowTypeOrBuilder getArrowTypeOrBuilder();

  /**
   * <code>repeated .chalk.expression.v1.LogicalExprNode filters = 7 [json_name = "filters"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.expression.v1.LogicalExprNode> 
      getFiltersList();
  /**
   * <code>repeated .chalk.expression.v1.LogicalExprNode filters = 7 [json_name = "filters"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.LogicalExprNode getFilters(int index);
  /**
   * <code>repeated .chalk.expression.v1.LogicalExprNode filters = 7 [json_name = "filters"];</code>
   */
  int getFiltersCount();
  /**
   * <code>repeated .chalk.expression.v1.LogicalExprNode filters = 7 [json_name = "filters"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder> 
      getFiltersOrBuilderList();
  /**
   * <code>repeated .chalk.expression.v1.LogicalExprNode filters = 7 [json_name = "filters"];</code>
   */
  ai.chalk.protos.chalk.expression.v1.LogicalExprNodeOrBuilder getFiltersOrBuilder(
      int index);

  /**
   * <pre>
   * The resolver to use for back-filling the materialized aggregate.
   * If not provided, the data will be back filled using the resolver
   * that would run for an offline query.
   * </pre>
   *
   * <code>optional string backfill_resolver = 8 [json_name = "backfillResolver"];</code>
   * @return Whether the backfillResolver field is set.
   */
  boolean hasBackfillResolver();
  /**
   * <pre>
   * The resolver to use for back-filling the materialized aggregate.
   * If not provided, the data will be back filled using the resolver
   * that would run for an offline query.
   * </pre>
   *
   * <code>optional string backfill_resolver = 8 [json_name = "backfillResolver"];</code>
   * @return The backfillResolver.
   */
  java.lang.String getBackfillResolver();
  /**
   * <pre>
   * The resolver to use for back-filling the materialized aggregate.
   * If not provided, the data will be back filled using the resolver
   * that would run for an offline query.
   * </pre>
   *
   * <code>optional string backfill_resolver = 8 [json_name = "backfillResolver"];</code>
   * @return The bytes for backfillResolver.
   */
  com.google.protobuf.ByteString
      getBackfillResolverBytes();

  /**
   * <pre>
   * The amount of time before the start of the previous backfill
   * to consider when running the backfill resolver. Set this parameter
   * to the be equal to the latest arriving data in the backfill window.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration backfill_lookback_duration = 9 [json_name = "backfillLookbackDuration"];</code>
   * @return Whether the backfillLookbackDuration field is set.
   */
  boolean hasBackfillLookbackDuration();
  /**
   * <pre>
   * The amount of time before the start of the previous backfill
   * to consider when running the backfill resolver. Set this parameter
   * to the be equal to the latest arriving data in the backfill window.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration backfill_lookback_duration = 9 [json_name = "backfillLookbackDuration"];</code>
   * @return The backfillLookbackDuration.
   */
  com.google.protobuf.Duration getBackfillLookbackDuration();
  /**
   * <pre>
   * The amount of time before the start of the previous backfill
   * to consider when running the backfill resolver. Set this parameter
   * to the be equal to the latest arriving data in the backfill window.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration backfill_lookback_duration = 9 [json_name = "backfillLookbackDuration"];</code>
   */
  com.google.protobuf.DurationOrBuilder getBackfillLookbackDurationOrBuilder();

  /**
   * <pre>
   * The time at which to start back filling the materialized aggregate.
   * If not provided, the backfill consider the earliest available data returned
   * by the `backfill_resolver`.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp backfill_start_time = 10 [json_name = "backfillStartTime"];</code>
   * @return Whether the backfillStartTime field is set.
   */
  boolean hasBackfillStartTime();
  /**
   * <pre>
   * The time at which to start back filling the materialized aggregate.
   * If not provided, the backfill consider the earliest available data returned
   * by the `backfill_resolver`.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp backfill_start_time = 10 [json_name = "backfillStartTime"];</code>
   * @return The backfillStartTime.
   */
  com.google.protobuf.Timestamp getBackfillStartTime();
  /**
   * <pre>
   * The time at which to start back filling the materialized aggregate.
   * If not provided, the backfill consider the earliest available data returned
   * by the `backfill_resolver`.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp backfill_start_time = 10 [json_name = "backfillStartTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getBackfillStartTimeOrBuilder();

  /**
   * <pre>
   * The resolver to use for continuous updates to the materialized aggregate.
   * If not provided, the data will be updated using the resolver that would run
   * for an online query.
   * </pre>
   *
   * <code>optional string continuous_resolver = 11 [json_name = "continuousResolver"];</code>
   * @return Whether the continuousResolver field is set.
   */
  boolean hasContinuousResolver();
  /**
   * <pre>
   * The resolver to use for continuous updates to the materialized aggregate.
   * If not provided, the data will be updated using the resolver that would run
   * for an online query.
   * </pre>
   *
   * <code>optional string continuous_resolver = 11 [json_name = "continuousResolver"];</code>
   * @return The continuousResolver.
   */
  java.lang.String getContinuousResolver();
  /**
   * <pre>
   * The resolver to use for continuous updates to the materialized aggregate.
   * If not provided, the data will be updated using the resolver that would run
   * for an online query.
   * </pre>
   *
   * <code>optional string continuous_resolver = 11 [json_name = "continuousResolver"];</code>
   * @return The bytes for continuousResolver.
   */
  com.google.protobuf.ByteString
      getContinuousResolverBytes();

  /**
   * <pre>
   * The period for which to use the continuous resolver, instead
   * of relying upon the last backfill. If not provided, and a continuous
   * resolver is provided, this will be set to backfill_lookback_duration.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration continuous_buffer_duration = 12 [json_name = "continuousBufferDuration"];</code>
   * @return Whether the continuousBufferDuration field is set.
   */
  boolean hasContinuousBufferDuration();
  /**
   * <pre>
   * The period for which to use the continuous resolver, instead
   * of relying upon the last backfill. If not provided, and a continuous
   * resolver is provided, this will be set to backfill_lookback_duration.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration continuous_buffer_duration = 12 [json_name = "continuousBufferDuration"];</code>
   * @return The continuousBufferDuration.
   */
  com.google.protobuf.Duration getContinuousBufferDuration();
  /**
   * <pre>
   * The period for which to use the continuous resolver, instead
   * of relying upon the last backfill. If not provided, and a continuous
   * resolver is provided, this will be set to backfill_lookback_duration.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration continuous_buffer_duration = 12 [json_name = "continuousBufferDuration"];</code>
   */
  com.google.protobuf.DurationOrBuilder getContinuousBufferDurationOrBuilder();

  /**
   * <pre>
   * A crontab or duration string to specify the schedule for back filling the
   * materialized aggregate.
   * </pre>
   *
   * <code>optional string backfill_schedule = 13 [json_name = "backfillSchedule"];</code>
   * @return Whether the backfillSchedule field is set.
   */
  boolean hasBackfillSchedule();
  /**
   * <pre>
   * A crontab or duration string to specify the schedule for back filling the
   * materialized aggregate.
   * </pre>
   *
   * <code>optional string backfill_schedule = 13 [json_name = "backfillSchedule"];</code>
   * @return The backfillSchedule.
   */
  java.lang.String getBackfillSchedule();
  /**
   * <pre>
   * A crontab or duration string to specify the schedule for back filling the
   * materialized aggregate.
   * </pre>
   *
   * <code>optional string backfill_schedule = 13 [json_name = "backfillSchedule"];</code>
   * @return The bytes for backfillSchedule.
   */
  com.google.protobuf.ByteString
      getBackfillScheduleBytes();
}
