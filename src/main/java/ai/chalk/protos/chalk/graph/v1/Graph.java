// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/graph/v1/graph.proto

// Protobuf Java Version: 4.26.1
package ai.chalk.protos.chalk.graph.v1;

/**
 * Protobuf type {@code chalk.graph.v1.Graph}
 */
public final class Graph extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:chalk.graph.v1.Graph)
    GraphOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      Graph.class.getName());
  }
  // Use Graph.newBuilder() to construct.
  private Graph(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Graph() {
    featureSets_ = java.util.Collections.emptyList();
    resolvers_ = java.util.Collections.emptyList();
    streamResolvers_ = java.util.Collections.emptyList();
    sinkResolvers_ = java.util.Collections.emptyList();
    databaseSources_ = java.util.Collections.emptyList();
    streamSources_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.graph.v1.GraphProto.internal_static_chalk_graph_v1_Graph_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.chalk.protos.chalk.graph.v1.GraphProto.internal_static_chalk_graph_v1_Graph_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.chalk.protos.chalk.graph.v1.Graph.class, ai.chalk.protos.chalk.graph.v1.Graph.Builder.class);
  }

  public static final int FEATURE_SETS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureSet> featureSets_;
  /**
   * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureSet> getFeatureSetsList() {
    return featureSets_;
  }
  /**
   * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.FeatureSetOrBuilder> 
      getFeatureSetsOrBuilderList() {
    return featureSets_;
  }
  /**
   * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
   */
  @java.lang.Override
  public int getFeatureSetsCount() {
    return featureSets_.size();
  }
  /**
   * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.FeatureSet getFeatureSets(int index) {
    return featureSets_.get(index);
  }
  /**
   * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.FeatureSetOrBuilder getFeatureSetsOrBuilder(
      int index) {
    return featureSets_.get(index);
  }

  public static final int RESOLVERS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<ai.chalk.protos.chalk.graph.v1.Resolver> resolvers_;
  /**
   * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.graph.v1.Resolver> getResolversList() {
    return resolvers_;
  }
  /**
   * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.ResolverOrBuilder> 
      getResolversOrBuilderList() {
    return resolvers_;
  }
  /**
   * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
   */
  @java.lang.Override
  public int getResolversCount() {
    return resolvers_.size();
  }
  /**
   * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.Resolver getResolvers(int index) {
    return resolvers_.get(index);
  }
  /**
   * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.ResolverOrBuilder getResolversOrBuilder(
      int index) {
    return resolvers_.get(index);
  }

  public static final int STREAM_RESOLVERS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<ai.chalk.protos.chalk.graph.v1.StreamResolver> streamResolvers_;
  /**
   * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.graph.v1.StreamResolver> getStreamResolversList() {
    return streamResolvers_;
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.StreamResolverOrBuilder> 
      getStreamResolversOrBuilderList() {
    return streamResolvers_;
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
   */
  @java.lang.Override
  public int getStreamResolversCount() {
    return streamResolvers_.size();
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.StreamResolver getStreamResolvers(int index) {
    return streamResolvers_.get(index);
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.StreamResolverOrBuilder getStreamResolversOrBuilder(
      int index) {
    return streamResolvers_.get(index);
  }

  public static final int SINK_RESOLVERS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<ai.chalk.protos.chalk.graph.v1.SinkResolver> sinkResolvers_;
  /**
   * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.graph.v1.SinkResolver> getSinkResolversList() {
    return sinkResolvers_;
  }
  /**
   * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.SinkResolverOrBuilder> 
      getSinkResolversOrBuilderList() {
    return sinkResolvers_;
  }
  /**
   * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
   */
  @java.lang.Override
  public int getSinkResolversCount() {
    return sinkResolvers_.size();
  }
  /**
   * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.SinkResolver getSinkResolvers(int index) {
    return sinkResolvers_.get(index);
  }
  /**
   * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.SinkResolverOrBuilder getSinkResolversOrBuilder(
      int index) {
    return sinkResolvers_.get(index);
  }

  public static final int DATABASE_SOURCES_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<ai.chalk.protos.chalk.graph.v1.DatabaseSource> databaseSources_;
  /**
   * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.graph.v1.DatabaseSource> getDatabaseSourcesList() {
    return databaseSources_;
  }
  /**
   * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.DatabaseSourceOrBuilder> 
      getDatabaseSourcesOrBuilderList() {
    return databaseSources_;
  }
  /**
   * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
   */
  @java.lang.Override
  public int getDatabaseSourcesCount() {
    return databaseSources_.size();
  }
  /**
   * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.DatabaseSource getDatabaseSources(int index) {
    return databaseSources_.get(index);
  }
  /**
   * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.DatabaseSourceOrBuilder getDatabaseSourcesOrBuilder(
      int index) {
    return databaseSources_.get(index);
  }

  public static final int STREAM_SOURCES_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<ai.chalk.protos.chalk.graph.v1.StreamSource> streamSources_;
  /**
   * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.graph.v1.StreamSource> getStreamSourcesList() {
    return streamSources_;
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.StreamSourceOrBuilder> 
      getStreamSourcesOrBuilderList() {
    return streamSources_;
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
   */
  @java.lang.Override
  public int getStreamSourcesCount() {
    return streamSources_.size();
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.StreamSource getStreamSources(int index) {
    return streamSources_.get(index);
  }
  /**
   * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.StreamSourceOrBuilder getStreamSourcesOrBuilder(
      int index) {
    return streamSources_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < featureSets_.size(); i++) {
      output.writeMessage(1, featureSets_.get(i));
    }
    for (int i = 0; i < resolvers_.size(); i++) {
      output.writeMessage(2, resolvers_.get(i));
    }
    for (int i = 0; i < streamResolvers_.size(); i++) {
      output.writeMessage(3, streamResolvers_.get(i));
    }
    for (int i = 0; i < sinkResolvers_.size(); i++) {
      output.writeMessage(4, sinkResolvers_.get(i));
    }
    for (int i = 0; i < databaseSources_.size(); i++) {
      output.writeMessage(5, databaseSources_.get(i));
    }
    for (int i = 0; i < streamSources_.size(); i++) {
      output.writeMessage(6, streamSources_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < featureSets_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, featureSets_.get(i));
    }
    for (int i = 0; i < resolvers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, resolvers_.get(i));
    }
    for (int i = 0; i < streamResolvers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, streamResolvers_.get(i));
    }
    for (int i = 0; i < sinkResolvers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, sinkResolvers_.get(i));
    }
    for (int i = 0; i < databaseSources_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, databaseSources_.get(i));
    }
    for (int i = 0; i < streamSources_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, streamSources_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.chalk.protos.chalk.graph.v1.Graph)) {
      return super.equals(obj);
    }
    ai.chalk.protos.chalk.graph.v1.Graph other = (ai.chalk.protos.chalk.graph.v1.Graph) obj;

    if (!getFeatureSetsList()
        .equals(other.getFeatureSetsList())) return false;
    if (!getResolversList()
        .equals(other.getResolversList())) return false;
    if (!getStreamResolversList()
        .equals(other.getStreamResolversList())) return false;
    if (!getSinkResolversList()
        .equals(other.getSinkResolversList())) return false;
    if (!getDatabaseSourcesList()
        .equals(other.getDatabaseSourcesList())) return false;
    if (!getStreamSourcesList()
        .equals(other.getStreamSourcesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getFeatureSetsCount() > 0) {
      hash = (37 * hash) + FEATURE_SETS_FIELD_NUMBER;
      hash = (53 * hash) + getFeatureSetsList().hashCode();
    }
    if (getResolversCount() > 0) {
      hash = (37 * hash) + RESOLVERS_FIELD_NUMBER;
      hash = (53 * hash) + getResolversList().hashCode();
    }
    if (getStreamResolversCount() > 0) {
      hash = (37 * hash) + STREAM_RESOLVERS_FIELD_NUMBER;
      hash = (53 * hash) + getStreamResolversList().hashCode();
    }
    if (getSinkResolversCount() > 0) {
      hash = (37 * hash) + SINK_RESOLVERS_FIELD_NUMBER;
      hash = (53 * hash) + getSinkResolversList().hashCode();
    }
    if (getDatabaseSourcesCount() > 0) {
      hash = (37 * hash) + DATABASE_SOURCES_FIELD_NUMBER;
      hash = (53 * hash) + getDatabaseSourcesList().hashCode();
    }
    if (getStreamSourcesCount() > 0) {
      hash = (37 * hash) + STREAM_SOURCES_FIELD_NUMBER;
      hash = (53 * hash) + getStreamSourcesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static ai.chalk.protos.chalk.graph.v1.Graph parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static ai.chalk.protos.chalk.graph.v1.Graph parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.graph.v1.Graph parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.chalk.protos.chalk.graph.v1.Graph prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code chalk.graph.v1.Graph}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:chalk.graph.v1.Graph)
      ai.chalk.protos.chalk.graph.v1.GraphOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.chalk.protos.chalk.graph.v1.GraphProto.internal_static_chalk_graph_v1_Graph_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.chalk.protos.chalk.graph.v1.GraphProto.internal_static_chalk_graph_v1_Graph_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.chalk.protos.chalk.graph.v1.Graph.class, ai.chalk.protos.chalk.graph.v1.Graph.Builder.class);
    }

    // Construct using ai.chalk.protos.chalk.graph.v1.Graph.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (featureSetsBuilder_ == null) {
        featureSets_ = java.util.Collections.emptyList();
      } else {
        featureSets_ = null;
        featureSetsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (resolversBuilder_ == null) {
        resolvers_ = java.util.Collections.emptyList();
      } else {
        resolvers_ = null;
        resolversBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (streamResolversBuilder_ == null) {
        streamResolvers_ = java.util.Collections.emptyList();
      } else {
        streamResolvers_ = null;
        streamResolversBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (sinkResolversBuilder_ == null) {
        sinkResolvers_ = java.util.Collections.emptyList();
      } else {
        sinkResolvers_ = null;
        sinkResolversBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      if (databaseSourcesBuilder_ == null) {
        databaseSources_ = java.util.Collections.emptyList();
      } else {
        databaseSources_ = null;
        databaseSourcesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      if (streamSourcesBuilder_ == null) {
        streamSources_ = java.util.Collections.emptyList();
      } else {
        streamSources_ = null;
        streamSourcesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.chalk.protos.chalk.graph.v1.GraphProto.internal_static_chalk_graph_v1_Graph_descriptor;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.graph.v1.Graph getDefaultInstanceForType() {
      return ai.chalk.protos.chalk.graph.v1.Graph.getDefaultInstance();
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.graph.v1.Graph build() {
      ai.chalk.protos.chalk.graph.v1.Graph result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.graph.v1.Graph buildPartial() {
      ai.chalk.protos.chalk.graph.v1.Graph result = new ai.chalk.protos.chalk.graph.v1.Graph(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(ai.chalk.protos.chalk.graph.v1.Graph result) {
      if (featureSetsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          featureSets_ = java.util.Collections.unmodifiableList(featureSets_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.featureSets_ = featureSets_;
      } else {
        result.featureSets_ = featureSetsBuilder_.build();
      }
      if (resolversBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          resolvers_ = java.util.Collections.unmodifiableList(resolvers_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.resolvers_ = resolvers_;
      } else {
        result.resolvers_ = resolversBuilder_.build();
      }
      if (streamResolversBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          streamResolvers_ = java.util.Collections.unmodifiableList(streamResolvers_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.streamResolvers_ = streamResolvers_;
      } else {
        result.streamResolvers_ = streamResolversBuilder_.build();
      }
      if (sinkResolversBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          sinkResolvers_ = java.util.Collections.unmodifiableList(sinkResolvers_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.sinkResolvers_ = sinkResolvers_;
      } else {
        result.sinkResolvers_ = sinkResolversBuilder_.build();
      }
      if (databaseSourcesBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          databaseSources_ = java.util.Collections.unmodifiableList(databaseSources_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.databaseSources_ = databaseSources_;
      } else {
        result.databaseSources_ = databaseSourcesBuilder_.build();
      }
      if (streamSourcesBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          streamSources_ = java.util.Collections.unmodifiableList(streamSources_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.streamSources_ = streamSources_;
      } else {
        result.streamSources_ = streamSourcesBuilder_.build();
      }
    }

    private void buildPartial0(ai.chalk.protos.chalk.graph.v1.Graph result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.chalk.protos.chalk.graph.v1.Graph) {
        return mergeFrom((ai.chalk.protos.chalk.graph.v1.Graph)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.chalk.protos.chalk.graph.v1.Graph other) {
      if (other == ai.chalk.protos.chalk.graph.v1.Graph.getDefaultInstance()) return this;
      if (featureSetsBuilder_ == null) {
        if (!other.featureSets_.isEmpty()) {
          if (featureSets_.isEmpty()) {
            featureSets_ = other.featureSets_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureFeatureSetsIsMutable();
            featureSets_.addAll(other.featureSets_);
          }
          onChanged();
        }
      } else {
        if (!other.featureSets_.isEmpty()) {
          if (featureSetsBuilder_.isEmpty()) {
            featureSetsBuilder_.dispose();
            featureSetsBuilder_ = null;
            featureSets_ = other.featureSets_;
            bitField0_ = (bitField0_ & ~0x00000001);
            featureSetsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getFeatureSetsFieldBuilder() : null;
          } else {
            featureSetsBuilder_.addAllMessages(other.featureSets_);
          }
        }
      }
      if (resolversBuilder_ == null) {
        if (!other.resolvers_.isEmpty()) {
          if (resolvers_.isEmpty()) {
            resolvers_ = other.resolvers_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureResolversIsMutable();
            resolvers_.addAll(other.resolvers_);
          }
          onChanged();
        }
      } else {
        if (!other.resolvers_.isEmpty()) {
          if (resolversBuilder_.isEmpty()) {
            resolversBuilder_.dispose();
            resolversBuilder_ = null;
            resolvers_ = other.resolvers_;
            bitField0_ = (bitField0_ & ~0x00000002);
            resolversBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getResolversFieldBuilder() : null;
          } else {
            resolversBuilder_.addAllMessages(other.resolvers_);
          }
        }
      }
      if (streamResolversBuilder_ == null) {
        if (!other.streamResolvers_.isEmpty()) {
          if (streamResolvers_.isEmpty()) {
            streamResolvers_ = other.streamResolvers_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStreamResolversIsMutable();
            streamResolvers_.addAll(other.streamResolvers_);
          }
          onChanged();
        }
      } else {
        if (!other.streamResolvers_.isEmpty()) {
          if (streamResolversBuilder_.isEmpty()) {
            streamResolversBuilder_.dispose();
            streamResolversBuilder_ = null;
            streamResolvers_ = other.streamResolvers_;
            bitField0_ = (bitField0_ & ~0x00000004);
            streamResolversBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getStreamResolversFieldBuilder() : null;
          } else {
            streamResolversBuilder_.addAllMessages(other.streamResolvers_);
          }
        }
      }
      if (sinkResolversBuilder_ == null) {
        if (!other.sinkResolvers_.isEmpty()) {
          if (sinkResolvers_.isEmpty()) {
            sinkResolvers_ = other.sinkResolvers_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSinkResolversIsMutable();
            sinkResolvers_.addAll(other.sinkResolvers_);
          }
          onChanged();
        }
      } else {
        if (!other.sinkResolvers_.isEmpty()) {
          if (sinkResolversBuilder_.isEmpty()) {
            sinkResolversBuilder_.dispose();
            sinkResolversBuilder_ = null;
            sinkResolvers_ = other.sinkResolvers_;
            bitField0_ = (bitField0_ & ~0x00000008);
            sinkResolversBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getSinkResolversFieldBuilder() : null;
          } else {
            sinkResolversBuilder_.addAllMessages(other.sinkResolvers_);
          }
        }
      }
      if (databaseSourcesBuilder_ == null) {
        if (!other.databaseSources_.isEmpty()) {
          if (databaseSources_.isEmpty()) {
            databaseSources_ = other.databaseSources_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDatabaseSourcesIsMutable();
            databaseSources_.addAll(other.databaseSources_);
          }
          onChanged();
        }
      } else {
        if (!other.databaseSources_.isEmpty()) {
          if (databaseSourcesBuilder_.isEmpty()) {
            databaseSourcesBuilder_.dispose();
            databaseSourcesBuilder_ = null;
            databaseSources_ = other.databaseSources_;
            bitField0_ = (bitField0_ & ~0x00000010);
            databaseSourcesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getDatabaseSourcesFieldBuilder() : null;
          } else {
            databaseSourcesBuilder_.addAllMessages(other.databaseSources_);
          }
        }
      }
      if (streamSourcesBuilder_ == null) {
        if (!other.streamSources_.isEmpty()) {
          if (streamSources_.isEmpty()) {
            streamSources_ = other.streamSources_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureStreamSourcesIsMutable();
            streamSources_.addAll(other.streamSources_);
          }
          onChanged();
        }
      } else {
        if (!other.streamSources_.isEmpty()) {
          if (streamSourcesBuilder_.isEmpty()) {
            streamSourcesBuilder_.dispose();
            streamSourcesBuilder_ = null;
            streamSources_ = other.streamSources_;
            bitField0_ = (bitField0_ & ~0x00000020);
            streamSourcesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getStreamSourcesFieldBuilder() : null;
          } else {
            streamSourcesBuilder_.addAllMessages(other.streamSources_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              ai.chalk.protos.chalk.graph.v1.FeatureSet m =
                  input.readMessage(
                      ai.chalk.protos.chalk.graph.v1.FeatureSet.parser(),
                      extensionRegistry);
              if (featureSetsBuilder_ == null) {
                ensureFeatureSetsIsMutable();
                featureSets_.add(m);
              } else {
                featureSetsBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              ai.chalk.protos.chalk.graph.v1.Resolver m =
                  input.readMessage(
                      ai.chalk.protos.chalk.graph.v1.Resolver.parser(),
                      extensionRegistry);
              if (resolversBuilder_ == null) {
                ensureResolversIsMutable();
                resolvers_.add(m);
              } else {
                resolversBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              ai.chalk.protos.chalk.graph.v1.StreamResolver m =
                  input.readMessage(
                      ai.chalk.protos.chalk.graph.v1.StreamResolver.parser(),
                      extensionRegistry);
              if (streamResolversBuilder_ == null) {
                ensureStreamResolversIsMutable();
                streamResolvers_.add(m);
              } else {
                streamResolversBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              ai.chalk.protos.chalk.graph.v1.SinkResolver m =
                  input.readMessage(
                      ai.chalk.protos.chalk.graph.v1.SinkResolver.parser(),
                      extensionRegistry);
              if (sinkResolversBuilder_ == null) {
                ensureSinkResolversIsMutable();
                sinkResolvers_.add(m);
              } else {
                sinkResolversBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              ai.chalk.protos.chalk.graph.v1.DatabaseSource m =
                  input.readMessage(
                      ai.chalk.protos.chalk.graph.v1.DatabaseSource.parser(),
                      extensionRegistry);
              if (databaseSourcesBuilder_ == null) {
                ensureDatabaseSourcesIsMutable();
                databaseSources_.add(m);
              } else {
                databaseSourcesBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              ai.chalk.protos.chalk.graph.v1.StreamSource m =
                  input.readMessage(
                      ai.chalk.protos.chalk.graph.v1.StreamSource.parser(),
                      extensionRegistry);
              if (streamSourcesBuilder_ == null) {
                ensureStreamSourcesIsMutable();
                streamSources_.add(m);
              } else {
                streamSourcesBuilder_.addMessage(m);
              }
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureSet> featureSets_ =
      java.util.Collections.emptyList();
    private void ensureFeatureSetsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        featureSets_ = new java.util.ArrayList<ai.chalk.protos.chalk.graph.v1.FeatureSet>(featureSets_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.FeatureSet, ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder, ai.chalk.protos.chalk.graph.v1.FeatureSetOrBuilder> featureSetsBuilder_;

    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureSet> getFeatureSetsList() {
      if (featureSetsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(featureSets_);
      } else {
        return featureSetsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public int getFeatureSetsCount() {
      if (featureSetsBuilder_ == null) {
        return featureSets_.size();
      } else {
        return featureSetsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.FeatureSet getFeatureSets(int index) {
      if (featureSetsBuilder_ == null) {
        return featureSets_.get(index);
      } else {
        return featureSetsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder setFeatureSets(
        int index, ai.chalk.protos.chalk.graph.v1.FeatureSet value) {
      if (featureSetsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeatureSetsIsMutable();
        featureSets_.set(index, value);
        onChanged();
      } else {
        featureSetsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder setFeatureSets(
        int index, ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder builderForValue) {
      if (featureSetsBuilder_ == null) {
        ensureFeatureSetsIsMutable();
        featureSets_.set(index, builderForValue.build());
        onChanged();
      } else {
        featureSetsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder addFeatureSets(ai.chalk.protos.chalk.graph.v1.FeatureSet value) {
      if (featureSetsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeatureSetsIsMutable();
        featureSets_.add(value);
        onChanged();
      } else {
        featureSetsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder addFeatureSets(
        int index, ai.chalk.protos.chalk.graph.v1.FeatureSet value) {
      if (featureSetsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeatureSetsIsMutable();
        featureSets_.add(index, value);
        onChanged();
      } else {
        featureSetsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder addFeatureSets(
        ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder builderForValue) {
      if (featureSetsBuilder_ == null) {
        ensureFeatureSetsIsMutable();
        featureSets_.add(builderForValue.build());
        onChanged();
      } else {
        featureSetsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder addFeatureSets(
        int index, ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder builderForValue) {
      if (featureSetsBuilder_ == null) {
        ensureFeatureSetsIsMutable();
        featureSets_.add(index, builderForValue.build());
        onChanged();
      } else {
        featureSetsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder addAllFeatureSets(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.graph.v1.FeatureSet> values) {
      if (featureSetsBuilder_ == null) {
        ensureFeatureSetsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, featureSets_);
        onChanged();
      } else {
        featureSetsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder clearFeatureSets() {
      if (featureSetsBuilder_ == null) {
        featureSets_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        featureSetsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public Builder removeFeatureSets(int index) {
      if (featureSetsBuilder_ == null) {
        ensureFeatureSetsIsMutable();
        featureSets_.remove(index);
        onChanged();
      } else {
        featureSetsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder getFeatureSetsBuilder(
        int index) {
      return getFeatureSetsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.FeatureSetOrBuilder getFeatureSetsOrBuilder(
        int index) {
      if (featureSetsBuilder_ == null) {
        return featureSets_.get(index);  } else {
        return featureSetsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.FeatureSetOrBuilder> 
         getFeatureSetsOrBuilderList() {
      if (featureSetsBuilder_ != null) {
        return featureSetsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(featureSets_);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder addFeatureSetsBuilder() {
      return getFeatureSetsFieldBuilder().addBuilder(
          ai.chalk.protos.chalk.graph.v1.FeatureSet.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder addFeatureSetsBuilder(
        int index) {
      return getFeatureSetsFieldBuilder().addBuilder(
          index, ai.chalk.protos.chalk.graph.v1.FeatureSet.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.FeatureSet feature_sets = 1 [json_name = "featureSets"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder> 
         getFeatureSetsBuilderList() {
      return getFeatureSetsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.FeatureSet, ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder, ai.chalk.protos.chalk.graph.v1.FeatureSetOrBuilder> 
        getFeatureSetsFieldBuilder() {
      if (featureSetsBuilder_ == null) {
        featureSetsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.chalk.protos.chalk.graph.v1.FeatureSet, ai.chalk.protos.chalk.graph.v1.FeatureSet.Builder, ai.chalk.protos.chalk.graph.v1.FeatureSetOrBuilder>(
                featureSets_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        featureSets_ = null;
      }
      return featureSetsBuilder_;
    }

    private java.util.List<ai.chalk.protos.chalk.graph.v1.Resolver> resolvers_ =
      java.util.Collections.emptyList();
    private void ensureResolversIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        resolvers_ = new java.util.ArrayList<ai.chalk.protos.chalk.graph.v1.Resolver>(resolvers_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.Resolver, ai.chalk.protos.chalk.graph.v1.Resolver.Builder, ai.chalk.protos.chalk.graph.v1.ResolverOrBuilder> resolversBuilder_;

    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.Resolver> getResolversList() {
      if (resolversBuilder_ == null) {
        return java.util.Collections.unmodifiableList(resolvers_);
      } else {
        return resolversBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public int getResolversCount() {
      if (resolversBuilder_ == null) {
        return resolvers_.size();
      } else {
        return resolversBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.Resolver getResolvers(int index) {
      if (resolversBuilder_ == null) {
        return resolvers_.get(index);
      } else {
        return resolversBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder setResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.Resolver value) {
      if (resolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResolversIsMutable();
        resolvers_.set(index, value);
        onChanged();
      } else {
        resolversBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder setResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.Resolver.Builder builderForValue) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.set(index, builderForValue.build());
        onChanged();
      } else {
        resolversBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder addResolvers(ai.chalk.protos.chalk.graph.v1.Resolver value) {
      if (resolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResolversIsMutable();
        resolvers_.add(value);
        onChanged();
      } else {
        resolversBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder addResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.Resolver value) {
      if (resolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResolversIsMutable();
        resolvers_.add(index, value);
        onChanged();
      } else {
        resolversBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder addResolvers(
        ai.chalk.protos.chalk.graph.v1.Resolver.Builder builderForValue) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.add(builderForValue.build());
        onChanged();
      } else {
        resolversBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder addResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.Resolver.Builder builderForValue) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.add(index, builderForValue.build());
        onChanged();
      } else {
        resolversBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder addAllResolvers(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.graph.v1.Resolver> values) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, resolvers_);
        onChanged();
      } else {
        resolversBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder clearResolvers() {
      if (resolversBuilder_ == null) {
        resolvers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        resolversBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public Builder removeResolvers(int index) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.remove(index);
        onChanged();
      } else {
        resolversBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.Resolver.Builder getResolversBuilder(
        int index) {
      return getResolversFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.ResolverOrBuilder getResolversOrBuilder(
        int index) {
      if (resolversBuilder_ == null) {
        return resolvers_.get(index);  } else {
        return resolversBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.ResolverOrBuilder> 
         getResolversOrBuilderList() {
      if (resolversBuilder_ != null) {
        return resolversBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(resolvers_);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.Resolver.Builder addResolversBuilder() {
      return getResolversFieldBuilder().addBuilder(
          ai.chalk.protos.chalk.graph.v1.Resolver.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.Resolver.Builder addResolversBuilder(
        int index) {
      return getResolversFieldBuilder().addBuilder(
          index, ai.chalk.protos.chalk.graph.v1.Resolver.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.Resolver resolvers = 2 [json_name = "resolvers"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.Resolver.Builder> 
         getResolversBuilderList() {
      return getResolversFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.Resolver, ai.chalk.protos.chalk.graph.v1.Resolver.Builder, ai.chalk.protos.chalk.graph.v1.ResolverOrBuilder> 
        getResolversFieldBuilder() {
      if (resolversBuilder_ == null) {
        resolversBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.chalk.protos.chalk.graph.v1.Resolver, ai.chalk.protos.chalk.graph.v1.Resolver.Builder, ai.chalk.protos.chalk.graph.v1.ResolverOrBuilder>(
                resolvers_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        resolvers_ = null;
      }
      return resolversBuilder_;
    }

    private java.util.List<ai.chalk.protos.chalk.graph.v1.StreamResolver> streamResolvers_ =
      java.util.Collections.emptyList();
    private void ensureStreamResolversIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        streamResolvers_ = new java.util.ArrayList<ai.chalk.protos.chalk.graph.v1.StreamResolver>(streamResolvers_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.StreamResolver, ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder, ai.chalk.protos.chalk.graph.v1.StreamResolverOrBuilder> streamResolversBuilder_;

    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.StreamResolver> getStreamResolversList() {
      if (streamResolversBuilder_ == null) {
        return java.util.Collections.unmodifiableList(streamResolvers_);
      } else {
        return streamResolversBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public int getStreamResolversCount() {
      if (streamResolversBuilder_ == null) {
        return streamResolvers_.size();
      } else {
        return streamResolversBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamResolver getStreamResolvers(int index) {
      if (streamResolversBuilder_ == null) {
        return streamResolvers_.get(index);
      } else {
        return streamResolversBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder setStreamResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.StreamResolver value) {
      if (streamResolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamResolversIsMutable();
        streamResolvers_.set(index, value);
        onChanged();
      } else {
        streamResolversBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder setStreamResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder builderForValue) {
      if (streamResolversBuilder_ == null) {
        ensureStreamResolversIsMutable();
        streamResolvers_.set(index, builderForValue.build());
        onChanged();
      } else {
        streamResolversBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder addStreamResolvers(ai.chalk.protos.chalk.graph.v1.StreamResolver value) {
      if (streamResolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamResolversIsMutable();
        streamResolvers_.add(value);
        onChanged();
      } else {
        streamResolversBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder addStreamResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.StreamResolver value) {
      if (streamResolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamResolversIsMutable();
        streamResolvers_.add(index, value);
        onChanged();
      } else {
        streamResolversBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder addStreamResolvers(
        ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder builderForValue) {
      if (streamResolversBuilder_ == null) {
        ensureStreamResolversIsMutable();
        streamResolvers_.add(builderForValue.build());
        onChanged();
      } else {
        streamResolversBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder addStreamResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder builderForValue) {
      if (streamResolversBuilder_ == null) {
        ensureStreamResolversIsMutable();
        streamResolvers_.add(index, builderForValue.build());
        onChanged();
      } else {
        streamResolversBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder addAllStreamResolvers(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.graph.v1.StreamResolver> values) {
      if (streamResolversBuilder_ == null) {
        ensureStreamResolversIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, streamResolvers_);
        onChanged();
      } else {
        streamResolversBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder clearStreamResolvers() {
      if (streamResolversBuilder_ == null) {
        streamResolvers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        streamResolversBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public Builder removeStreamResolvers(int index) {
      if (streamResolversBuilder_ == null) {
        ensureStreamResolversIsMutable();
        streamResolvers_.remove(index);
        onChanged();
      } else {
        streamResolversBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder getStreamResolversBuilder(
        int index) {
      return getStreamResolversFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamResolverOrBuilder getStreamResolversOrBuilder(
        int index) {
      if (streamResolversBuilder_ == null) {
        return streamResolvers_.get(index);  } else {
        return streamResolversBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.StreamResolverOrBuilder> 
         getStreamResolversOrBuilderList() {
      if (streamResolversBuilder_ != null) {
        return streamResolversBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(streamResolvers_);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder addStreamResolversBuilder() {
      return getStreamResolversFieldBuilder().addBuilder(
          ai.chalk.protos.chalk.graph.v1.StreamResolver.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder addStreamResolversBuilder(
        int index) {
      return getStreamResolversFieldBuilder().addBuilder(
          index, ai.chalk.protos.chalk.graph.v1.StreamResolver.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamResolver stream_resolvers = 3 [json_name = "streamResolvers"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder> 
         getStreamResolversBuilderList() {
      return getStreamResolversFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.StreamResolver, ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder, ai.chalk.protos.chalk.graph.v1.StreamResolverOrBuilder> 
        getStreamResolversFieldBuilder() {
      if (streamResolversBuilder_ == null) {
        streamResolversBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.chalk.protos.chalk.graph.v1.StreamResolver, ai.chalk.protos.chalk.graph.v1.StreamResolver.Builder, ai.chalk.protos.chalk.graph.v1.StreamResolverOrBuilder>(
                streamResolvers_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        streamResolvers_ = null;
      }
      return streamResolversBuilder_;
    }

    private java.util.List<ai.chalk.protos.chalk.graph.v1.SinkResolver> sinkResolvers_ =
      java.util.Collections.emptyList();
    private void ensureSinkResolversIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        sinkResolvers_ = new java.util.ArrayList<ai.chalk.protos.chalk.graph.v1.SinkResolver>(sinkResolvers_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.SinkResolver, ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder, ai.chalk.protos.chalk.graph.v1.SinkResolverOrBuilder> sinkResolversBuilder_;

    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.SinkResolver> getSinkResolversList() {
      if (sinkResolversBuilder_ == null) {
        return java.util.Collections.unmodifiableList(sinkResolvers_);
      } else {
        return sinkResolversBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public int getSinkResolversCount() {
      if (sinkResolversBuilder_ == null) {
        return sinkResolvers_.size();
      } else {
        return sinkResolversBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.SinkResolver getSinkResolvers(int index) {
      if (sinkResolversBuilder_ == null) {
        return sinkResolvers_.get(index);
      } else {
        return sinkResolversBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder setSinkResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.SinkResolver value) {
      if (sinkResolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSinkResolversIsMutable();
        sinkResolvers_.set(index, value);
        onChanged();
      } else {
        sinkResolversBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder setSinkResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder builderForValue) {
      if (sinkResolversBuilder_ == null) {
        ensureSinkResolversIsMutable();
        sinkResolvers_.set(index, builderForValue.build());
        onChanged();
      } else {
        sinkResolversBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder addSinkResolvers(ai.chalk.protos.chalk.graph.v1.SinkResolver value) {
      if (sinkResolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSinkResolversIsMutable();
        sinkResolvers_.add(value);
        onChanged();
      } else {
        sinkResolversBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder addSinkResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.SinkResolver value) {
      if (sinkResolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSinkResolversIsMutable();
        sinkResolvers_.add(index, value);
        onChanged();
      } else {
        sinkResolversBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder addSinkResolvers(
        ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder builderForValue) {
      if (sinkResolversBuilder_ == null) {
        ensureSinkResolversIsMutable();
        sinkResolvers_.add(builderForValue.build());
        onChanged();
      } else {
        sinkResolversBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder addSinkResolvers(
        int index, ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder builderForValue) {
      if (sinkResolversBuilder_ == null) {
        ensureSinkResolversIsMutable();
        sinkResolvers_.add(index, builderForValue.build());
        onChanged();
      } else {
        sinkResolversBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder addAllSinkResolvers(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.graph.v1.SinkResolver> values) {
      if (sinkResolversBuilder_ == null) {
        ensureSinkResolversIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sinkResolvers_);
        onChanged();
      } else {
        sinkResolversBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder clearSinkResolvers() {
      if (sinkResolversBuilder_ == null) {
        sinkResolvers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        sinkResolversBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public Builder removeSinkResolvers(int index) {
      if (sinkResolversBuilder_ == null) {
        ensureSinkResolversIsMutable();
        sinkResolvers_.remove(index);
        onChanged();
      } else {
        sinkResolversBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder getSinkResolversBuilder(
        int index) {
      return getSinkResolversFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.SinkResolverOrBuilder getSinkResolversOrBuilder(
        int index) {
      if (sinkResolversBuilder_ == null) {
        return sinkResolvers_.get(index);  } else {
        return sinkResolversBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.SinkResolverOrBuilder> 
         getSinkResolversOrBuilderList() {
      if (sinkResolversBuilder_ != null) {
        return sinkResolversBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(sinkResolvers_);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder addSinkResolversBuilder() {
      return getSinkResolversFieldBuilder().addBuilder(
          ai.chalk.protos.chalk.graph.v1.SinkResolver.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder addSinkResolversBuilder(
        int index) {
      return getSinkResolversFieldBuilder().addBuilder(
          index, ai.chalk.protos.chalk.graph.v1.SinkResolver.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.SinkResolver sink_resolvers = 4 [json_name = "sinkResolvers"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder> 
         getSinkResolversBuilderList() {
      return getSinkResolversFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.SinkResolver, ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder, ai.chalk.protos.chalk.graph.v1.SinkResolverOrBuilder> 
        getSinkResolversFieldBuilder() {
      if (sinkResolversBuilder_ == null) {
        sinkResolversBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.chalk.protos.chalk.graph.v1.SinkResolver, ai.chalk.protos.chalk.graph.v1.SinkResolver.Builder, ai.chalk.protos.chalk.graph.v1.SinkResolverOrBuilder>(
                sinkResolvers_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        sinkResolvers_ = null;
      }
      return sinkResolversBuilder_;
    }

    private java.util.List<ai.chalk.protos.chalk.graph.v1.DatabaseSource> databaseSources_ =
      java.util.Collections.emptyList();
    private void ensureDatabaseSourcesIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        databaseSources_ = new java.util.ArrayList<ai.chalk.protos.chalk.graph.v1.DatabaseSource>(databaseSources_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.DatabaseSource, ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder, ai.chalk.protos.chalk.graph.v1.DatabaseSourceOrBuilder> databaseSourcesBuilder_;

    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.DatabaseSource> getDatabaseSourcesList() {
      if (databaseSourcesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(databaseSources_);
      } else {
        return databaseSourcesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public int getDatabaseSourcesCount() {
      if (databaseSourcesBuilder_ == null) {
        return databaseSources_.size();
      } else {
        return databaseSourcesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.DatabaseSource getDatabaseSources(int index) {
      if (databaseSourcesBuilder_ == null) {
        return databaseSources_.get(index);
      } else {
        return databaseSourcesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder setDatabaseSources(
        int index, ai.chalk.protos.chalk.graph.v1.DatabaseSource value) {
      if (databaseSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDatabaseSourcesIsMutable();
        databaseSources_.set(index, value);
        onChanged();
      } else {
        databaseSourcesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder setDatabaseSources(
        int index, ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder builderForValue) {
      if (databaseSourcesBuilder_ == null) {
        ensureDatabaseSourcesIsMutable();
        databaseSources_.set(index, builderForValue.build());
        onChanged();
      } else {
        databaseSourcesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder addDatabaseSources(ai.chalk.protos.chalk.graph.v1.DatabaseSource value) {
      if (databaseSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDatabaseSourcesIsMutable();
        databaseSources_.add(value);
        onChanged();
      } else {
        databaseSourcesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder addDatabaseSources(
        int index, ai.chalk.protos.chalk.graph.v1.DatabaseSource value) {
      if (databaseSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDatabaseSourcesIsMutable();
        databaseSources_.add(index, value);
        onChanged();
      } else {
        databaseSourcesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder addDatabaseSources(
        ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder builderForValue) {
      if (databaseSourcesBuilder_ == null) {
        ensureDatabaseSourcesIsMutable();
        databaseSources_.add(builderForValue.build());
        onChanged();
      } else {
        databaseSourcesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder addDatabaseSources(
        int index, ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder builderForValue) {
      if (databaseSourcesBuilder_ == null) {
        ensureDatabaseSourcesIsMutable();
        databaseSources_.add(index, builderForValue.build());
        onChanged();
      } else {
        databaseSourcesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder addAllDatabaseSources(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.graph.v1.DatabaseSource> values) {
      if (databaseSourcesBuilder_ == null) {
        ensureDatabaseSourcesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, databaseSources_);
        onChanged();
      } else {
        databaseSourcesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder clearDatabaseSources() {
      if (databaseSourcesBuilder_ == null) {
        databaseSources_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        databaseSourcesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public Builder removeDatabaseSources(int index) {
      if (databaseSourcesBuilder_ == null) {
        ensureDatabaseSourcesIsMutable();
        databaseSources_.remove(index);
        onChanged();
      } else {
        databaseSourcesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder getDatabaseSourcesBuilder(
        int index) {
      return getDatabaseSourcesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.DatabaseSourceOrBuilder getDatabaseSourcesOrBuilder(
        int index) {
      if (databaseSourcesBuilder_ == null) {
        return databaseSources_.get(index);  } else {
        return databaseSourcesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.DatabaseSourceOrBuilder> 
         getDatabaseSourcesOrBuilderList() {
      if (databaseSourcesBuilder_ != null) {
        return databaseSourcesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(databaseSources_);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder addDatabaseSourcesBuilder() {
      return getDatabaseSourcesFieldBuilder().addBuilder(
          ai.chalk.protos.chalk.graph.v1.DatabaseSource.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder addDatabaseSourcesBuilder(
        int index) {
      return getDatabaseSourcesFieldBuilder().addBuilder(
          index, ai.chalk.protos.chalk.graph.v1.DatabaseSource.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.DatabaseSource database_sources = 5 [json_name = "databaseSources"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder> 
         getDatabaseSourcesBuilderList() {
      return getDatabaseSourcesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.DatabaseSource, ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder, ai.chalk.protos.chalk.graph.v1.DatabaseSourceOrBuilder> 
        getDatabaseSourcesFieldBuilder() {
      if (databaseSourcesBuilder_ == null) {
        databaseSourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.chalk.protos.chalk.graph.v1.DatabaseSource, ai.chalk.protos.chalk.graph.v1.DatabaseSource.Builder, ai.chalk.protos.chalk.graph.v1.DatabaseSourceOrBuilder>(
                databaseSources_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        databaseSources_ = null;
      }
      return databaseSourcesBuilder_;
    }

    private java.util.List<ai.chalk.protos.chalk.graph.v1.StreamSource> streamSources_ =
      java.util.Collections.emptyList();
    private void ensureStreamSourcesIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        streamSources_ = new java.util.ArrayList<ai.chalk.protos.chalk.graph.v1.StreamSource>(streamSources_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.StreamSource, ai.chalk.protos.chalk.graph.v1.StreamSource.Builder, ai.chalk.protos.chalk.graph.v1.StreamSourceOrBuilder> streamSourcesBuilder_;

    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.StreamSource> getStreamSourcesList() {
      if (streamSourcesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(streamSources_);
      } else {
        return streamSourcesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public int getStreamSourcesCount() {
      if (streamSourcesBuilder_ == null) {
        return streamSources_.size();
      } else {
        return streamSourcesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamSource getStreamSources(int index) {
      if (streamSourcesBuilder_ == null) {
        return streamSources_.get(index);
      } else {
        return streamSourcesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder setStreamSources(
        int index, ai.chalk.protos.chalk.graph.v1.StreamSource value) {
      if (streamSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamSourcesIsMutable();
        streamSources_.set(index, value);
        onChanged();
      } else {
        streamSourcesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder setStreamSources(
        int index, ai.chalk.protos.chalk.graph.v1.StreamSource.Builder builderForValue) {
      if (streamSourcesBuilder_ == null) {
        ensureStreamSourcesIsMutable();
        streamSources_.set(index, builderForValue.build());
        onChanged();
      } else {
        streamSourcesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder addStreamSources(ai.chalk.protos.chalk.graph.v1.StreamSource value) {
      if (streamSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamSourcesIsMutable();
        streamSources_.add(value);
        onChanged();
      } else {
        streamSourcesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder addStreamSources(
        int index, ai.chalk.protos.chalk.graph.v1.StreamSource value) {
      if (streamSourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStreamSourcesIsMutable();
        streamSources_.add(index, value);
        onChanged();
      } else {
        streamSourcesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder addStreamSources(
        ai.chalk.protos.chalk.graph.v1.StreamSource.Builder builderForValue) {
      if (streamSourcesBuilder_ == null) {
        ensureStreamSourcesIsMutable();
        streamSources_.add(builderForValue.build());
        onChanged();
      } else {
        streamSourcesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder addStreamSources(
        int index, ai.chalk.protos.chalk.graph.v1.StreamSource.Builder builderForValue) {
      if (streamSourcesBuilder_ == null) {
        ensureStreamSourcesIsMutable();
        streamSources_.add(index, builderForValue.build());
        onChanged();
      } else {
        streamSourcesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder addAllStreamSources(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.graph.v1.StreamSource> values) {
      if (streamSourcesBuilder_ == null) {
        ensureStreamSourcesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, streamSources_);
        onChanged();
      } else {
        streamSourcesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder clearStreamSources() {
      if (streamSourcesBuilder_ == null) {
        streamSources_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        streamSourcesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public Builder removeStreamSources(int index) {
      if (streamSourcesBuilder_ == null) {
        ensureStreamSourcesIsMutable();
        streamSources_.remove(index);
        onChanged();
      } else {
        streamSourcesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamSource.Builder getStreamSourcesBuilder(
        int index) {
      return getStreamSourcesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamSourceOrBuilder getStreamSourcesOrBuilder(
        int index) {
      if (streamSourcesBuilder_ == null) {
        return streamSources_.get(index);  } else {
        return streamSourcesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public java.util.List<? extends ai.chalk.protos.chalk.graph.v1.StreamSourceOrBuilder> 
         getStreamSourcesOrBuilderList() {
      if (streamSourcesBuilder_ != null) {
        return streamSourcesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(streamSources_);
      }
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamSource.Builder addStreamSourcesBuilder() {
      return getStreamSourcesFieldBuilder().addBuilder(
          ai.chalk.protos.chalk.graph.v1.StreamSource.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public ai.chalk.protos.chalk.graph.v1.StreamSource.Builder addStreamSourcesBuilder(
        int index) {
      return getStreamSourcesFieldBuilder().addBuilder(
          index, ai.chalk.protos.chalk.graph.v1.StreamSource.getDefaultInstance());
    }
    /**
     * <code>repeated .chalk.graph.v1.StreamSource stream_sources = 6 [json_name = "streamSources"];</code>
     */
    public java.util.List<ai.chalk.protos.chalk.graph.v1.StreamSource.Builder> 
         getStreamSourcesBuilderList() {
      return getStreamSourcesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.chalk.protos.chalk.graph.v1.StreamSource, ai.chalk.protos.chalk.graph.v1.StreamSource.Builder, ai.chalk.protos.chalk.graph.v1.StreamSourceOrBuilder> 
        getStreamSourcesFieldBuilder() {
      if (streamSourcesBuilder_ == null) {
        streamSourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.chalk.protos.chalk.graph.v1.StreamSource, ai.chalk.protos.chalk.graph.v1.StreamSource.Builder, ai.chalk.protos.chalk.graph.v1.StreamSourceOrBuilder>(
                streamSources_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        streamSources_ = null;
      }
      return streamSourcesBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:chalk.graph.v1.Graph)
  }

  // @@protoc_insertion_point(class_scope:chalk.graph.v1.Graph)
  private static final ai.chalk.protos.chalk.graph.v1.Graph DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.chalk.protos.chalk.graph.v1.Graph();
  }

  public static ai.chalk.protos.chalk.graph.v1.Graph getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Graph>
      PARSER = new com.google.protobuf.AbstractParser<Graph>() {
    @java.lang.Override
    public Graph parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Graph> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Graph> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.chalk.protos.chalk.graph.v1.Graph getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

