// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/nodepools/v1/karpenter.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.nodepools.v1;

public interface KarpenterNodepoolSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.nodepools.v1.KarpenterNodepoolSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.chalk.nodepools.v1.KarpenterNodepoolDisruption disruption = 1 [json_name = "disruption"];</code>
   * @return Whether the disruption field is set.
   */
  boolean hasDisruption();
  /**
   * <code>.chalk.nodepools.v1.KarpenterNodepoolDisruption disruption = 1 [json_name = "disruption"];</code>
   * @return The disruption.
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodepoolDisruption getDisruption();
  /**
   * <code>.chalk.nodepools.v1.KarpenterNodepoolDisruption disruption = 1 [json_name = "disruption"];</code>
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodepoolDisruptionOrBuilder getDisruptionOrBuilder();

  /**
   * <code>.chalk.nodepools.v1.KarpenterNodepoolTemplate template = 2 [json_name = "template"];</code>
   * @return Whether the template field is set.
   */
  boolean hasTemplate();
  /**
   * <code>.chalk.nodepools.v1.KarpenterNodepoolTemplate template = 2 [json_name = "template"];</code>
   * @return The template.
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodepoolTemplate getTemplate();
  /**
   * <code>.chalk.nodepools.v1.KarpenterNodepoolTemplate template = 2 [json_name = "template"];</code>
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodepoolTemplateOrBuilder getTemplateOrBuilder();

  /**
   * <code>map&lt;string, string&gt; limits = 3 [json_name = "limits"];</code>
   */
  int getLimitsCount();
  /**
   * <code>map&lt;string, string&gt; limits = 3 [json_name = "limits"];</code>
   */
  boolean containsLimits(
      java.lang.String key);
  /**
   * Use {@link #getLimitsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getLimits();
  /**
   * <code>map&lt;string, string&gt; limits = 3 [json_name = "limits"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getLimitsMap();
  /**
   * <code>map&lt;string, string&gt; limits = 3 [json_name = "limits"];</code>
   */
  /* nullable */
java.lang.String getLimitsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; limits = 3 [json_name = "limits"];</code>
   */
  java.lang.String getLimitsOrThrow(
      java.lang.String key);

  /**
   * <code>optional int32 weight = 4 [json_name = "weight"];</code>
   * @return Whether the weight field is set.
   */
  boolean hasWeight();
  /**
   * <code>optional int32 weight = 4 [json_name = "weight"];</code>
   * @return The weight.
   */
  int getWeight();
}
