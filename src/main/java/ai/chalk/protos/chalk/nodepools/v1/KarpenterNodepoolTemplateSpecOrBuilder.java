// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/nodepools/v1/karpenter.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.nodepools.v1;

public interface KarpenterNodepoolTemplateSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.nodepools.v1.KarpenterNodepoolTemplateSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint taints = 1 [json_name = "taints"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaint> 
      getTaintsList();
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint taints = 1 [json_name = "taints"];</code>
   */
  ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaint getTaints(int index);
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint taints = 1 [json_name = "taints"];</code>
   */
  int getTaintsCount();
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint taints = 1 [json_name = "taints"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaintOrBuilder> 
      getTaintsOrBuilderList();
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint taints = 1 [json_name = "taints"];</code>
   */
  ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaintOrBuilder getTaintsOrBuilder(
      int index);

  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint startup_taints = 2 [json_name = "startupTaints"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaint> 
      getStartupTaintsList();
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint startup_taints = 2 [json_name = "startupTaints"];</code>
   */
  ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaint getStartupTaints(int index);
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint startup_taints = 2 [json_name = "startupTaints"];</code>
   */
  int getStartupTaintsCount();
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint startup_taints = 2 [json_name = "startupTaints"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaintOrBuilder> 
      getStartupTaintsOrBuilderList();
  /**
   * <code>repeated .chalk.kubernetes.v1.KubernetesNodeTaint startup_taints = 2 [json_name = "startupTaints"];</code>
   */
  ai.chalk.protos.chalk.kubernetes.v1.KubernetesNodeTaintOrBuilder getStartupTaintsOrBuilder(
      int index);

  /**
   * <code>repeated .chalk.nodepools.v1.KarpenterNodeSelectorRequirement requirements = 3 [json_name = "requirements"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.nodepools.v1.KarpenterNodeSelectorRequirement> 
      getRequirementsList();
  /**
   * <code>repeated .chalk.nodepools.v1.KarpenterNodeSelectorRequirement requirements = 3 [json_name = "requirements"];</code>
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodeSelectorRequirement getRequirements(int index);
  /**
   * <code>repeated .chalk.nodepools.v1.KarpenterNodeSelectorRequirement requirements = 3 [json_name = "requirements"];</code>
   */
  int getRequirementsCount();
  /**
   * <code>repeated .chalk.nodepools.v1.KarpenterNodeSelectorRequirement requirements = 3 [json_name = "requirements"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.nodepools.v1.KarpenterNodeSelectorRequirementOrBuilder> 
      getRequirementsOrBuilderList();
  /**
   * <code>repeated .chalk.nodepools.v1.KarpenterNodeSelectorRequirement requirements = 3 [json_name = "requirements"];</code>
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodeSelectorRequirementOrBuilder getRequirementsOrBuilder(
      int index);

  /**
   * <code>.chalk.nodepools.v1.KarpenterNodeClassRef node_class_ref = 4 [json_name = "nodeClassRef"];</code>
   * @return Whether the nodeClassRef field is set.
   */
  boolean hasNodeClassRef();
  /**
   * <code>.chalk.nodepools.v1.KarpenterNodeClassRef node_class_ref = 4 [json_name = "nodeClassRef"];</code>
   * @return The nodeClassRef.
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodeClassRef getNodeClassRef();
  /**
   * <code>.chalk.nodepools.v1.KarpenterNodeClassRef node_class_ref = 4 [json_name = "nodeClassRef"];</code>
   */
  ai.chalk.protos.chalk.nodepools.v1.KarpenterNodeClassRefOrBuilder getNodeClassRefOrBuilder();

  /**
   * <code>optional .google.protobuf.Duration expire_after = 5 [json_name = "expireAfter"];</code>
   * @return Whether the expireAfter field is set.
   */
  boolean hasExpireAfter();
  /**
   * <code>optional .google.protobuf.Duration expire_after = 5 [json_name = "expireAfter"];</code>
   * @return The expireAfter.
   */
  com.google.protobuf.Duration getExpireAfter();
  /**
   * <code>optional .google.protobuf.Duration expire_after = 5 [json_name = "expireAfter"];</code>
   */
  com.google.protobuf.DurationOrBuilder getExpireAfterOrBuilder();

  /**
   * <code>optional .google.protobuf.Duration termination_grace_period = 6 [json_name = "terminationGracePeriod"];</code>
   * @return Whether the terminationGracePeriod field is set.
   */
  boolean hasTerminationGracePeriod();
  /**
   * <code>optional .google.protobuf.Duration termination_grace_period = 6 [json_name = "terminationGracePeriod"];</code>
   * @return The terminationGracePeriod.
   */
  com.google.protobuf.Duration getTerminationGracePeriod();
  /**
   * <code>optional .google.protobuf.Duration termination_grace_period = 6 [json_name = "terminationGracePeriod"];</code>
   */
  com.google.protobuf.DurationOrBuilder getTerminationGracePeriodOrBuilder();
}
