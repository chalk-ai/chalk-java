// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/engine/v1/plan.proto

// Protobuf Java Version: 3.25.3
package ai.chalk.protos.chalk.engine.v1;

public interface GivensScanOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.engine.v1.GivensScan)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   *&#47; TODO I think there's some discussion as to how exactly Givens will be implemented
   * One option is basically a "project" where it lists expected fields, and caller passes in an actual PlanBatch during execution
   * </pre>
   *
   * <code>repeated .chalk.engine.v1.Key fields = 1 [json_name = "fields"];</code>
   */
  java.util.List<ai.chalk.protos.chalk.engine.v1.Key> 
      getFieldsList();
  /**
   * <pre>
   *&#47; TODO I think there's some discussion as to how exactly Givens will be implemented
   * One option is basically a "project" where it lists expected fields, and caller passes in an actual PlanBatch during execution
   * </pre>
   *
   * <code>repeated .chalk.engine.v1.Key fields = 1 [json_name = "fields"];</code>
   */
  ai.chalk.protos.chalk.engine.v1.Key getFields(int index);
  /**
   * <pre>
   *&#47; TODO I think there's some discussion as to how exactly Givens will be implemented
   * One option is basically a "project" where it lists expected fields, and caller passes in an actual PlanBatch during execution
   * </pre>
   *
   * <code>repeated .chalk.engine.v1.Key fields = 1 [json_name = "fields"];</code>
   */
  int getFieldsCount();
  /**
   * <pre>
   *&#47; TODO I think there's some discussion as to how exactly Givens will be implemented
   * One option is basically a "project" where it lists expected fields, and caller passes in an actual PlanBatch during execution
   * </pre>
   *
   * <code>repeated .chalk.engine.v1.Key fields = 1 [json_name = "fields"];</code>
   */
  java.util.List<? extends ai.chalk.protos.chalk.engine.v1.KeyOrBuilder> 
      getFieldsOrBuilderList();
  /**
   * <pre>
   *&#47; TODO I think there's some discussion as to how exactly Givens will be implemented
   * One option is basically a "project" where it lists expected fields, and caller passes in an actual PlanBatch during execution
   * </pre>
   *
   * <code>repeated .chalk.engine.v1.Key fields = 1 [json_name = "fields"];</code>
   */
  ai.chalk.protos.chalk.engine.v1.KeyOrBuilder getFieldsOrBuilder(
      int index);
}
