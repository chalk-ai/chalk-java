// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/engine/v2/feature_values_chart.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.engine.v2;

/**
 * Protobuf enum {@code chalk.engine.v2.FeatureValueBaseWindowFunction}
 */
public enum FeatureValueBaseWindowFunction
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED = 0;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED(0),
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES = 1;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES(1),
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS = 2;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS(2),
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE = 3;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE(3),
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE = 4;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE(4),
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE = 5;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE(5),
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE = 6;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE(6),
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS = 7;</code>
   */
  FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED = 0;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED_VALUE = 0;
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES = 1;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES_VALUE = 1;
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS = 2;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS_VALUE = 2;
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE = 3;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE_VALUE = 3;
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE = 4;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE_VALUE = 4;
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE = 5;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE_VALUE = 5;
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE = 6;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE_VALUE = 6;
  /**
   * <code>FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS = 7;</code>
   */
  public static final int FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FeatureValueBaseWindowFunction valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FeatureValueBaseWindowFunction forNumber(int value) {
    switch (value) {
      case 0: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED;
      case 1: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES;
      case 2: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS;
      case 3: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE;
      case 4: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE;
      case 5: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE;
      case 6: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE;
      case 7: return FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FeatureValueBaseWindowFunction>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FeatureValueBaseWindowFunction> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FeatureValueBaseWindowFunction>() {
          public FeatureValueBaseWindowFunction findValueByNumber(int number) {
            return FeatureValueBaseWindowFunction.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.engine.v2.FeatureValuesChartProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final FeatureValueBaseWindowFunction[] VALUES = values();

  public static FeatureValueBaseWindowFunction valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FeatureValueBaseWindowFunction(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:chalk.engine.v2.FeatureValueBaseWindowFunction)
}

