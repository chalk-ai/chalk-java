// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/engine/v1/bloom_filter.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.engine.v1;

public interface BloomFilterOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.engine.v1.BloomFilter)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string environment = 1 [json_name = "environment"];</code>
   * @return The environment.
   */
  java.lang.String getEnvironment();
  /**
   * <code>string environment = 1 [json_name = "environment"];</code>
   * @return The bytes for environment.
   */
  com.google.protobuf.ByteString
      getEnvironmentBytes();

  /**
   * <code>string namespace = 2 [json_name = "namespace"];</code>
   * @return The namespace.
   */
  java.lang.String getNamespace();
  /**
   * <code>string namespace = 2 [json_name = "namespace"];</code>
   * @return The bytes for namespace.
   */
  com.google.protobuf.ByteString
      getNamespaceBytes();

  /**
   * <pre>
   * number of items actually inserted into this bloom filter
   * </pre>
   *
   * <code>uint64 num_entries = 3 [json_name = "numEntries"];</code>
   * @return The numEntries.
   */
  long getNumEntries();

  /**
   * <pre>
   * Expected max number of entries, used to calculate size w.r.t error rate
   * </pre>
   *
   * <code>uint64 num_expected_entries = 4 [json_name = "numExpectedEntries"];</code>
   * @return The numExpectedEntries.
   */
  long getNumExpectedEntries();

  /**
   * <code>uint64 num_hashes = 5 [json_name = "numHashes"];</code>
   * @return The numHashes.
   */
  long getNumHashes();

  /**
   * <code>uint64 size_bytes = 6 [json_name = "sizeBytes"];</code>
   * @return The sizeBytes.
   */
  long getSizeBytes();

  /**
   * <code>bytes data = 7 [json_name = "data"];</code>
   * @return The data.
   */
  com.google.protobuf.ByteString getData();
}
