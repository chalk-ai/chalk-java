// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/server/v1/status.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.server.v1;

/**
 * Protobuf type {@code chalk.server.v1.HealthCheckFilters}
 */
public final class HealthCheckFilters extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:chalk.server.v1.HealthCheckFilters)
    HealthCheckFiltersOrBuilder {
private static final long serialVersionUID = 0L;
  // Use HealthCheckFilters.newBuilder() to construct.
  private HealthCheckFilters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private HealthCheckFilters() {
    name_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    status_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new HealthCheckFilters();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.server.v1.StatusProto.internal_static_chalk_server_v1_HealthCheckFilters_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.chalk.protos.chalk.server.v1.StatusProto.internal_static_chalk_server_v1_HealthCheckFilters_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.chalk.protos.chalk.server.v1.HealthCheckFilters.class, ai.chalk.protos.chalk.server.v1.HealthCheckFilters.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList name_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @return A list containing the name.
   */
  public com.google.protobuf.ProtocolStringList
      getNameList() {
    return name_;
  }
  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @return The count of name.
   */
  public int getNameCount() {
    return name_.size();
  }
  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @param index The index of the element to return.
   * @return The name at the given index.
   */
  public java.lang.String getName(int index) {
    return name_.get(index);
  }
  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the name at the given index.
   */
  public com.google.protobuf.ByteString
      getNameBytes(int index) {
    return name_.getByteString(index);
  }

  public static final int STATUS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> status_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, ai.chalk.protos.chalk.server.v1.HealthCheckStatus> status_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, ai.chalk.protos.chalk.server.v1.HealthCheckStatus>() {
            public ai.chalk.protos.chalk.server.v1.HealthCheckStatus convert(java.lang.Integer from) {
              ai.chalk.protos.chalk.server.v1.HealthCheckStatus result = ai.chalk.protos.chalk.server.v1.HealthCheckStatus.forNumber(from);
              return result == null ? ai.chalk.protos.chalk.server.v1.HealthCheckStatus.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @return A list containing the status.
   */
  @java.lang.Override
  public java.util.List<ai.chalk.protos.chalk.server.v1.HealthCheckStatus> getStatusList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, ai.chalk.protos.chalk.server.v1.HealthCheckStatus>(status_, status_converter_);
  }
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @return The count of status.
   */
  @java.lang.Override
  public int getStatusCount() {
    return status_.size();
  }
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @param index The index of the element to return.
   * @return The status at the given index.
   */
  @java.lang.Override
  public ai.chalk.protos.chalk.server.v1.HealthCheckStatus getStatus(int index) {
    return status_converter_.convert(status_.get(index));
  }
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @return A list containing the enum numeric values on the wire for status.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getStatusValueList() {
    return status_;
  }
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of status at the given index.
   */
  @java.lang.Override
  public int getStatusValue(int index) {
    return status_.get(index);
  }
  private int statusMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < name_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_.getRaw(i));
    }
    if (getStatusList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(statusMemoizedSerializedSize);
    }
    for (int i = 0; i < status_.size(); i++) {
      output.writeEnumNoTag(status_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < name_.size(); i++) {
        dataSize += computeStringSizeNoTag(name_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getNameList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < status_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(status_.get(i));
      }
      size += dataSize;
      if (!getStatusList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }statusMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.chalk.protos.chalk.server.v1.HealthCheckFilters)) {
      return super.equals(obj);
    }
    ai.chalk.protos.chalk.server.v1.HealthCheckFilters other = (ai.chalk.protos.chalk.server.v1.HealthCheckFilters) obj;

    if (!getNameList()
        .equals(other.getNameList())) return false;
    if (!status_.equals(other.status_)) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getNameCount() > 0) {
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getNameList().hashCode();
    }
    if (getStatusCount() > 0) {
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_.hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.chalk.protos.chalk.server.v1.HealthCheckFilters prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code chalk.server.v1.HealthCheckFilters}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:chalk.server.v1.HealthCheckFilters)
      ai.chalk.protos.chalk.server.v1.HealthCheckFiltersOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.chalk.protos.chalk.server.v1.StatusProto.internal_static_chalk_server_v1_HealthCheckFilters_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.chalk.protos.chalk.server.v1.StatusProto.internal_static_chalk_server_v1_HealthCheckFilters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.chalk.protos.chalk.server.v1.HealthCheckFilters.class, ai.chalk.protos.chalk.server.v1.HealthCheckFilters.Builder.class);
    }

    // Construct using ai.chalk.protos.chalk.server.v1.HealthCheckFilters.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      name_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      status_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.chalk.protos.chalk.server.v1.StatusProto.internal_static_chalk_server_v1_HealthCheckFilters_descriptor;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.server.v1.HealthCheckFilters getDefaultInstanceForType() {
      return ai.chalk.protos.chalk.server.v1.HealthCheckFilters.getDefaultInstance();
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.server.v1.HealthCheckFilters build() {
      ai.chalk.protos.chalk.server.v1.HealthCheckFilters result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.chalk.protos.chalk.server.v1.HealthCheckFilters buildPartial() {
      ai.chalk.protos.chalk.server.v1.HealthCheckFilters result = new ai.chalk.protos.chalk.server.v1.HealthCheckFilters(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(ai.chalk.protos.chalk.server.v1.HealthCheckFilters result) {
      if (((bitField0_ & 0x00000002) != 0)) {
        status_ = java.util.Collections.unmodifiableList(status_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.status_ = status_;
    }

    private void buildPartial0(ai.chalk.protos.chalk.server.v1.HealthCheckFilters result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        name_.makeImmutable();
        result.name_ = name_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.chalk.protos.chalk.server.v1.HealthCheckFilters) {
        return mergeFrom((ai.chalk.protos.chalk.server.v1.HealthCheckFilters)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.chalk.protos.chalk.server.v1.HealthCheckFilters other) {
      if (other == ai.chalk.protos.chalk.server.v1.HealthCheckFilters.getDefaultInstance()) return this;
      if (!other.name_.isEmpty()) {
        if (name_.isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
        } else {
          ensureNameIsMutable();
          name_.addAll(other.name_);
        }
        onChanged();
      }
      if (!other.status_.isEmpty()) {
        if (status_.isEmpty()) {
          status_ = other.status_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureStatusIsMutable();
          status_.addAll(other.status_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureNameIsMutable();
              name_.add(s);
              break;
            } // case 10
            case 16: {
              int tmpRaw = input.readEnum();
              ensureStatusIsMutable();
              status_.add(tmpRaw);
              break;
            } // case 16
            case 18: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                ensureStatusIsMutable();
                status_.add(tmpRaw);
              }
              input.popLimit(oldLimit);
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.LazyStringArrayList name_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureNameIsMutable() {
      if (!name_.isModifiable()) {
        name_ = new com.google.protobuf.LazyStringArrayList(name_);
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @return A list containing the name.
     */
    public com.google.protobuf.ProtocolStringList
        getNameList() {
      name_.makeImmutable();
      return name_;
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @return The count of name.
     */
    public int getNameCount() {
      return name_.size();
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @param index The index of the element to return.
     * @return The name at the given index.
     */
    public java.lang.String getName(int index) {
      return name_.get(index);
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the name at the given index.
     */
    public com.google.protobuf.ByteString
        getNameBytes(int index) {
      return name_.getByteString(index);
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @param index The index to set the value at.
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureNameIsMutable();
      name_.set(index, value);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @param value The name to add.
     * @return This builder for chaining.
     */
    public Builder addName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureNameIsMutable();
      name_.add(value);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @param values The name to add.
     * @return This builder for chaining.
     */
    public Builder addAllName(
        java.lang.Iterable<java.lang.String> values) {
      ensureNameIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, name_);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
     * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
     * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
     * </pre>
     *
     * <code>repeated string name = 1 [json_name = "name"];</code>
     * @param value The bytes of the name to add.
     * @return This builder for chaining.
     */
    public Builder addNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureNameIsMutable();
      name_.add(value);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> status_ =
      java.util.Collections.emptyList();
    private void ensureStatusIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        status_ = new java.util.ArrayList<java.lang.Integer>(status_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @return A list containing the status.
     */
    public java.util.List<ai.chalk.protos.chalk.server.v1.HealthCheckStatus> getStatusList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, ai.chalk.protos.chalk.server.v1.HealthCheckStatus>(status_, status_converter_);
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @return The count of status.
     */
    public int getStatusCount() {
      return status_.size();
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param index The index of the element to return.
     * @return The status at the given index.
     */
    public ai.chalk.protos.chalk.server.v1.HealthCheckStatus getStatus(int index) {
      return status_converter_.convert(status_.get(index));
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param index The index to set the value at.
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(
        int index, ai.chalk.protos.chalk.server.v1.HealthCheckStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureStatusIsMutable();
      status_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param value The status to add.
     * @return This builder for chaining.
     */
    public Builder addStatus(ai.chalk.protos.chalk.server.v1.HealthCheckStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureStatusIsMutable();
      status_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param values The status to add.
     * @return This builder for chaining.
     */
    public Builder addAllStatus(
        java.lang.Iterable<? extends ai.chalk.protos.chalk.server.v1.HealthCheckStatus> values) {
      ensureStatusIsMutable();
      for (ai.chalk.protos.chalk.server.v1.HealthCheckStatus value : values) {
        status_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      status_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @return A list containing the enum numeric values on the wire for status.
     */
    public java.util.List<java.lang.Integer>
    getStatusValueList() {
      return java.util.Collections.unmodifiableList(status_);
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of status at the given index.
     */
    public int getStatusValue(int index) {
      return status_.get(index);
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(
        int index, int value) {
      ensureStatusIsMutable();
      status_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param value The enum numeric value on the wire for status to add.
     * @return This builder for chaining.
     */
    public Builder addStatusValue(int value) {
      ensureStatusIsMutable();
      status_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
     * @param values The enum numeric values on the wire for status to add.
     * @return This builder for chaining.
     */
    public Builder addAllStatusValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureStatusIsMutable();
      for (int value : values) {
        status_.add(value);
      }
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:chalk.server.v1.HealthCheckFilters)
  }

  // @@protoc_insertion_point(class_scope:chalk.server.v1.HealthCheckFilters)
  private static final ai.chalk.protos.chalk.server.v1.HealthCheckFilters DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.chalk.protos.chalk.server.v1.HealthCheckFilters();
  }

  public static ai.chalk.protos.chalk.server.v1.HealthCheckFilters getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HealthCheckFilters>
      PARSER = new com.google.protobuf.AbstractParser<HealthCheckFilters>() {
    @java.lang.Override
    public HealthCheckFilters parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<HealthCheckFilters> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HealthCheckFilters> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.chalk.protos.chalk.server.v1.HealthCheckFilters getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

