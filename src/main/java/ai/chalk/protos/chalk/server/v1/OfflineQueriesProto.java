// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/server/v1/offline_queries.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.server.v1;

public final class OfflineQueriesProto {
  private OfflineQueriesProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_chalk_server_v1_OfflineQueryMeta_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_chalk_server_v1_OfflineQueryMeta_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_chalk_server_v1_ListOfflineQueriesRequest_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_chalk_server_v1_ListOfflineQueriesRequest_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_chalk_server_v1_ListOfflineQueriesResponse_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_chalk_server_v1_ListOfflineQueriesResponse_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_chalk_server_v1_GetOfflineQueryRequest_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_chalk_server_v1_GetOfflineQueryRequest_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_chalk_server_v1_GetOfflineQueryResponse_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_chalk_server_v1_GetOfflineQueryResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n%chalk/server/v1/offline_queries.proto\022" +
      "\017chalk.server.v1\032 chalk/aggregate/v1/ser" +
      "vice.proto\032\037chalk/auth/v1/permissions.pr" +
      "oto\032\036chalk/server/v1/datasets.proto\032)cha" +
      "lk/server/v1/performance_summary.proto\032\034" +
      "google/protobuf/struct.proto\032\037google/pro" +
      "tobuf/timestamp.proto\"\215\022\n\020OfflineQueryMe" +
      "ta\022\016\n\002id\030\001 \001(\003R\002id\022!\n\014operation_id\030\002 \001(\t" +
      "R\013operationId\022%\n\016environment_id\030\003 \001(\tR\re" +
      "nvironmentId\022#\n\rdeployment_id\030\004 \001(\tR\014dep" +
      "loymentId\0229\n\ncreated_at\030\005 \001(\0132\032.google.p" +
      "rotobuf.TimestampR\tcreatedAt\022:\n\nquery_me" +
      "ta\030\006 \001(\0132\026.google.protobuf.ValueH\000R\tquer" +
      "yMeta\210\001\001\022\'\n\rquery_plan_id\030\007 \001(\tH\001R\013query" +
      "PlanId\210\001\001\022$\n\013branch_name\030\010 \001(\tH\002R\nbranch" +
      "Name\210\001\001\022\"\n\ndataset_id\030\t \001(\tH\003R\tdatasetId" +
      "\210\001\001\022&\n\014dataset_name\030\n \001(\tH\004R\013datasetName" +
      "\210\001\001\022\"\n\nhas_errors\030\013 \001(\010H\005R\thasErrors\210\001\001\022" +
      "\036\n\010agent_id\030\014 \001(\tH\006R\007agentId\210\001\001\022\036\n\010trace" +
      "_id\030\r \001(\tH\007R\007traceId\210\001\001\022*\n\016correlation_i" +
      "d\030\016 \001(\tH\010R\rcorrelationId\210\001\001\022=\n\014completed" +
      "_at\030\017 \001(\0132\032.google.protobuf.TimestampR\013c" +
      "ompletedAt\022@\n\006status\030\020 \001(\0162#.chalk.serve" +
      "r.v1.OfflineQueryStatusH\tR\006status\210\001\001\022&\n\017" +
      "has_plan_stages\030\021 \001(\010R\rhasPlanStages\022,\n\017" +
      "total_computers\030\022 \001(\005H\nR\016totalComputers\210" +
      "\001\001\022;\n\027num_completed_computers\030\023 \001(\005H\013R\025n" +
      "umCompletedComputers\210\001\001\022.\n\020total_partiti" +
      "ons\030\024 \001(\005H\014R\017totalPartitions\210\001\001\022=\n\030num_c" +
      "ompleted_partitions\030\025 \001(\005H\rR\026numComplete" +
      "dPartitions\210\001\001\0222\n\022recompute_features\030\026 \001" +
      "(\tH\016R\021recomputeFeatures\210\001\001\022+\n\017spine_sql_" +
      "query\030\027 \001(\tH\017R\rspineSqlQuery\210\001\001\0225\n\007filte" +
      "rs\030\030 \001(\0132\026.google.protobuf.ValueH\020R\007filt" +
      "ers\210\001\001\022D\n\017planner_options\030\031 \001(\0132\026.google" +
      ".protobuf.ValueH\021R\016plannerOptions\210\001\001\022D\n\017" +
      "invoker_options\030\032 \001(\0132\026.google.protobuf." +
      "ValueH\022R\016invokerOptions\210\001\001\022E\n\nquery_type" +
      "\030\033 \001(\0162!.chalk.server.v1.OfflineQueryKin" +
      "dH\023R\tqueryType\210\001\001\022\022\n\004tags\030\034 \003(\tR\004tags\0224\n" +
      "\026required_resolver_tags\030\035 \003(\tR\024requiredR" +
      "esolverTags\0227\n\025aggregate_backfill_id\030\036 \001" +
      "(\tH\024R\023aggregateBackfillId\210\001\001\0223\n\006output\030\037" +
      " \001(\0132\026.google.protobuf.ValueH\025R\006output\210\001" +
      "\001\022D\n\017required_output\030  \001(\0132\026.google.prot" +
      "obuf.ValueH\026R\016requiredOutput\210\001\001\022/\n\021raw_b" +
      "ody_filename\030! \001(\tH\027R\017rawBodyFilename\210\001\001" +
      "\022T\n\020dataset_revision\030\" \001(\0132$.chalk.serve" +
      "r.v1.DatasetRevisionMetaH\030R\017datasetRevis" +
      "ion\210\001\001\022R\n\013time_series\030# \003(\01321.chalk.aggr" +
      "egate.v1.PlanAggregateBackfillResponseR\n" +
      "timeSeries\022/\n\021evaluation_run_id\030$ \001(\tH\031R" +
      "\017evaluationRunId\210\001\001B\r\n\013_query_metaB\020\n\016_q" +
      "uery_plan_idB\016\n\014_branch_nameB\r\n\013_dataset" +
      "_idB\017\n\r_dataset_nameB\r\n\013_has_errorsB\013\n\t_" +
      "agent_idB\013\n\t_trace_idB\021\n\017_correlation_id" +
      "B\t\n\007_statusB\022\n\020_total_computersB\032\n\030_num_" +
      "completed_computersB\023\n\021_total_partitions" +
      "B\033\n\031_num_completed_partitionsB\025\n\023_recomp" +
      "ute_featuresB\022\n\020_spine_sql_queryB\n\n\010_fil" +
      "tersB\022\n\020_planner_optionsB\022\n\020_invoker_opt" +
      "ionsB\r\n\013_query_typeB\030\n\026_aggregate_backfi" +
      "ll_idB\t\n\007_outputB\022\n\020_required_outputB\024\n\022" +
      "_raw_body_filenameB\023\n\021_dataset_revisionB" +
      "\024\n\022_evaluation_run_id\"\367\005\n\031ListOfflineQue" +
      "riesRequest\022\033\n\006cursor\030\001 \001(\tH\000R\006cursor\210\001\001" +
      "\022\031\n\005limit\030\002 \001(\005H\001R\005limit\210\001\001\022\"\n\nstart_dat" +
      "e\030\003 \001(\tH\002R\tstartDate\210\001\001\022\036\n\010end_date\030\004 \001(" +
      "\tH\003R\007endDate\210\001\001\022 \n\tid_filter\030\005 \001(\tH\004R\010id" +
      "Filter\210\001\001\022+\n\017agent_id_filter\030\006 \001(\tH\005R\rag" +
      "entIdFilter\210\001\001\022(\n\rbranch_filter\030\007 \001(\tH\006R" +
      "\014branchFilter\210\001\001\022G\n\013kind_filter\030\010 \001(\0162!." +
      "chalk.server.v1.OfflineQueryKindH\007R\nkind" +
      "Filter\210\001\001\022M\n\rstatus_filter\030\t \001(\0162#.chalk" +
      ".server.v1.OfflineQueryStatusH\010R\014statusF" +
      "ilter\210\001\001\022H\n\036aggregation_backfill_id_filt" +
      "er\030\n \001(\tH\tR\033aggregationBackfillIdFilter\210" +
      "\001\001\022<\n\030evaluation_run_id_filter\030\013 \001(\tH\nR\025" +
      "evaluationRunIdFilter\210\001\001B\t\n\007_cursorB\010\n\006_" +
      "limitB\r\n\013_start_dateB\013\n\t_end_dateB\014\n\n_id" +
      "_filterB\022\n\020_agent_id_filterB\020\n\016_branch_f" +
      "ilterB\016\n\014_kind_filterB\020\n\016_status_filterB" +
      "!\n\037_aggregation_backfill_id_filterB\033\n\031_e" +
      "valuation_run_id_filter\"\220\001\n\032ListOfflineQ" +
      "ueriesResponse\022J\n\017offline_queries\030\001 \003(\0132" +
      "!.chalk.server.v1.OfflineQueryMetaR\016offl" +
      "ineQueries\022\033\n\006cursor\030\002 \001(\tH\000R\006cursor\210\001\001B" +
      "\t\n\007_cursor\"B\n\026GetOfflineQueryRequest\022(\n\020" +
      "offline_query_id\030\001 \001(\tR\016offlineQueryId\"a" +
      "\n\027GetOfflineQueryResponse\022F\n\roffline_que" +
      "ry\030\001 \001(\0132!.chalk.server.v1.OfflineQueryM" +
      "etaR\014offlineQuery*\207\002\n\022OfflineQueryStatus" +
      "\022$\n OFFLINE_QUERY_STATUS_UNSPECIFIED\020\000\022 " +
      "\n\034OFFLINE_QUERY_STATUS_UNKNOWN\020\001\022 \n\034OFFL" +
      "INE_QUERY_STATUS_WORKING\020\002\022\037\n\033OFFLINE_QU" +
      "ERY_STATUS_FAILED\020\003\022\"\n\036OFFLINE_QUERY_STA" +
      "TUS_COMPLETED\020\004\022!\n\035OFFLINE_QUERY_STATUS_" +
      "CANCELED\020\005\022\037\n\033OFFLINE_QUERY_STATUS_QUEUE" +
      "D\020\006*\252\002\n\020OfflineQueryKind\022\"\n\036OFFLINE_QUER" +
      "Y_KIND_UNSPECIFIED\020\000\022\036\n\032OFFLINE_QUERY_KI" +
      "ND_UNKNOWN\020\001\022*\n&OFFLINE_QUERY_KIND_ASYNC" +
      "_OFFLINE_QUERY\020\002\022)\n%OFFLINE_QUERY_KIND_C" +
      "RON_OFFLINE_QUERY\020\003\022$\n OFFLINE_QUERY_KIN" +
      "D_OFFLINE_QUERY\020\004\022(\n$OFFLINE_QUERY_KIND_" +
      "DATASET_INGESTION\020\005\022+\n\'OFFLINE_QUERY_KIN" +
      "D_AGGREGATION_BACKFILL\020\0062\277\003\n\033OfflineQuer" +
      "yMetadataService\022u\n\022ListOfflineQueries\022*" +
      ".chalk.server.v1.ListOfflineQueriesReque" +
      "st\032+.chalk.server.v1.ListOfflineQueriesR" +
      "esponse\"\006\220\002\001\200}\013\022l\n\017GetOfflineQuery\022\'.cha" +
      "lk.server.v1.GetOfflineQueryRequest\032(.ch" +
      "alk.server.v1.GetOfflineQueryResponse\"\006\220" +
      "\002\001\200}\013\022\272\001\n)ListOfflineQueryShardPerforman" +
      "ceSummaries\022A.chalk.server.v1.ListOfflin" +
      "eQueryShardPerformanceSummariesRequest\032B" +
      ".chalk.server.v1.ListOfflineQueryShardPe" +
      "rformanceSummariesResponse\"\006\220\002\001\200}\013B\250\001\n\037a" +
      "i.chalk.protos.chalk.server.v1B\023OfflineQ" +
      "ueriesProtoP\001Z\022server/v1;serverv1\242\002\003CSX\252" +
      "\002\017Chalk.Server.V1\312\002\017Chalk\\Server\\V1\342\002\033Ch" +
      "alk\\Server\\V1\\GPBMetadata\352\002\021Chalk::Serve" +
      "r::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          ai.chalk.protos.chalk.aggregate.v1.ServiceProto.getDescriptor(),
          ai.chalk.protos.chalk.auth.v1.PermissionsProto.getDescriptor(),
          ai.chalk.protos.chalk.server.v1.DatasetsProto.getDescriptor(),
          ai.chalk.protos.chalk.server.v1.PerformanceSummaryProto.getDescriptor(),
          com.google.protobuf.StructProto.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_chalk_server_v1_OfflineQueryMeta_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_chalk_server_v1_OfflineQueryMeta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_chalk_server_v1_OfflineQueryMeta_descriptor,
        new java.lang.String[] { "Id", "OperationId", "EnvironmentId", "DeploymentId", "CreatedAt", "QueryMeta", "QueryPlanId", "BranchName", "DatasetId", "DatasetName", "HasErrors", "AgentId", "TraceId", "CorrelationId", "CompletedAt", "Status", "HasPlanStages", "TotalComputers", "NumCompletedComputers", "TotalPartitions", "NumCompletedPartitions", "RecomputeFeatures", "SpineSqlQuery", "Filters", "PlannerOptions", "InvokerOptions", "QueryType", "Tags", "RequiredResolverTags", "AggregateBackfillId", "Output", "RequiredOutput", "RawBodyFilename", "DatasetRevision", "TimeSeries", "EvaluationRunId", });
    internal_static_chalk_server_v1_ListOfflineQueriesRequest_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_chalk_server_v1_ListOfflineQueriesRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_chalk_server_v1_ListOfflineQueriesRequest_descriptor,
        new java.lang.String[] { "Cursor", "Limit", "StartDate", "EndDate", "IdFilter", "AgentIdFilter", "BranchFilter", "KindFilter", "StatusFilter", "AggregationBackfillIdFilter", "EvaluationRunIdFilter", });
    internal_static_chalk_server_v1_ListOfflineQueriesResponse_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_chalk_server_v1_ListOfflineQueriesResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_chalk_server_v1_ListOfflineQueriesResponse_descriptor,
        new java.lang.String[] { "OfflineQueries", "Cursor", });
    internal_static_chalk_server_v1_GetOfflineQueryRequest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_chalk_server_v1_GetOfflineQueryRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_chalk_server_v1_GetOfflineQueryRequest_descriptor,
        new java.lang.String[] { "OfflineQueryId", });
    internal_static_chalk_server_v1_GetOfflineQueryResponse_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_chalk_server_v1_GetOfflineQueryResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_chalk_server_v1_GetOfflineQueryResponse_descriptor,
        new java.lang.String[] { "OfflineQuery", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(ai.chalk.protos.chalk.auth.v1.PermissionsProto.permission);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    ai.chalk.protos.chalk.aggregate.v1.ServiceProto.getDescriptor();
    ai.chalk.protos.chalk.auth.v1.PermissionsProto.getDescriptor();
    ai.chalk.protos.chalk.server.v1.DatasetsProto.getDescriptor();
    ai.chalk.protos.chalk.server.v1.PerformanceSummaryProto.getDescriptor();
    com.google.protobuf.StructProto.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
