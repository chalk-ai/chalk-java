// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/server/v1/status.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.server.v1;

public interface HealthCheckFiltersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.server.v1.HealthCheckFilters)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @return A list containing the name.
   */
  java.util.List<java.lang.String>
      getNameList();
  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @return The count of name.
   */
  int getNameCount();
  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @param index The index of the element to return.
   * @return The name at the given index.
   */
  java.lang.String getName(int index);
  /**
   * <pre>
   * All of these fields are optional. If any are specified, they will be AND'd together in a where clause
   * Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
   * i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
   * </pre>
   *
   * <code>repeated string name = 1 [json_name = "name"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the name at the given index.
   */
  com.google.protobuf.ByteString
      getNameBytes(int index);

  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @return A list containing the status.
   */
  java.util.List<ai.chalk.protos.chalk.server.v1.HealthCheckStatus> getStatusList();
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @return The count of status.
   */
  int getStatusCount();
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @param index The index of the element to return.
   * @return The status at the given index.
   */
  ai.chalk.protos.chalk.server.v1.HealthCheckStatus getStatus(int index);
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @return A list containing the enum numeric values on the wire for status.
   */
  java.util.List<java.lang.Integer>
  getStatusValueList();
  /**
   * <code>repeated .chalk.server.v1.HealthCheckStatus status = 2 [json_name = "status"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of status at the given index.
   */
  int getStatusValue(int index);
}
