// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/server/v1/kube.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.server.v1;

public interface GetPodStackTraceDumpRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:chalk.server.v1.GetPodStackTraceDumpRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * If unspecified, defaults to the kube job namespace for the active environment (read from x-chalk-env-id header)
   * </pre>
   *
   * <code>optional string namespace = 1 [json_name = "namespace"];</code>
   * @return Whether the namespace field is set.
   */
  boolean hasNamespace();
  /**
   * <pre>
   * If unspecified, defaults to the kube job namespace for the active environment (read from x-chalk-env-id header)
   * </pre>
   *
   * <code>optional string namespace = 1 [json_name = "namespace"];</code>
   * @return The namespace.
   */
  java.lang.String getNamespace();
  /**
   * <pre>
   * If unspecified, defaults to the kube job namespace for the active environment (read from x-chalk-env-id header)
   * </pre>
   *
   * <code>optional string namespace = 1 [json_name = "namespace"];</code>
   * @return The bytes for namespace.
   */
  com.google.protobuf.ByteString
      getNamespaceBytes();

  /**
   * <code>string pod_name = 2 [json_name = "podName"];</code>
   * @return The podName.
   */
  java.lang.String getPodName();
  /**
   * <code>string pod_name = 2 [json_name = "podName"];</code>
   * @return The bytes for podName.
   */
  com.google.protobuf.ByteString
      getPodNameBytes();

  /**
   * <pre>
   * Optional specification of the container to use
   * Required if the pod has multiple containers (ex. engine pods also have proxy and sidecars
   * </pre>
   *
   * <code>optional string container_name = 3 [json_name = "containerName"];</code>
   * @return Whether the containerName field is set.
   */
  boolean hasContainerName();
  /**
   * <pre>
   * Optional specification of the container to use
   * Required if the pod has multiple containers (ex. engine pods also have proxy and sidecars
   * </pre>
   *
   * <code>optional string container_name = 3 [json_name = "containerName"];</code>
   * @return The containerName.
   */
  java.lang.String getContainerName();
  /**
   * <pre>
   * Optional specification of the container to use
   * Required if the pod has multiple containers (ex. engine pods also have proxy and sidecars
   * </pre>
   *
   * <code>optional string container_name = 3 [json_name = "containerName"];</code>
   * @return The bytes for containerName.
   */
  com.google.protobuf.ByteString
      getContainerNameBytes();

  /**
   * <code>int32 process_id = 4 [json_name = "processId"];</code>
   * @return Whether the processId field is set.
   */
  boolean hasProcessId();
  /**
   * <code>int32 process_id = 4 [json_name = "processId"];</code>
   * @return The processId.
   */
  int getProcessId();

  /**
   * <code>string process_name = 5 [json_name = "processName"];</code>
   * @return Whether the processName field is set.
   */
  boolean hasProcessName();
  /**
   * <code>string process_name = 5 [json_name = "processName"];</code>
   * @return The processName.
   */
  java.lang.String getProcessName();
  /**
   * <code>string process_name = 5 [json_name = "processName"];</code>
   * @return The bytes for processName.
   */
  com.google.protobuf.ByteString
      getProcessNameBytes();

  /**
   * <pre>
   * Infers the process id/name based on the pod/container/other contextual information
   * </pre>
   *
   * <code>bool auto_detect_process = 6 [json_name = "autoDetectProcess"];</code>
   * @return Whether the autoDetectProcess field is set.
   */
  boolean hasAutoDetectProcess();
  /**
   * <pre>
   * Infers the process id/name based on the pod/container/other contextual information
   * </pre>
   *
   * <code>bool auto_detect_process = 6 [json_name = "autoDetectProcess"];</code>
   * @return The autoDetectProcess.
   */
  boolean getAutoDetectProcess();

  ai.chalk.protos.chalk.server.v1.GetPodStackTraceDumpRequest.ProcessFilterCase getProcessFilterCase();
}
