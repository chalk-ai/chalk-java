// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chalk/metrics/v4/metrics.proto

// Protobuf Java Version: 3.25.1
package ai.chalk.protos.chalk.metrics.v4;

/**
 * Protobuf enum {@code chalk.metrics.v4.MetricName}
 */
public enum MetricName
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>METRIC_NAME_UNSPECIFIED = 0;</code>
   */
  METRIC_NAME_UNSPECIFIED(0),
  /**
   * <code>METRIC_NAME_DEFAULT_VALUES_USED = 1;</code>
   */
  METRIC_NAME_DEFAULT_VALUES_USED(1),
  /**
   * <code>METRIC_NAME_GIVENS_VALUES_USED = 2;</code>
   */
  METRIC_NAME_GIVENS_VALUES_USED(2),
  /**
   * <code>METRIC_NAME_OFFLINE_STORE_VALUES_USED = 3;</code>
   */
  METRIC_NAME_OFFLINE_STORE_VALUES_USED(3),
  /**
   * <code>METRIC_NAME_ONLINE_STORE_VALUES_USED = 4;</code>
   */
  METRIC_NAME_ONLINE_STORE_VALUES_USED(4),
  /**
   * <code>METRIC_NAME_RESOLVER_VALUES_USED = 5;</code>
   */
  METRIC_NAME_RESOLVER_VALUES_USED(5),
  /**
   * <code>METRIC_NAME_NULL_COUNT = 6;</code>
   */
  METRIC_NAME_NULL_COUNT(6),
  /**
   * <code>METRIC_NAME_NON_NULL_COUNT = 7;</code>
   */
  METRIC_NAME_NON_NULL_COUNT(7),
  /**
   * <code>METRIC_NAME_MISSING_COUNT = 8;</code>
   */
  METRIC_NAME_MISSING_COUNT(8),
  /**
   * <code>METRIC_NAME_ZERO_COUNT = 9;</code>
   */
  METRIC_NAME_ZERO_COUNT(9),
  /**
   * <code>METRIC_NAME_VALUES_DISTRIBUTION = 10;</code>
   */
  METRIC_NAME_VALUES_DISTRIBUTION(10),
  /**
   * <code>METRIC_NAME_RESOLVER_LATENCY = 11;</code>
   */
  METRIC_NAME_RESOLVER_LATENCY(11),
  /**
   * <code>METRIC_NAME_BYTES_DOWNLOADED = 12;</code>
   */
  METRIC_NAME_BYTES_DOWNLOADED(12),
  /**
   * <code>METRIC_NAME_NUM_ROWS = 13;</code>
   */
  METRIC_NAME_NUM_ROWS(13),
  /**
   * <code>METRIC_NAME_NUM_FEATURES = 14;</code>
   */
  METRIC_NAME_NUM_FEATURES(14),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>METRIC_NAME_UNSPECIFIED = 0;</code>
   */
  public static final int METRIC_NAME_UNSPECIFIED_VALUE = 0;
  /**
   * <code>METRIC_NAME_DEFAULT_VALUES_USED = 1;</code>
   */
  public static final int METRIC_NAME_DEFAULT_VALUES_USED_VALUE = 1;
  /**
   * <code>METRIC_NAME_GIVENS_VALUES_USED = 2;</code>
   */
  public static final int METRIC_NAME_GIVENS_VALUES_USED_VALUE = 2;
  /**
   * <code>METRIC_NAME_OFFLINE_STORE_VALUES_USED = 3;</code>
   */
  public static final int METRIC_NAME_OFFLINE_STORE_VALUES_USED_VALUE = 3;
  /**
   * <code>METRIC_NAME_ONLINE_STORE_VALUES_USED = 4;</code>
   */
  public static final int METRIC_NAME_ONLINE_STORE_VALUES_USED_VALUE = 4;
  /**
   * <code>METRIC_NAME_RESOLVER_VALUES_USED = 5;</code>
   */
  public static final int METRIC_NAME_RESOLVER_VALUES_USED_VALUE = 5;
  /**
   * <code>METRIC_NAME_NULL_COUNT = 6;</code>
   */
  public static final int METRIC_NAME_NULL_COUNT_VALUE = 6;
  /**
   * <code>METRIC_NAME_NON_NULL_COUNT = 7;</code>
   */
  public static final int METRIC_NAME_NON_NULL_COUNT_VALUE = 7;
  /**
   * <code>METRIC_NAME_MISSING_COUNT = 8;</code>
   */
  public static final int METRIC_NAME_MISSING_COUNT_VALUE = 8;
  /**
   * <code>METRIC_NAME_ZERO_COUNT = 9;</code>
   */
  public static final int METRIC_NAME_ZERO_COUNT_VALUE = 9;
  /**
   * <code>METRIC_NAME_VALUES_DISTRIBUTION = 10;</code>
   */
  public static final int METRIC_NAME_VALUES_DISTRIBUTION_VALUE = 10;
  /**
   * <code>METRIC_NAME_RESOLVER_LATENCY = 11;</code>
   */
  public static final int METRIC_NAME_RESOLVER_LATENCY_VALUE = 11;
  /**
   * <code>METRIC_NAME_BYTES_DOWNLOADED = 12;</code>
   */
  public static final int METRIC_NAME_BYTES_DOWNLOADED_VALUE = 12;
  /**
   * <code>METRIC_NAME_NUM_ROWS = 13;</code>
   */
  public static final int METRIC_NAME_NUM_ROWS_VALUE = 13;
  /**
   * <code>METRIC_NAME_NUM_FEATURES = 14;</code>
   */
  public static final int METRIC_NAME_NUM_FEATURES_VALUE = 14;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MetricName valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static MetricName forNumber(int value) {
    switch (value) {
      case 0: return METRIC_NAME_UNSPECIFIED;
      case 1: return METRIC_NAME_DEFAULT_VALUES_USED;
      case 2: return METRIC_NAME_GIVENS_VALUES_USED;
      case 3: return METRIC_NAME_OFFLINE_STORE_VALUES_USED;
      case 4: return METRIC_NAME_ONLINE_STORE_VALUES_USED;
      case 5: return METRIC_NAME_RESOLVER_VALUES_USED;
      case 6: return METRIC_NAME_NULL_COUNT;
      case 7: return METRIC_NAME_NON_NULL_COUNT;
      case 8: return METRIC_NAME_MISSING_COUNT;
      case 9: return METRIC_NAME_ZERO_COUNT;
      case 10: return METRIC_NAME_VALUES_DISTRIBUTION;
      case 11: return METRIC_NAME_RESOLVER_LATENCY;
      case 12: return METRIC_NAME_BYTES_DOWNLOADED;
      case 13: return METRIC_NAME_NUM_ROWS;
      case 14: return METRIC_NAME_NUM_FEATURES;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MetricName>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MetricName> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MetricName>() {
          public MetricName findValueByNumber(int number) {
            return MetricName.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ai.chalk.protos.chalk.metrics.v4.MetricsProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final MetricName[] VALUES = values();

  public static MetricName valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MetricName(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:chalk.metrics.v4.MetricName)
}

