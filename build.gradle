plugins {
    id "maven-publish"
    id "java-library"
    id "io.freefair.lombok" version "8.6"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

group 'ai.chalk'
version = project.hasProperty("version") ? project.getProperty("version") : "0.0.0"

repositories {
    mavenCentral()
}

def versions = [
    grpcVersion: '1.64.0',
    arrowVersion: '17.0.0',
    jacksonVersion: '2.15.2',
    protobufVersion: '3.25.1'
]

dependencies {
    api "com.fasterxml.jackson.core:jackson-databind:${versions.jacksonVersion}"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jacksonVersion}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jacksonVersion}"
    api "com.google.protobuf:protobuf-java:${versions.protobufVersion}"
    api "io.grpc:grpc-core:${versions.grpcVersion}"
    api "io.grpc:grpc-protobuf:${versions.grpcVersion}"
    api "io.grpc:grpc-stub:${versions.grpcVersion}"
    api "io.grpc:grpc-netty-shaded:${versions.grpcVersion}"
    api "org.apache.arrow:arrow-compression:${versions.arrowVersion}"
    api "org.apache.arrow:arrow-memory-netty:${versions.arrowVersion}"
    api "org.apache.arrow:arrow-vector:${versions.arrowVersion}"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.slf4j:slf4j-simple:2.0.9'
}

test {
    useJUnitPlatform()
    jvmArgs '--add-opens=java.base/java.nio=ALL-UNNAMED'
    testLogging {
        // Ensure that the standard output from the tests is shown in CI logs
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Required for OSSRH publishing
task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

// Required for OSSRH publishing
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

def configurePom = { pom ->
    pom.name = 'Chalk Java'
    pom.description = 'The Java client for Chalk'
    pom.url = 'https://github.com/chalk-ai/chalk-java'

    pom.licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    pom.developers {
        developer {
            id = 'chalk-ai'
            name = 'Chalk'
            email = 'support@chalk.ai'
        }
    }

    pom.scm {
        connection = 'scm:git:git://github.com/chalk-ai/chalk-java.git'
        developerConnection = 'scm:git:ssh://github.com:chalk-ai/chalk-java.git'
        url = 'https://github.com/chalk-ai/chalk-java/'
    }
}

task createCentralBundle(type: Zip) {
    dependsOn 'publishAllPublicationsToRepoRepository'

    from(layout.buildDirectory.dir('repo')) {
        include '**/*'
    }

    archiveFileName = "bundle.zip"
    destinationDirectory = layout.buildDirectory.dir("central-bundle")
}

task publishCentralBundle {
    dependsOn 'createCentralBundle'

    doLast {
        def bundleFile = layout.buildDirectory.file("central-bundle/bundle.zip").get().asFile

        if (!bundleFile.exists()) {
            throw new GradleException("Bundle file not found: ${bundleFile}")
        }

        def auth = System.getenv("CENTRAL_PORTAL_USERPASS_BASE64")

        if (!auth) {
            throw new GradleException("CENTRAL_PORTAL_USERPASS_BASE64 must be set")
        }

        println "Uploading bundle (${bundleFile.length() / 1024 / 1024} MB) to Central Portal..."

        def connection = new URL("https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC")
                .openConnection() as HttpURLConnection

        connection.setRequestMethod("POST")
        connection.setRequestProperty("Authorization", "Basic ${auth}")
        connection.setRequestProperty("Content-Type", "application/zip")
        connection.doOutput = true

        bundleFile.withInputStream { input ->
            connection.outputStream << input
        }

        def responseCode = connection.responseCode
        println "Response code: ${responseCode}"

        if (responseCode >= 200 && responseCode < 300) {
            println "âœ“ Successfully uploaded to Central Portal!"
            println connection.inputStream.text
        } else {
            def error = connection.errorStream?.text ?: "No error details"
            throw new GradleException("Upload failed with code ${responseCode}: ${error}")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom.with configurePom
        }
    }

    repositories {
        maven {
            name = 'repo'
            url = layout.buildDirectory.dir('repo')
        }
    }
}

signing {
    def signingKey = System.getenv("SIGNING_PRIVATE_KEY") ?: project.findProperty("signingPrivateKey")
    def signingPassword = System.getenv("SIGNING_PASSWORD") ?: project.findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}
